{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","benchmarks/e2e_test/naive_infinite_scroll_spec.es6","benchmarks/e2e_test/naive_infinite_scroll_spec.js"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,IAAoB,UAAS,SAAQ;;;ACApD,OAAO;AACD,UAAM,IAAmB;AACzB,UAAM;eCFG,CAAA,OAAO,AAAC,CAAA,6BAA4B,CAAC;AAEpD,aAAO,AAAE,CAAA,qCAAoC,CAAG,UAAU,AAAE;AAEtD,UAAA,CAAA,GAAE,EAAI,4DAA0D,CAAC;AAErE,gBAAQ,AAAE,CAAA,QAAO,sBAAsB,CAAC,CAAC;AAEzC,SAAE,AAAC,CAAA,yBAAwB,CAAG,UAAQ,AAAG;AACvC,gBAAM,IAAI,AAAE,CAAA,GAAE,CAAC,CAAC;AACZ,YAAA,CAAA,gBAAe,EAAI,GAAC,CAAC;AACrB,YAAA,CAAA,mBAAkB,EAAI,GAAC,CAAC;AACxB,YAAA,CAAA,cAAa,EAAI,iDAA+C,CAAC;AACjE,YAAA,CAAA,KAAI,IAAQ,cAAa,EAAA,iBAAiB,CAAA,CAAC;AAC3C,YAAA,CAAA,YAAW,IACP,cAAa,EAAA,2CAA2C,CAAA,CAAC;AAE7D,YAAA,CAAA,KAAI,EAAI,UAAS,QAAO,CAAG;AAC7B,iBAAO,CAAA,OAAM,cAAc,AACzB,EAAA,qCAAsC,EAAA,SAAO,EAAA,cAAa,EAC5D,CAAC;UACH,CAAA;AAEI,YAAA,CAAA,YAAW,EAAI,UAAS,QAAO,CAAG;AACpC,iBAAO,CAAA,OAAM,cAAc,AACzB,EAAA,2BAA4B,EAAA,SAAO,EAAA,eAAc,EACnD,CAAC;UACH,CAAA;AAEI,YAAA,CAAA,WAAU,EAAI,UAAS,QAAO,CAAG;AACnC,iBAAO,CAAA,OAAM,cAAc,AACzB,EAAA,kCAAmC,EAAA,SAAO,EAAA,iBAAgB,EAC5D,CAAC;UACH,CAAA;AAGA,cAAI,AAAE,CAAA,cAAa,CAAC,KAAM,AAAC,CAAA,SAAS,CAAA,CAAG;AACrC,iBAAK,AAAE,CAAA,CAAA,CAAC,KAAK,AAAE,CAAA,gBAAe,CAAC,CAAC;UAClC,CAAC,CAAC;AAGF,cAAI,AAAE,CAAA,KAAI,CAAC,KAAK,AAAE,CAAA,SAAS,CAAA,CAAG;AAC5B,iBAAM,AAAC,CAAA,CAAA,CAAC,KAAK,AAAE,CAAA,gBAAe,EAAI,oBAAkB,CAAC,CAAC;UACxD,CAAC,CAAC;AAGF,oBAAU,AAAE,EAAI,YAAW,EAAA,WAAW,EAAC,KAAK,AAAE,CAAA,SAAS,IAAG,CAAG;AAC3D,iBAAK,AAAE,CAAA,IAAG,CAAC,KAAK,AAAE,CAAA,SAAQ,CAAC,CAAC;AAC5B,uBAAW,AAAE,EAAI,YAAW,EAAA,WAAW,EAAC,KAAK,AAAE,CAAA,SAAQ,AAAG,CAAA;AACxD,wBAAU,AAAE,EAAI,YAAW,EAAA,WAAW,EAAC,KAAM,AAAC,CAAA,SAAS,IAAG,CAAG;AAC3D,qBAAK,AAAE,CAAA,IAAG,CAAC,KAAK,AAAE,CAAA,KAAI,CAAC,CAAC;cAC1B,CAAC,CAAA;YACH,CAAC,CAAC;UACJ,CAAC,CAAA;AAED,gBAAM,cAAc,AAChB,CAAA,gEAA+D,CAAC,CAAC;AACrE,gBAAM,cAAe,AACjB,CAAA,8DAA6D,CAAC,CAAC;AACnE,gBAAM,KAAK,AAAE,EAAA,SAAA,AAAC,CAAK;AACjB,iBAAQ,CAAA,CAAA,AAAC,CAAA,OAAM,CAAC,QAAQ,AAAC,EAAC,KAAK,AAC7B,CAAA,SAAQ,AAAG,CAAA;AAAE,mBAAO,KAAG,CAAC;YAAE,CAC1B,UAAS,AAAE,CAAA;AAAE,mBAAO,MAAI,CAAC;YAAE,CAAC,CAAC;UAC/B,EAAG,MAAI,CAAC,CAAC;QACb,CAAC,CAAC;MAEJ,CAAC,CAAC;IDhE6B;EAC3B,CAAA;ADDI,CAAC,CAAC;AG8C0C","file":"benchmarks/e2e_test/naive_infinite_scroll_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","var testUtil = require('angular2/e2e_test/test_util');\n\ndescribe('ng2 naive infinite scroll benchmark', function () {\n\n  var URL = 'benchmarks/src/naive_infinite_scroll/index.html?appSize=3';\n\n  afterEach(testUtil.verifyNoBrowserErrors);\n\n  it('should not throw errors', function() {\n    browser.get(URL);\n    var expectedRowCount = 18;\n    var expectedCellsPerRow = 11;\n    var allScrollItems = 'scroll-app /deep/ #testArea /deep/ scroll-item';\n    var cells = `${ allScrollItems } /deep/ .row *`;\n    var stageButtons =\n        `${ allScrollItems } /deep/ .row stage-buttons /deep/ button`;\n\n    var count = function(selector) {\n      return browser.executeScript(\n        `return document.querySelectorAll(\"${ selector }\").length;`\n      );\n    }\n\n    var clickFirstOf = function(selector) {\n      return browser.executeScript(\n        `document.querySelector(\"${ selector }\").click();`\n      );\n    }\n\n    var firstTextOf = function(selector) {\n      return browser.executeScript(\n        `return document.querySelector(\"${ selector }\").innerText;`\n      );\n    }\n\n    // Make sure rows are rendered\n    count(allScrollItems).then(function(c) {\n      expect(c).toBe(expectedRowCount);\n    });\n\n    // Make sure cells are rendered\n    count(cells).then(function(c) {\n      expect(c).toBe(expectedRowCount * expectedCellsPerRow);\n    });\n\n    // Click on first enabled button and verify stage changes\n    firstTextOf(`${ stageButtons }:enabled`).then(function(text) {\n      expect(text).toBe('Pitched');\n      clickFirstOf(`${ stageButtons }:enabled`).then(function() {\n        firstTextOf(`${ stageButtons }:enabled`).then(function(text) {\n          expect(text).toBe('Won');\n        })\n      });\n    })\n\n    browser.executeScript(\n        'document.querySelector(\"scroll-app /deep/ #reset-btn\").click()');\n    browser.executeScript(\n        'document.querySelector(\"scroll-app /deep/ #run-btn\").click()');\n    browser.wait(() => {\n      return $('#done').getText().then(\n        function() { return true; },\n        function() { return false; });\n      }, 10000);\n  });\n\n});\n","var testUtil = require('angular2/e2e_test/test_util');\ndescribe('ng2 naive infinite scroll benchmark', function() {\n  var URL = 'benchmarks/src/naive_infinite_scroll/index.html?appSize=3';\n  afterEach(testUtil.verifyNoBrowserErrors);\n  it('should not throw errors', function() {\n    browser.get(URL);\n    var expectedRowCount = 18;\n    var expectedCellsPerRow = 11;\n    var allScrollItems = 'scroll-app /deep/ #testArea /deep/ scroll-item';\n    var cells = `${allScrollItems} /deep/ .row *`;\n    var stageButtons = `${allScrollItems} /deep/ .row stage-buttons /deep/ button`;\n    var count = function(selector) {\n      return browser.executeScript(`return document.querySelectorAll(\"${selector}\").length;`);\n    };\n    var clickFirstOf = function(selector) {\n      return browser.executeScript(`document.querySelector(\"${selector}\").click();`);\n    };\n    var firstTextOf = function(selector) {\n      return browser.executeScript(`return document.querySelector(\"${selector}\").innerText;`);\n    };\n    count(allScrollItems).then(function(c) {\n      expect(c).toBe(expectedRowCount);\n    });\n    count(cells).then(function(c) {\n      expect(c).toBe(expectedRowCount * expectedCellsPerRow);\n    });\n    firstTextOf(`${stageButtons}:enabled`).then(function(text) {\n      expect(text).toBe('Pitched');\n      clickFirstOf(`${stageButtons}:enabled`).then(function() {\n        firstTextOf(`${stageButtons}:enabled`).then(function(text) {\n          expect(text).toBe('Won');\n        });\n      });\n    });\n    browser.executeScript('document.querySelector(\"scroll-app /deep/ #reset-btn\").click()');\n    browser.executeScript('document.querySelector(\"scroll-app /deep/ #run-btn\").click()');\n    browser.wait(() => {\n      return $('#done').getText().then(function() {\n        return true;\n      }, function() {\n        return false;\n      });\n    }, 10000);\n  });\n});\n\n//# sourceMappingURL=/Users/patrick/Documents/open source/angular/modules/benchmarks/e2e_test/naive_infinite_scroll_spec.map\n\n//# sourceMappingURL=./naive_infinite_scroll_spec.map"]}