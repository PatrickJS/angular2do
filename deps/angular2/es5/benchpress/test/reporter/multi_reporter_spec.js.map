{"version":3,"sources":["@traceur/generated/TemplateParser/22","benchpress/test/reporter/multi_reporter_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13","benchpress/test/reporter/@traceur/generated/TemplateParser/8","benchpress/test/reporter/@traceur/generated/TemplateParser/9","benchpress/test/reporter/@traceur/generated/TemplateParser/25","benchpress/test/reporter/@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"benchpress/test/reporter/multi_reporter_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\nimport { DateWrapper } from 'angular2/src/facade/lang';\n\nimport { Reporter, MultiReporter, bind, Injector, MeasureValues } from 'benchpress/benchpress';\n\nexport function main() {\n  function createReporters(ids) {\n    return new Injector([\n      ListWrapper.map(ids, (id) => bind(id).toValue(new MockReporter(id)) ),\n      MultiReporter.createBindings(ids)\n    ]).asyncGet(MultiReporter);\n  }\n\n  describe('multi reporter', () => {\n\n    it('should reportMeasureValues to all', (done) => {\n      var mv = new MeasureValues(0, DateWrapper.now(), {});\n      createReporters(['m1', 'm2'])\n        .then( (r) => r.reportMeasureValues(mv) )\n        .then( (values) => {\n\n        expect(values).toEqual([\n          {'id': 'm1', 'values': mv},\n          {'id': 'm2', 'values': mv}\n        ]);\n        done();\n      });\n    });\n\n    it('should reportSample to call', (done) => {\n      var completeSample = [\n        new MeasureValues(0, DateWrapper.now(), {}),\n        new MeasureValues(1, DateWrapper.now(), {})\n      ];\n      var validSample = [completeSample[1]];\n\n      createReporters(['m1', 'm2'])\n        .then( (r) => r.reportSample(completeSample, validSample) )\n        .then( (values) => {\n\n        expect(values).toEqual([\n          {'id': 'm1', 'completeSample': completeSample, 'validSample': validSample},\n          {'id': 'm2', 'completeSample': completeSample, 'validSample': validSample}\n        ]);\n        done();\n      })\n    });\n\n  });\n}\n\nclass MockReporter extends Reporter {\n  _id:string;\n\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n\n  reportMeasureValues(values:MeasureValues):Promise {\n    return PromiseWrapper.resolve({\n      'id': this._id,\n      'values': values\n    });\n  }\n\n  reportSample(completeSample:List<MeasureValues>, validSample:List<MeasureValues>):Promise {\n    return PromiseWrapper.resolve({\n      'id': this._id,\n      'completeSample': completeSample,\n      'validSample': validSample\n    });\n  }\n\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}