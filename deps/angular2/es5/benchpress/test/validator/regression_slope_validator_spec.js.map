{"version":3,"sources":["@traceur/generated/TemplateParser/22","benchpress/test/validator/regression_slope_validator_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"benchpress/test/validator/regression_slope_validator_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe, ddescribe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\nimport { Date, DateWrapper } from 'angular2/src/facade/lang';\nimport { ListWrapper } from 'angular2/src/facade/collection';\n\nimport {\n  Validator, RegressionSlopeValidator, Injector, bind, MeasureValues\n} from 'benchpress/benchpress';\n\nexport function main() {\n  describe('regression slope validator', () => {\n    var validator;\n\n    function createValidator({size, metric}) {\n      validator = new Injector([\n        RegressionSlopeValidator.BINDINGS,\n        bind(RegressionSlopeValidator.METRIC).toValue(metric),\n        bind(RegressionSlopeValidator.SAMPLE_SIZE).toValue(size)\n      ]).get(RegressionSlopeValidator);\n    }\n\n    it('should return sampleSize and metric as description', () => {\n      createValidator({size: 2, metric: 'script'});\n      expect(validator.describe()).toEqual({\n        'sampleSize': 2,\n        'regressionSlopeMetric': 'script'\n      });\n    });\n\n    it('should return null while the completeSample is smaller than the given size', () => {\n      createValidator({size: 2, metric: 'script'});\n      expect(validator.validate([])).toBe(null);\n      expect(validator.validate([mv(0,0,{})])).toBe(null);\n    });\n\n    it('should return null while the regression slope is < 0', () => {\n      createValidator({size: 2, metric: 'script'});\n      expect(validator.validate([mv(0,0,{'script':2}), mv(1,1,{'script':1})])).toBe(null);\n    });\n\n    it('should return the last sampleSize runs when the regression slope is ==0', () => {\n      createValidator({size: 2, metric: 'script'});\n      var sample = [mv(0,0,{'script':1}), mv(1,1,{'script':1}), mv(2,2,{'script':1})];\n      expect(validator.validate(ListWrapper.slice(sample,0,2))).toEqual(ListWrapper.slice(sample,0,2));\n      expect(validator.validate(sample)).toEqual(ListWrapper.slice(sample,1,3));\n    });\n\n    it('should return the last sampleSize runs when the regression slope is >0', () => {\n      createValidator({size: 2, metric: 'script'});\n      var sample = [mv(0,0,{'script':1}), mv(1,1,{'script':2}), mv(2,2,{'script':3})];\n      expect(validator.validate(ListWrapper.slice(sample,0,2))).toEqual(ListWrapper.slice(sample,0,2));\n      expect(validator.validate(sample)).toEqual(ListWrapper.slice(sample,1,3));\n    });\n\n  });\n}\n\nfunction mv(runIndex, time, values) {\n  return new MeasureValues(runIndex, DateWrapper.fromMillis(time), values);\n}\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}