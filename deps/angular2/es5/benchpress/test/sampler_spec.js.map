{"version":3,"sources":["@traceur/generated/TemplateParser/22","benchpress/test/sampler_spec.js","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/13","benchpress/test/@traceur/generated/TemplateParser/8","benchpress/test/@traceur/generated/TemplateParser/9","benchpress/test/@traceur/generated/TemplateParser/10","benchpress/test/@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"benchpress/test/sampler_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport { isBlank, isPresent, BaseException, stringify, Date, DateWrapper } from 'angular2/src/facade/lang';\nimport { ListWrapper, List } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\n\nimport {\n  Sampler, WebDriverAdapter, WebDriverExtension,\n  Validator, Metric, Reporter, Browser,\n  bind, Injector, Options, MeasureValues\n} from 'benchpress/benchpress';\n\nexport function main() {\n  var EMPTY_EXECUTE = () => {};\n\n  describe('sampler', () => {\n    var sampler;\n\n    function createSampler({\n      driver,\n      driverExtension,\n      metric,\n      reporter,\n      validator,\n      forceGc,\n      prepare,\n      execute\n    } = {}) {\n      var time = 1000;\n      if (isBlank(metric)) {\n        metric = new MockMetric([]);\n      }\n      if (isBlank(reporter)) {\n        reporter = new MockReporter([]);\n      }\n      if (isBlank(driver)) {\n        driver = new MockDriverAdapter([]);\n      }\n      if (isBlank(driverExtension)) {\n        driverExtension = new MockDriverExtension([]);\n      }\n      var bindings = ListWrapper.concat(Sampler.BINDINGS, [\n        bind(Metric).toValue(metric),\n        bind(Reporter).toValue(reporter),\n        bind(WebDriverAdapter).toValue(driver),\n        bind(WebDriverExtension).toValue(driverExtension),\n        bind(Options.EXECUTE).toValue(execute),\n        bind(Validator).toValue(validator),\n        bind(Sampler.TIME).toValue( () => DateWrapper.fromMillis(time++) )\n      ]);\n      if (isPresent(prepare)) {\n        ListWrapper.push(bindings, bind(Options.PREPARE).toValue(prepare));\n      }\n      if (isPresent(forceGc)) {\n        ListWrapper.push(bindings, bind(Options.FORCE_GC).toValue(forceGc));\n      }\n\n      sampler = new Injector(bindings).get(Sampler);\n    }\n\n    it('should call the prepare and execute callbacks using WebDriverAdapter.waitFor', (done) => {\n      var log = [];\n      var count = 0;\n      var driver = new MockDriverAdapter([], (callback) => {\n        var result = callback();\n        ListWrapper.push(log, result);\n        return PromiseWrapper.resolve(result);\n      });\n      createSampler({\n        driver: driver,\n        validator: createCountingValidator(2),\n        prepare: () => {\n          return count++;\n        },\n        execute: () => {\n          return count++;\n        }\n      });\n      sampler.sample().then( (_) => {\n        expect(count).toBe(4);\n        expect(log).toEqual([0,1,2,3]);\n        done();\n      });\n\n    });\n\n    it('should call prepare, gc, beginMeasure, execute, gc, endMeasure for every iteration', (done) => {\n      var workCount = 0;\n      var log = [];\n      createSampler({\n        forceGc: true,\n        metric: createCountingMetric(log),\n        driverExtension: new MockDriverExtension(log),\n        validator: createCountingValidator(2),\n        prepare: () => {\n          ListWrapper.push(log, `p${workCount++}`);\n        },\n        execute: () => {\n          ListWrapper.push(log, `w${workCount++}`);\n        }\n      });\n      sampler.sample().then( (_) => {\n        expect(log).toEqual([\n          ['gc'],\n          'p0',\n          ['gc'],\n          ['beginMeasure'],\n          'w1',\n          ['gc'],\n          ['endMeasure', false, {'script': 0}],\n          'p2',\n          ['gc'],\n          ['beginMeasure'],\n          'w3',\n          ['gc'],\n          ['endMeasure', false, {'script': 1}],\n        ]);\n        done();\n      });\n    });\n\n    it('should call execute, gc, endMeasure for every iteration if there is no prepare callback', (done) => {\n      var log = [];\n      var workCount = 0;\n      createSampler({\n        forceGc: true,\n        metric: createCountingMetric(log),\n        driverExtension: new MockDriverExtension(log),\n        validator: createCountingValidator(2),\n        execute: () => {\n          ListWrapper.push(log, `w${workCount++}`);\n        },\n        prepare: null\n      });\n      sampler.sample().then( (_) => {\n        expect(log).toEqual([\n          ['gc'],\n          ['beginMeasure'],\n          'w0',\n          ['gc'],\n          ['endMeasure', true, {'script': 0}],\n          'w1',\n          ['gc'],\n          ['endMeasure', true, {'script': 1}],\n        ]);\n        done();\n      });\n    });\n\n    it('should not gc if the flag is not set', (done) => {\n      var log = [];\n      createSampler({\n        metric: createCountingMetric(),\n        driverExtension: new MockDriverExtension(log),\n        validator: createCountingValidator(2),\n        prepare: EMPTY_EXECUTE,\n        execute: EMPTY_EXECUTE\n      });\n      sampler.sample().then( (_) => {\n        expect(log).toEqual([]);\n        done();\n      });\n    });\n\n    it('should only collect metrics for execute and ignore metrics from prepare', (done) => {\n      var scriptTime = 0;\n      var iterationCount = 1;\n      createSampler({\n        validator: createCountingValidator(2),\n        metric: new MockMetric([], () => {\n          var result = PromiseWrapper.resolve({'script': scriptTime});\n          scriptTime = 0;\n          return result;\n        }),\n        prepare: () => {\n          scriptTime = 1 * iterationCount;\n        },\n        execute: () => {\n          scriptTime = 10 * iterationCount;\n          iterationCount++;\n        }\n      });\n      sampler.sample().then( (state) => {\n        expect(state.completeSample.length).toBe(2);\n        expect(state.completeSample[0]).toEqual(mv(0, 1000, {'script': 10}));\n        expect(state.completeSample[1]).toEqual(mv(1, 1001, {'script': 20}));\n        done();\n      });\n    });\n\n    it('should call the validator for every execution and store the valid sample', (done) => {\n      var log = [];\n      var validSample = [{}];\n\n      createSampler({\n        metric: createCountingMetric(),\n        validator: createCountingValidator(2, validSample, log),\n        execute: EMPTY_EXECUTE\n      });\n      sampler.sample().then( (state) => {\n        expect(state.validSample).toBe(validSample);\n        // TODO(tbosch): Why does this fail??\n        // expect(log).toEqual([\n        //   ['validate', [{'script': 0}], null],\n        //   ['validate', [{'script': 0}, {'script': 1}], validSample]\n        // ]);\n\n        expect(log.length).toBe(2);\n        expect(log[0]).toEqual(\n          ['validate', [mv(0, 1000, {'script': 0})], null]\n        );\n        expect(log[1]).toEqual(\n          ['validate', [mv(0, 1000, {'script': 0}), mv(1, 1001, {'script': 1})], validSample]\n        );\n\n        done();\n      });\n    });\n\n    it('should report the metric values', (done) => {\n      var log = [];\n      var validSample = [{}];\n      createSampler({\n        validator: createCountingValidator(2, validSample),\n        metric: createCountingMetric(),\n        reporter: new MockReporter(log),\n        execute: EMPTY_EXECUTE\n      });\n      sampler.sample().then( (_) => {\n        // TODO(tbosch): Why does this fail??\n        // expect(log).toEqual([\n        //   ['reportMeasureValues', 0, {'script': 0}],\n        //   ['reportMeasureValues', 1, {'script': 1}],\n        //   ['reportSample', [{'script': 0}, {'script': 1}], validSample]\n        // ]);\n        expect(log.length).toBe(3);\n        expect(log[0]).toEqual(\n          ['reportMeasureValues', mv(0, 1000, {'script': 0})]\n        );\n        expect(log[1]).toEqual(\n          ['reportMeasureValues', mv(1, 1001, {'script': 1})]\n        );\n        expect(log[2]).toEqual(\n          ['reportSample', [mv(0, 1000, {'script': 0}), mv(1, 1001, {'script': 1})], validSample]\n        );\n\n        done();\n      });\n    });\n\n  });\n}\n\nfunction mv(runIndex, time, values) {\n  return new MeasureValues(runIndex, DateWrapper.fromMillis(time), values);\n}\n\nfunction createCountingValidator(count, validSample = null, log = null) {\n  return new MockValidator(log, (completeSample) => {\n    count--;\n    if (count === 0) {\n      return isPresent(validSample) ? validSample : completeSample;\n    } else {\n      return null;\n    }\n  });\n}\n\nfunction createCountingMetric(log = null) {\n  var scriptTime = 0;\n  return new MockMetric(log, () => {\n    return { 'script': scriptTime++ };\n  });\n}\n\nclass MockDriverAdapter extends WebDriverAdapter {\n  _log:List;\n  _waitFor:Function;\n  constructor(log = null, waitFor = null) {\n    super();\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n    this._waitFor = waitFor;\n  }\n  waitFor(callback:Function):Promise {\n    if (isPresent(this._waitFor)) {\n      return this._waitFor(callback);\n    } else {\n      return PromiseWrapper.resolve(callback());\n    }\n  }\n}\n\n\nclass MockDriverExtension extends WebDriverExtension {\n  _log:List;\n  constructor(log = null) {\n    super();\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  gc():Promise {\n    ListWrapper.push(this._log, ['gc']);\n    return PromiseWrapper.resolve(null);\n  }\n}\n\nclass MockValidator extends Validator {\n  _validate:Function;\n  _log:List;\n  constructor(log = null, validate = null) {\n    super();\n    this._validate = validate;\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    var stableSample = isPresent(this._validate) ? this._validate(completeSample) : completeSample;\n    ListWrapper.push(this._log, ['validate', completeSample, stableSample]);\n    return stableSample;\n  }\n}\n\nclass MockMetric extends Metric {\n  _endMeasure:Function;\n  _log:List;\n  constructor(log = null, endMeasure = null) {\n    super();\n    this._endMeasure = endMeasure;\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  beginMeasure() {\n    ListWrapper.push(this._log, ['beginMeasure']);\n    return PromiseWrapper.resolve(null);\n  }\n  endMeasure(restart) {\n    var measureValues = isPresent(this._endMeasure) ? this._endMeasure() : {};\n    ListWrapper.push(this._log, ['endMeasure', restart, measureValues]);\n    return PromiseWrapper.resolve(measureValues);\n  }\n}\n\nclass MockReporter extends Reporter {\n  _log:List;\n  constructor(log = null) {\n    super();\n    if (isBlank(log)) {\n      log = [];\n    }\n    this._log = log;\n  }\n  reportMeasureValues(values):Promise {\n    ListWrapper.push(this._log, ['reportMeasureValues', values]);\n    return PromiseWrapper.resolve(null);\n  }\n  reportSample(completeSample, validSample):Promise {\n    ListWrapper.push(this._log, ['reportSample', completeSample, validSample]);\n    return PromiseWrapper.resolve(null);\n  }\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}