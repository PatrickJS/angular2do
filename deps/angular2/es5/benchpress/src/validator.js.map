{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","benchpress/src/validator.js","benchpress/src/@traceur/generated/TemplateParser/8","benchpress/src/@traceur/generated/TemplateParser/25","benchpress/src/@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,8HAAoB,UAAS,SAAQ;;;;;;;;;;ACApD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG,CAAG;ACAf,aAAoB,KAAG,OAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,WAAoB,KAAG,KAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,WAAoB,KAAG,KAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,eAAoB,KAAG,SAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,oBAAoB,KAAG,cAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;gBGFY,CAAA,SAAQ,AAAC,eCAjC,SAAQ,AAAC;AACC,AAAI,UAAA,YCaP,SAAM,UAAQ,KDb6B,ACmChD,CDnCiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;ACwB5C,iBAAO,CAAP,UAAS,cAAa,CAA2C;AC1BnE,iBAAK,cAAc,CAAA,cAAA,CCAnB,CAAA,MAAK,YAAY,AF0BS,CAAA,IAAG,CAAE,cAAY,CAAC,CC1BN,CAAA;AD2BlC,gBAAM,IAAI,cAAa,AAAC,CAAA,KAAI,CAAC,CAAC;UAChC;AAMA,iBAAO,CAAP,UAAQ,AAAa,CAAA;AACnB,gBAAM,IAAI,cAAY,AAAE,CAAA,KAAI,CAAC,CAAC;UAChC;AAAA,WArBO,MAAK,CAAZ,UAAc,aAAY;AACxB,iBACE,EAAA,IAAG,AAAE,CAAA,SAAQ,CAAC,UAAU,AACtB,EAAC,SAAA,QAAO;mBAAM,SAAO;YAAA,EAAI,EAAA,aAAY,CAAC,CACxC,CACF,CAAC;UACH,EDlB8D,CAAC;MACzD,AAAC,EAAC,EDJ4D;AEqCtE,WGrCK,eAAgB,CAAA,SAAA,CAAA,cAAA,CACZ,EAAA,GAAE,CAAG,UAAQ,AAAG,CAAA;AAAC,eAAA,EAAA,GHYzB,SAAO,AAAC,EAAC,CAAA,CGZuC;QAAC,CAAC,CAAC,CAAC;AADrD,WAAK,eAAgB,CAAA,SAAA,UAAA,SAAA,CAAA,aAAA,CACZ,EAAA,GAAE,CAAG,UAAQ,AAAG,CAAA;AAAC,eAAA,EDD1B,CAAA,MAAK,YAAY,AF0BS,CAAA,IAAG,CAAE,cAAY,CE1BP,CF0BQ,CAAA,CGzBK;QAAC,CAAC,CAAC,CAAC;IRCtB;EAC3B,CAAA;ADDI,CAAC,CAAC;AM0ByB","file":"benchpress/src/validator.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","import { bind } from 'angular2/di';\nimport { List, StringMap } from 'angular2/src/facade/collection';\nimport {\n  ABSTRACT, BaseException\n} from 'angular2/src/facade/lang';\n\nimport { MeasureValues } from './measure_values';\n\n/**\n * A Validator calculates a valid sample out of the complete sample.\n * A valid sample is a sample that represents the population that should be observed\n * in the correct way.\n */\n@ABSTRACT()\nexport class Validator {\n  static bindTo(delegateToken) {\n    return [\n      bind(Validator).toFactory(\n        (delegate) => delegate, [delegateToken]\n      )\n    ];\n  }\n\n  /**\n   * Calculates a valid sample out of the complete sample\n   */\n  validate(completeSample:List<MeasureValues>):List<MeasureValues> {\n    throw new BaseException('NYI');\n  }\n\n  /**\n   * Returns a Map that describes the properties of the validator\n   * (e.g. sample size, ...)\n   */\n  describe():StringMap {\n    throw new BaseException('NYI');\n  }\n}","assert.argumentTypes($__placeholder__0)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}