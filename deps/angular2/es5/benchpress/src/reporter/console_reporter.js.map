{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","benchpress/src/reporter/console_reporter.js","@traceur/generated/TemplateParser/13","benchpress/src/reporter/@traceur/generated/TemplateParser/8","benchpress/src/reporter/@traceur/generated/TemplateParser/9","benchpress/src/reporter/@traceur/generated/TemplateParser/10","benchpress/src/reporter/@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"benchpress/src/reporter/console_reporter.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import { print, isPresent, isBlank, NumberWrapper } from 'angular2/src/facade/lang';\nimport { StringMapWrapper, ListWrapper, List } from 'angular2/src/facade/collection';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\nimport { Math } from 'angular2/src/facade/math';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Statistic } from '../statistic';\nimport { Reporter } from '../reporter';\nimport { SampleDescription } from '../sample_description';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A reporter for the console\n */\nexport class ConsoleReporter extends Reporter {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get PRINT() { return _PRINT; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get COLUMN_WIDTH() { return _COLUMN_WIDTH; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n\n  static _lpad(value, columnWidth, fill = ' ') {\n    var result = '';\n    for (var i=0; i<columnWidth - value.length; i++) {\n      result += fill;\n    }\n    return result + value;\n  }\n\n  static _formatNum(n) {\n    return NumberWrapper.toFixed(n, 2);\n  }\n\n  static _sortedProps(obj) {\n    var props = [];\n    StringMapWrapper.forEach(obj, (value, prop) => ListWrapper.push(props, prop));\n    props.sort();\n    return props;\n  }\n\n  _columnWidth:number;\n  _metricNames:List;\n  _print:Function;\n\n  constructor(columnWidth, sampleDescription, print) {\n    super();\n    this._columnWidth = columnWidth;\n    this._metricNames = ConsoleReporter._sortedProps(sampleDescription.metrics);\n    this._print = print;\n    this._printDescription(sampleDescription);\n  }\n\n  _printDescription(sampleDescription) {\n    this._print(`BENCHMARK ${sampleDescription.id}`);\n    this._print('Description:');\n    var props = ConsoleReporter._sortedProps(sampleDescription.description);\n    props.forEach( (prop) => {\n      this._print(`- ${prop}: ${sampleDescription.description[prop]}`);\n    });\n    this._print('Metrics:');\n    this._metricNames.forEach( (metricName) => {\n      this._print(`- ${metricName}: ${sampleDescription.metrics[metricName]}`);\n    });\n    this._print('');\n    this._printStringRow(this._metricNames);\n    this._printStringRow(this._metricNames.map( (_) => '' ), '-');\n  }\n\n  reportMeasureValues(measureValues:MeasureValues):Promise {\n    var formattedValues = ListWrapper.map(this._metricNames, (metricName) => {\n      var value = measureValues.values[metricName];\n      return ConsoleReporter._formatNum(value);\n    });\n    this._printStringRow(formattedValues);\n    return PromiseWrapper.resolve(null);\n  }\n\n  reportSample(completeSample:List<MeasureValues>, validSample:List<MeasureValues>):Promise {\n    this._printStringRow(this._metricNames.map( (_) => '' ), '=');\n    this._printStringRow(\n      ListWrapper.map(this._metricNames, (metricName) => {\n        var sample = ListWrapper.map(validSample, (measureValues) => measureValues.values[metricName]);\n        var mean = Statistic.calculateMean(sample);\n        var cv = Statistic.calculateCoefficientOfVariation(sample, mean);\n        var formattedCv = NumberWrapper.isNaN(cv) ? 'NaN' : Math.floor(cv);\n        return `${ConsoleReporter._formatNum(mean)}\\u00B1${formattedCv}%`;\n      })\n    );\n    return PromiseWrapper.resolve(null);\n  }\n\n  _printStringRow(parts, fill = ' ') {\n    this._print(\n      ListWrapper.map(parts, (part) => {\n        var w = this._columnWidth;\n        return ConsoleReporter._lpad(part, w, fill);\n      }).join(' | ')\n    );\n  }\n\n}\n\nvar _PRINT = new OpaqueToken('ConsoleReporter.print');\nvar _COLUMN_WIDTH = new OpaqueToken('ConsoleReporter.columnWidht');\nvar _BINDINGS = [\n  bind(ConsoleReporter).toFactory(\n    (columnWidth, sampleDescription, print) => new ConsoleReporter(columnWidth, sampleDescription, print),\n    [_COLUMN_WIDTH, SampleDescription, _PRINT]\n  ),\n  bind(_COLUMN_WIDTH).toValue(18),\n  bind(_PRINT).toValue(print)\n];\n","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}