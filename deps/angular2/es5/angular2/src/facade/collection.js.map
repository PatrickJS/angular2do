{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/facade/collection.es6","angular2/src/facade/@traceur/generated/TemplateParser/9","angular2/src/facade/@traceur/generated/TemplateParser/7","angular2/src/facade/@traceur/generated/TemplateParser/8","angular2/src/facade/@traceur/generated/TemplateParser/3885","@traceur/generated/TemplateParser/15","@traceur/generated/TemplateParser/16","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/24","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27","angular2/src/facade/@traceur/generated/TemplateParser/10","angular2/src/facade/@traceur/generated/TemplateParser/3865","angular2/src/facade/@traceur/generated/TemplateParser/3866","angular2/src/facade/@traceur/generated/TemplateParser/3867","angular2/src/facade/@traceur/generated/TemplateParser/3872","angular2/src/facade/@traceur/generated/TemplateParser/3873","angular2/src/facade/@traceur/generated/TemplateParser/3874","angular2/src/facade/@traceur/generated/TemplateParser/3883","angular2/src/facade/@traceur/generated/TemplateParser/3886","angular2/src/facade/collection.js"],"names":[],"mappings":"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","file":"angular2/src/facade/collection.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {int, isJsObject, global} from 'angular2/src/facade/lang';\n\nexport var List = global.Array;\nexport var Map = global.Map;\nexport var Set = global.Set;\nexport var StringMap = global.Object;\n\nexport class MapWrapper {\n  static create():Map { return new Map(); }\n  static clone(m:Map):Map { return new Map(m); }\n  static createFromStringMap(stringMap):Map {\n    var result = MapWrapper.create();\n    for (var prop in stringMap) {\n      MapWrapper.set(result, prop, stringMap[prop]);\n    }\n    return result;\n  }\n  static createFromPairs(pairs:List):Map {return new Map(pairs);}\n  static get(m, k) { return m.get(k); }\n  static set(m, k, v) { m.set(k,v); }\n  static contains(m, k) { return  m.has(k); }\n  static forEach(m, fn) {\n    m.forEach(fn);\n  }\n  static size(m) {return m.size;}\n  static delete(m, k) { m.delete(k); }\n  static clear(m) { m.clear(); }\n  static iterable(m) { return m; }\n  static keys(m) { return m.keys(); }\n  static values(m) { return m.values(); }\n}\n\n/**\n * Wraps Javascript Objects\n */\nexport class StringMapWrapper {\n  static create():Object {\n    // Note: We are not using Object.create(null) here due to\n    // performance!\n    // http://jsperf.com/ng2-object-create-null\n    return { };\n  }\n  static contains(map, key) {\n    return map.hasOwnProperty(key);\n  }\n  static get(map, key) {\n    return map.hasOwnProperty(key) ? map[key] : undefined;\n  }\n  static set(map, key, value) {\n    map[key] = value;\n  }\n  static isEmpty(map) {\n    for (var prop in map) {\n      return false;\n    }\n    return true;\n  }\n  static forEach(map, callback) {\n    for (var prop in map) {\n      if (map.hasOwnProperty(prop)) {\n        callback(map[prop], prop);\n      }\n    }\n  }\n\n  static merge(m1, m2) {\n    var m = {};\n\n    for (var attr in m1) {\n      if (m1.hasOwnProperty(attr)){\n        m[attr] = m1[attr];\n      }\n    }\n\n    for (var attr in m2) {\n      if (m2.hasOwnProperty(attr)){\n        m[attr] = m2[attr];\n      }\n    }\n\n    return m;\n  }\n}\n\nexport class ListWrapper {\n  static create():List { return new List(); }\n  static createFixedSize(size):List { return new List(size); }\n  static get(m, k) { return m[k]; }\n  static set(m, k, v) { m[k] = v; }\n  static clone(array:List) {\n    return array.slice(0);\n  }\n  static map(array, fn) {\n    return array.map(fn);\n  }\n  static forEach(array, fn) {\n    for(var p of array) {\n      fn(p);\n    }\n  }\n  static push(array, el) {\n    array.push(el);\n  }\n  static first(array) {\n    if (!array) return null;\n    return array[0];\n  }\n  static last(array) {\n    if (!array || array.length == 0) return null;\n    return array[array.length - 1];\n  }\n  static find(list:List, pred:Function) {\n    for (var i = 0 ; i < list.length; ++i) {\n      if (pred(list[i])) return list[i];\n    }\n    return null;\n  }\n  static reduce(list:List, fn:Function, init) {\n    return list.reduce(fn, init);\n  }\n  static filter(array, pred:Function) {\n    return array.filter(pred);\n  }\n  static any(list:List, pred:Function) {\n    for (var i = 0 ; i < list.length; ++i) {\n      if (pred(list[i])) return true;\n    }\n    return false;\n  }\n  static contains(list:List, el) {\n    return list.indexOf(el) !== -1;\n  }\n  static reversed(array) {\n    var a = ListWrapper.clone(array);\n    return a.reverse();\n  }\n  static concat(a, b) {return a.concat(b);}\n  static isList(list) {\n    return Array.isArray(list);\n  }\n  static insert(list, index:int, value) {\n    list.splice(index, 0, value);\n  }\n  static removeAt(list, index:int) {\n    var res = list[index];\n    list.splice(index, 1);\n    return res;\n  }\n  static removeAll(list, items) {\n    for (var i = 0; i < items.length; ++i) {\n      var index = list.indexOf(items[i]);\n      list.splice(index, 1);\n    }\n  }\n  static removeLast(list:List) {\n    return list.pop();\n  }\n  static remove(list, el): boolean {\n    var index = list.indexOf(el);\n    if (index > -1) {\n      list.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n  static clear(list) {\n    list.splice(0, list.length);\n  }\n  static join(list, s) {\n    return list.join(s);\n  }\n  static isEmpty(list) {\n    return list.length == 0;\n  }\n  static fill(list:List, value, start:int = 0, end:int = null) {\n    list.fill(value, start, end === null ? undefined: end);\n  }\n  static equals(a:List, b:List):boolean {\n    if(a.length != b.length) return false;\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  static slice(l:List, from:int, to:int):List {\n    return l.slice(from, to);\n  }\n  static sort(l:List, compareFn:Function) {\n    l.sort(compareFn);\n  }\n}\n\nexport function isListLikeIterable(obj):boolean {\n  if (!isJsObject(obj)) return false;\n  return ListWrapper.isList(obj) ||\n         (!(obj instanceof Map) &&  // JS Map are iterables but return entries as [k, v]\n         Symbol.iterator in obj);   // JS Iterable have a Symbol.iterator prop\n}\n\nexport function iterateListLike(obj, fn:Function) {\n  for (var item of obj) {\n    fn(item);\n  }\n}\n\nexport class SetWrapper {\n  static createFromList(lst:List) { return new Set(lst); }\n  static has(s:Set, key):boolean { return s.has(key); }\n}\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type.$__placeholder__0)","assert.argumentTypes($__placeholder__0)","assert.type.any","\n        for (var $__placeholder__0 =\n                 $__placeholder__1[\n                     $traceurRuntime.toProperty(Symbol.iterator)](),\n                 $__placeholder__2;\n             !($__placeholder__3 = $__placeholder__4.next()).done; ) {\n          $__placeholder__5;\n          $__placeholder__6;\n        }","void 0","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__export($__placeholder__0, $__placeholder__1)","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","assert.type.any","import {assert} from \"rtts_assert/rtts_assert\";\nimport {int,\n  isJsObject,\n  global} from 'angular2/src/facade/lang';\nexport var List = global.Array;\nexport var Map = global.Map;\nexport var Set = global.Set;\nexport var StringMap = global.Object;\nexport class MapWrapper {\n  static create() {\n    return assert.returnType((new Map()), Map);\n  }\n  static clone(m) {\n    assert.argumentTypes(m, Map);\n    return assert.returnType((new Map(m)), Map);\n  }\n  static createFromStringMap(stringMap) {\n    var result = MapWrapper.create();\n    for (var prop in stringMap) {\n      MapWrapper.set(result, prop, stringMap[prop]);\n    }\n    return assert.returnType((result), Map);\n  }\n  static createFromPairs(pairs) {\n    assert.argumentTypes(pairs, List);\n    return assert.returnType((new Map(pairs)), Map);\n  }\n  static get(m, k) {\n    return m.get(k);\n  }\n  static set(m, k, v) {\n    m.set(k, v);\n  }\n  static contains(m, k) {\n    return m.has(k);\n  }\n  static forEach(m, fn) {\n    m.forEach(fn);\n  }\n  static size(m) {\n    return m.size;\n  }\n  static delete(m, k) {\n    m.delete(k);\n  }\n  static clear(m) {\n    m.clear();\n  }\n  static iterable(m) {\n    return m;\n  }\n  static keys(m) {\n    return m.keys();\n  }\n  static values(m) {\n    return m.values();\n  }\n}\nObject.defineProperty(MapWrapper.clone, \"parameters\", {get: function() {\n    return [[Map]];\n  }});\nObject.defineProperty(MapWrapper.createFromPairs, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nexport class StringMapWrapper {\n  static create() {\n    return assert.returnType(({}), Object);\n  }\n  static contains(map, key) {\n    return map.hasOwnProperty(key);\n  }\n  static get(map, key) {\n    return map.hasOwnProperty(key) ? map[key] : undefined;\n  }\n  static set(map, key, value) {\n    map[key] = value;\n  }\n  static isEmpty(map) {\n    for (var prop in map) {\n      return false;\n    }\n    return true;\n  }\n  static forEach(map, callback) {\n    for (var prop in map) {\n      if (map.hasOwnProperty(prop)) {\n        callback(map[prop], prop);\n      }\n    }\n  }\n  static merge(m1, m2) {\n    var m = {};\n    for (var attr in m1) {\n      if (m1.hasOwnProperty(attr)) {\n        m[attr] = m1[attr];\n      }\n    }\n    for (var attr in m2) {\n      if (m2.hasOwnProperty(attr)) {\n        m[attr] = m2[attr];\n      }\n    }\n    return m;\n  }\n}\nexport class ListWrapper {\n  static create() {\n    return assert.returnType((new List()), List);\n  }\n  static createFixedSize(size) {\n    return assert.returnType((new List(size)), List);\n  }\n  static get(m, k) {\n    return m[k];\n  }\n  static set(m, k, v) {\n    m[k] = v;\n  }\n  static clone(array) {\n    assert.argumentTypes(array, List);\n    return array.slice(0);\n  }\n  static map(array, fn) {\n    return array.map(fn);\n  }\n  static forEach(array, fn) {\n    for (var p of array) {\n      fn(p);\n    }\n  }\n  static push(array, el) {\n    array.push(el);\n  }\n  static first(array) {\n    if (!array)\n      return null;\n    return array[0];\n  }\n  static last(array) {\n    if (!array || array.length == 0)\n      return null;\n    return array[array.length - 1];\n  }\n  static find(list, pred) {\n    assert.argumentTypes(list, List, pred, Function);\n    for (var i = 0; i < list.length; ++i) {\n      if (pred(list[i]))\n        return list[i];\n    }\n    return null;\n  }\n  static reduce(list, fn, init) {\n    assert.argumentTypes(list, List, fn, Function, init, assert.type.any);\n    return list.reduce(fn, init);\n  }\n  static filter(array, pred) {\n    assert.argumentTypes(array, assert.type.any, pred, Function);\n    return array.filter(pred);\n  }\n  static any(list, pred) {\n    assert.argumentTypes(list, List, pred, Function);\n    for (var i = 0; i < list.length; ++i) {\n      if (pred(list[i]))\n        return true;\n    }\n    return false;\n  }\n  static contains(list, el) {\n    assert.argumentTypes(list, List, el, assert.type.any);\n    return list.indexOf(el) !== -1;\n  }\n  static reversed(array) {\n    var a = ListWrapper.clone(array);\n    return a.reverse();\n  }\n  static concat(a, b) {\n    return a.concat(b);\n  }\n  static isList(list) {\n    return Array.isArray(list);\n  }\n  static insert(list, index, value) {\n    assert.argumentTypes(list, assert.type.any, index, int, value, assert.type.any);\n    list.splice(index, 0, value);\n  }\n  static removeAt(list, index) {\n    assert.argumentTypes(list, assert.type.any, index, int);\n    var res = list[index];\n    list.splice(index, 1);\n    return res;\n  }\n  static removeAll(list, items) {\n    for (var i = 0; i < items.length; ++i) {\n      var index = list.indexOf(items[i]);\n      list.splice(index, 1);\n    }\n  }\n  static removeLast(list) {\n    assert.argumentTypes(list, List);\n    return list.pop();\n  }\n  static remove(list, el) {\n    var index = list.indexOf(el);\n    if (index > -1) {\n      list.splice(index, 1);\n      return assert.returnType((true), assert.type.boolean);\n    }\n    return assert.returnType((false), assert.type.boolean);\n  }\n  static clear(list) {\n    list.splice(0, list.length);\n  }\n  static join(list, s) {\n    return list.join(s);\n  }\n  static isEmpty(list) {\n    return list.length == 0;\n  }\n  static fill(list, value, start = 0, end = null) {\n    assert.argumentTypes(list, List, value, assert.type.any, start, int, end, int);\n    list.fill(value, start, end === null ? undefined : end);\n  }\n  static equals(a, b) {\n    assert.argumentTypes(a, List, b, List);\n    if (a.length != b.length)\n      return assert.returnType((false), assert.type.boolean);\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i])\n        return assert.returnType((false), assert.type.boolean);\n    }\n    return assert.returnType((true), assert.type.boolean);\n  }\n  static slice(l, from, to) {\n    assert.argumentTypes(l, List, from, int, to, int);\n    return assert.returnType((l.slice(from, to)), List);\n  }\n  static sort(l, compareFn) {\n    assert.argumentTypes(l, List, compareFn, Function);\n    l.sort(compareFn);\n  }\n}\nObject.defineProperty(ListWrapper.clone, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nObject.defineProperty(ListWrapper.find, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nObject.defineProperty(ListWrapper.reduce, \"parameters\", {get: function() {\n    return [[List], [Function], []];\n  }});\nObject.defineProperty(ListWrapper.filter, \"parameters\", {get: function() {\n    return [[], [Function]];\n  }});\nObject.defineProperty(ListWrapper.any, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nObject.defineProperty(ListWrapper.contains, \"parameters\", {get: function() {\n    return [[List], []];\n  }});\nObject.defineProperty(ListWrapper.insert, \"parameters\", {get: function() {\n    return [[], [int], []];\n  }});\nObject.defineProperty(ListWrapper.removeAt, \"parameters\", {get: function() {\n    return [[], [int]];\n  }});\nObject.defineProperty(ListWrapper.removeLast, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nObject.defineProperty(ListWrapper.fill, \"parameters\", {get: function() {\n    return [[List], [], [int], [int]];\n  }});\nObject.defineProperty(ListWrapper.equals, \"parameters\", {get: function() {\n    return [[List], [List]];\n  }});\nObject.defineProperty(ListWrapper.slice, \"parameters\", {get: function() {\n    return [[List], [int], [int]];\n  }});\nObject.defineProperty(ListWrapper.sort, \"parameters\", {get: function() {\n    return [[List], [Function]];\n  }});\nexport function isListLikeIterable(obj) {\n  if (!isJsObject(obj))\n    return assert.returnType((false), assert.type.boolean);\n  return assert.returnType((ListWrapper.isList(obj) || (!(obj instanceof Map) && Symbol.iterator in obj)), assert.type.boolean);\n}\nexport function iterateListLike(obj, fn) {\n  assert.argumentTypes(obj, assert.type.any, fn, Function);\n  for (var item of obj) {\n    fn(item);\n  }\n}\nObject.defineProperty(iterateListLike, \"parameters\", {get: function() {\n    return [[], [Function]];\n  }});\nexport class SetWrapper {\n  static createFromList(lst) {\n    assert.argumentTypes(lst, List);\n    return new Set(lst);\n  }\n  static has(s, key) {\n    assert.argumentTypes(s, Set, key, assert.type.any);\n    return assert.returnType((s.has(key)), assert.type.boolean);\n  }\n}\nObject.defineProperty(SetWrapper.createFromList, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nObject.defineProperty(SetWrapper.has, \"parameters\", {get: function() {\n    return [[Set], []];\n  }});\n\n//# sourceMappingURL=/Users/patrick/Documents/open source/angular/modules/angular2/src/facade/collection.map\n\n//# sourceMappingURL=./collection.map"]}