{"version":3,"sources":["@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/28","angular2/src/core/events/hammer_gestures.es6","@traceur/generated/TemplateParser/13","angular2/src/core/events/@traceur/generated/TemplateParser/8","angular2/src/core/events/@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","angular2/src/core/events/@traceur/generated/TemplateParser/9","angular2/src/core/events/@traceur/generated/TemplateParser/10","angular2/src/core/events/hammer_gestures.js"],"names":[],"mappings":"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","file":"angular2/src/core/events/hammer_gestures.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {HammerGesturesPluginCommon} from './hammer_common';\nimport {Element} from 'angular2/src/facade/dom';\nimport {isPresent, BaseException} from 'angular2/src/facade/lang';\n\nexport class HammerGesturesPlugin extends HammerGesturesPluginCommon {\n  constructor() {\n    super();\n  }\n\n  supports(eventName:string):boolean {\n    if (!super.supports(eventName)) return false;\n\n    if (!isPresent(window.Hammer)) {\n      throw new BaseException(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n\n    return true;\n  }\n\n  addEventListener(element:Element, eventName:string, handler:Function) {\n    var zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    zone.runOutsideAngular(function () {\n      // Creating the manager bind events, must be done outside of angular\n      var mc = new Hammer(element);\n      mc.get('pinch').set({enable: true});\n      mc.get('rotate').set({enable: true});\n\n      mc.on(eventName, function (eventObj) {\n        zone.run(function () {\n          handler(eventObj);\n        });\n      });\n    });\n  }\n}\n","$traceurRuntime.superConstructor($__placeholder__0).call($__placeholder__1)","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","$__placeholder__0.call($__placeholder__1)","$traceurRuntime.superGet($__placeholder__0, $__placeholder__1, $__placeholder__2)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","import {assert} from \"rtts_assert/rtts_assert\";\nimport {HammerGesturesPluginCommon} from './hammer_common';\nimport {Element} from 'angular2/src/facade/dom';\nimport {isPresent,\n  BaseException} from 'angular2/src/facade/lang';\nexport class HammerGesturesPlugin extends HammerGesturesPluginCommon {\n  constructor() {\n    super();\n  }\n  supports(eventName) {\n    assert.argumentTypes(eventName, assert.type.string);\n    if (!super.supports(eventName))\n      return assert.returnType((false), assert.type.boolean);\n    if (!isPresent(window.Hammer)) {\n      throw new BaseException(`Hammer.js is not loaded, can not bind ${eventName} event`);\n    }\n    return assert.returnType((true), assert.type.boolean);\n  }\n  addEventListener(element, eventName, handler) {\n    assert.argumentTypes(element, Element, eventName, assert.type.string, handler, Function);\n    var zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n    zone.runOutsideAngular(function() {\n      var mc = new Hammer(element);\n      mc.get('pinch').set({enable: true});\n      mc.get('rotate').set({enable: true});\n      mc.on(eventName, function(eventObj) {\n        zone.run(function() {\n          handler(eventObj);\n        });\n      });\n    });\n  }\n}\nObject.defineProperty(HammerGesturesPlugin.prototype.supports, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nObject.defineProperty(HammerGesturesPlugin.prototype.addEventListener, \"parameters\", {get: function() {\n    return [[Element], [assert.type.string], [Function]];\n  }});\n\n//# sourceMappingURL=/Users/patrick/Documents/open source/angular/modules/angular2/src/core/events/hammer_gestures.map\n\n//# sourceMappingURL=./hammer_gestures.map"]}