{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/src/change_detection/change_detection_jit_generator.es6","angular2/src/change_detection/@traceur/generated/TemplateParser/8","angular2/src/change_detection/@traceur/generated/TemplateParser/7","angular2/src/change_detection/@traceur/generated/TemplateParser/9","angular2/src/change_detection/@traceur/generated/TemplateParser/10","angular2/src/change_detection/change_detection_jit_generator.js","angular2/src/change_detection/@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/23","@traceur/generated/TemplateParser/27"],"names":[],"mappings":"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","file":"angular2/src/change_detection/change_detection_jit_generator.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {isPresent, isBlank, BaseException, Type} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {ContextWithVariableBindings} from './parser/context_with_variable_bindings';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\n\nimport {\n  ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE\n  } from './proto_record';\n\n/**\n * The code generator takes a list of proto records and creates a function/class\n * that \"emulates\" what the developer would write by hand to implement the same\n * kind of behaviour.\n *\n * For example: An expression `address.city` will result in the following class:\n *\n * var ChangeDetector0 = function ChangeDetector0(dispatcher, protos) {\n *   AbstractChangeDetector.call(this);\n *   this.dispatcher = dispatcher;\n *   this.protos = protos;\n *\n *   this.context = null;\n *   this.address0 = null;\n *   this.city1 = null;\n * }\n * ChangeDetector0.prototype = Object.create(AbstractChangeDetector.prototype);\n *\n * ChangeDetector0.prototype.detectChangesInRecords = function(throwOnChange) {\n *   var address0;\n *   var city1;\n *   var change;\n *   var changes = null;\n *   var temp;\n *   var context = this.context;\n *\n *   temp = ChangeDetectionUtil.findContext(\"address\", context);\n *   if (temp instanceof ContextWithVariableBindings) {\n *     address0 = temp.get('address');\n *   } else {\n *     address0 = temp.address;\n *   }\n *\n *   if (address0 !== this.address0) {\n *     this.address0 = address0;\n *   }\n *\n *   city1 = address0.city;\n *   if (city1 !== this.city1) {\n *     changes = ChangeDetectionUtil.addRecord(changes,\n *       ChangeDetectionUtil.simpleChangeRecord(this.protos[1].bindingMemento, this.city1, city1));\n *     this.city1 = city1;\n *   }\n *\n *   if (changes.length > 0) {\n *     if(throwOnChange) ChangeDetectionUtil.throwOnChange(this.protos[1], changes[0]);\n *     this.dispatcher.onRecordChange('address.city', changes);\n *     changes = null;\n *   }\n * }\n *\n *\n * ChangeDetector0.prototype.setContext = function(context) {\n *   this.context = context;\n * }\n *\n * return ChangeDetector0;\n *\n *\n * The only thing the generated class depends on is the super class AbstractChangeDetector.\n *\n * The implementation comprises two parts:\n * * ChangeDetectorJITGenerator has the logic of how everything fits together.\n * * template functions (e.g., constructorTemplate) define what code is generated.\n*/\n\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar TEMP_LOCAL = \"temp\";\n\nfunction typeTemplate(type:string, cons:string, detectChanges:string, setContext:string):string {\n  return `\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`;\n}\n\nfunction constructorTemplate(type:string, fieldsDefinitions:string):string {\n  return `\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`;\n}\n\nfunction setContextTemplate(type:string):string {\n  return `\n${type}.prototype.setContext = function(context) {\n  this.context = context;\n}\n`;\n}\n\nfunction detectChangesTemplate(type:string, body:string):string {\n  return `\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`;\n}\n\n\nfunction bodyTemplate(localDefinitions:string, changeDefinitions:string, records:string):string {\n  return `\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = this.context;\n${records}\n`;\n}\n\nfunction notifyTemplate(index:number):string{\n  return  `\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`;\n}\n\nfunction pipeCheckTemplate(context:string, pipe:string, pipeType:string,\n                                  value:string, change:string, addRecord:string, notify:string):string{\n  return `\nif (${pipe} === ${UTIL}.unitialized() || !${pipe}.supports(${context})) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`;\n}\n\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\n\nfunction assignmentTemplate(field:string, value:string) {\n  return `${field} = ${value};`;\n}\n\nfunction propertyReadTemplate(name:string, context:string, newValue:string) {\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}');\n} else {\n  ${newValue} = ${TEMP_LOCAL}.${name};\n}\n`;\n}\n\nfunction invokeMethodTemplate(name:string, args:string, context:string, newValue:string) {\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}').apply(null, [${args}]);\n} else {\n  ${newValue} = ${context}.${name}(${args});\n}\n`;\n}\n\nfunction localDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n};`).join(\"\\n\");\n}\n\nfunction changeDefinitionsTemplate(names:List):string {\n  return names.map((n) => `var ${n} = false;`).join(\"\\n\");\n}\n\nfunction fieldDefinitionsTemplate(names:List):string {\n  return names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\");\n}\n\nfunction ifChangedGuardTemplate(changeNames:List, body:string):string {\n  var cond = changeNames.join(\" || \");\n  return `\nif (${cond}) {\n  ${body}\n}\n`;\n}\n\nfunction addSimpleChangeRecordTemplate(protoIndex:number, oldValue:string, newValue:string) {\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\n\n\nexport class ChangeDetectorJITGenerator {\n  typeName:string;\n  records:List<ProtoRecord>;\n  localNames:List<String>;\n  changeNames:List<String>;\n  fieldNames:List<String>;\n  pipeNames:List<String>;\n\n  constructor(typeName:string, records:List<ProtoRecord>) {\n    this.typeName = typeName;\n    this.records = records;\n\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n\n  getLocalNames(records:List<ProtoRecord>):List<String> {\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`\n    });\n    return [\"context\"].concat(names);\n  }\n\n  getChangeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `change_${n}`);\n  }\n\n  getFieldNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}`);\n  }\n\n  getPipeNames(localNames:List<String>):List<String> {\n    return localNames.map((n) => `this.${n}_pipe`);\n  }\n\n  generate():Function {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genSetContext());\n    return new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'ContextWithVariableBindings', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, ContextWithVariableBindings, this.records);\n  }\n\n  genConstructor():string {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        fields.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n\n    return constructorTemplate(this.typeName, fieldDefinitionsTemplate(fields));\n  }\n\n  genSetContext():string {\n    return setContextTemplate(this.typeName);\n  }\n\n  genDetectChanges():string {\n    var body = this.genBody();\n    return detectChangesTemplate(this.typeName, body);\n  }\n\n  genBody():string {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec);\n  }\n\n  genLocalDefinitions():string {\n    return localDefinitionsTemplate(this.localNames);\n  }\n\n  genChangeDefinitions():string {\n    return changeDefinitionsTemplate(this.changeNames);\n  }\n\n  genRecord(r:ProtoRecord):string {\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return this.genPipeCheck (r);\n    } else {\n      return this.genReferenceCheck(r);\n    }\n  }\n\n  genPipeCheck(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    return pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify);\n  }\n\n  genReferenceCheck(r:ProtoRecord):string {\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);;\n    if (r.isPureFunction()) {\n      return this.ifChangedGuard(r, check);\n    } else {\n      return check;\n    }\n  }\n\n  genUpdateCurrentValue(r:ProtoRecord):string {\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assignmentTemplate(newValue, context);\n\n      case RECORD_TYPE_CONST:\n        return `${newValue} = ${this.genLiteral(r.funcOrValue)}`;\n\n      case RECORD_TYPE_PROPERTY:\n        if (r.contextIndex == 0) { // only the first property read can be a local\n          return propertyReadTemplate(r.name, context, newValue);\n        } else {\n          return assignmentTemplate(newValue, `${context}.${r.name}`);\n        }\n\n      case RECORD_TYPE_INVOKE_METHOD:\n        if (r.contextIndex == 0) { // only the first property read can be a local\n          return invokeMethodTemplate(r.name, args, context, newValue);\n        } else {\n          return assignmentTemplate(newValue, `${context}.${r.name}(${args})`);\n        }\n\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assignmentTemplate(newValue, `${context}(${args})`);\n\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`);\n\n      case RECORD_TYPE_INTERPOLATE:\n        return assignmentTemplate(newValue, this.genInterpolation(r));\n\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assignmentTemplate(newValue, `${context}[${key}]`);\n\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n\n  ifChangedGuard(r:ProtoRecord, body:string):string {\n    return ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body);\n  }\n\n  genInterpolation(r:ProtoRecord):string{\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return res;\n  }\n\n  genLiteral(value):string {\n    return JSON.stringify(value);\n  }\n\n  genNotify(r):string{\n    return r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : '';\n  }\n\n  genArgs(r:ProtoRecord):string {\n    return r.args.map((arg) => this.localNames[arg]).join(\", \");\n  }\n}\n\n\n\n\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","import {assert} from \"rtts_assert/rtts_assert\";\nimport {isPresent,\n  isBlank,\n  BaseException,\n  Type} from 'angular2/src/facade/lang';\nimport {List,\n  ListWrapper,\n  MapWrapper,\n  StringMapWrapper} from 'angular2/src/facade/collection';\nimport {ContextWithVariableBindings} from './parser/context_with_variable_bindings';\nimport {AbstractChangeDetector} from './abstract_change_detector';\nimport {ChangeDetectionUtil} from './change_detection_util';\nimport {ProtoRecord,\n  RECORD_TYPE_SELF,\n  RECORD_TYPE_PROPERTY,\n  RECORD_TYPE_INVOKE_METHOD,\n  RECORD_TYPE_CONST,\n  RECORD_TYPE_INVOKE_CLOSURE,\n  RECORD_TYPE_PRIMITIVE_OP,\n  RECORD_TYPE_KEYED_ACCESS,\n  RECORD_TYPE_PIPE,\n  RECORD_TYPE_INTERPOLATE} from './proto_record';\nvar ABSTRACT_CHANGE_DETECTOR = \"AbstractChangeDetector\";\nvar UTIL = \"ChangeDetectionUtil\";\nvar DISPATCHER_ACCESSOR = \"this.dispatcher\";\nvar PIPE_REGISTRY_ACCESSOR = \"this.pipeRegistry\";\nvar PROTOS_ACCESSOR = \"this.protos\";\nvar CHANGE_LOCAL = \"change\";\nvar CHANGES_LOCAL = \"changes\";\nvar TEMP_LOCAL = \"temp\";\nfunction typeTemplate(type, cons, detectChanges, setContext) {\n  assert.argumentTypes(type, assert.type.string, cons, assert.type.string, detectChanges, assert.type.string, setContext, assert.type.string);\n  return assert.returnType((`\n${cons}\n${detectChanges}\n${setContext};\n\nreturn function(dispatcher, pipeRegistry) {\n  return new ${type}(dispatcher, pipeRegistry, protos);\n}\n`), assert.type.string);\n}\nObject.defineProperty(typeTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction constructorTemplate(type, fieldsDefinitions) {\n  assert.argumentTypes(type, assert.type.string, fieldsDefinitions, assert.type.string);\n  return assert.returnType((`\nvar ${type} = function ${type}(dispatcher, pipeRegistry, protos) {\n${ABSTRACT_CHANGE_DETECTOR}.call(this);\n${DISPATCHER_ACCESSOR} = dispatcher;\n${PIPE_REGISTRY_ACCESSOR} = pipeRegistry;\n${PROTOS_ACCESSOR} = protos;\n${fieldsDefinitions}\n}\n\n${type}.prototype = Object.create(${ABSTRACT_CHANGE_DETECTOR}.prototype);\n`), assert.type.string);\n}\nObject.defineProperty(constructorTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction setContextTemplate(type) {\n  assert.argumentTypes(type, assert.type.string);\n  return assert.returnType((`\n${type}.prototype.setContext = function(context) {\n  this.context = context;\n}\n`), assert.type.string);\n}\nObject.defineProperty(setContextTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string]];\n  }});\nfunction detectChangesTemplate(type, body) {\n  assert.argumentTypes(type, assert.type.string, body, assert.type.string);\n  return assert.returnType((`\n${type}.prototype.detectChangesInRecords = function(throwOnChange) {\n  ${body}\n}\n`), assert.type.string);\n}\nObject.defineProperty(detectChangesTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction bodyTemplate(localDefinitions, changeDefinitions, records) {\n  assert.argumentTypes(localDefinitions, assert.type.string, changeDefinitions, assert.type.string, records, assert.type.string);\n  return assert.returnType((`\n${localDefinitions}\n${changeDefinitions}\nvar ${TEMP_LOCAL};\nvar ${CHANGE_LOCAL};\nvar ${CHANGES_LOCAL} = null;\n\ncontext = this.context;\n${records}\n`), assert.type.string);\n}\nObject.defineProperty(bodyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction notifyTemplate(index) {\n  assert.argumentTypes(index, assert.type.number);\n  return assert.returnType((`\nif (${CHANGES_LOCAL} && ${CHANGES_LOCAL}.length > 0) {\n  if(throwOnChange) ${UTIL}.throwOnChange(${PROTOS_ACCESSOR}[${index}], ${CHANGES_LOCAL}[0]);\n  ${DISPATCHER_ACCESSOR}.onRecordChange(${PROTOS_ACCESSOR}[${index}].directiveMemento, ${CHANGES_LOCAL});\n  ${CHANGES_LOCAL} = null;\n}\n`), assert.type.string);\n}\nObject.defineProperty(notifyTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number]];\n  }});\nfunction pipeCheckTemplate(context, pipe, pipeType, value, change, addRecord, notify) {\n  assert.argumentTypes(context, assert.type.string, pipe, assert.type.string, pipeType, assert.type.string, value, assert.type.string, change, assert.type.string, addRecord, assert.type.string, notify, assert.type.string);\n  return assert.returnType((`\nif (${pipe} === ${UTIL}.unitialized() || !${pipe}.supports(${context})) {\n  ${pipe} = ${PIPE_REGISTRY_ACCESSOR}.get('${pipeType}', ${context});\n}\n\n${CHANGE_LOCAL} = ${pipe}.transform(${context});\nif (! ${UTIL}.noChangeMarker(${CHANGE_LOCAL})) {\n  ${value} = ${CHANGE_LOCAL};\n  ${change} = true;\n  ${addRecord}\n}\n${notify}\n`), assert.type.string);\n}\nObject.defineProperty(pipeCheckTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction referenceCheckTemplate(assignment, newValue, oldValue, change, addRecord, notify) {\n  return `\n${assignment}\nif (${newValue} !== ${oldValue} || (${newValue} !== ${newValue}) && (${oldValue} !== ${oldValue})) {\n  ${change} = true;\n  ${addRecord}\n  ${oldValue} = ${newValue};\n}\n${notify}\n`;\n}\nfunction assignmentTemplate(field, value) {\n  assert.argumentTypes(field, assert.type.string, value, assert.type.string);\n  return `${field} = ${value};`;\n}\nObject.defineProperty(assignmentTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string]];\n  }});\nfunction propertyReadTemplate(name, context, newValue) {\n  assert.argumentTypes(name, assert.type.string, context, assert.type.string, newValue, assert.type.string);\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}');\n} else {\n  ${newValue} = ${TEMP_LOCAL}.${name};\n}\n`;\n}\nObject.defineProperty(propertyReadTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction invokeMethodTemplate(name, args, context, newValue) {\n  assert.argumentTypes(name, assert.type.string, args, assert.type.string, context, assert.type.string, newValue, assert.type.string);\n  return `\n${TEMP_LOCAL} = ${UTIL}.findContext(\"${name}\", ${context});\nif (${TEMP_LOCAL} instanceof ContextWithVariableBindings) {\n  ${newValue} = ${TEMP_LOCAL}.get('${name}').apply(null, [${args}]);\n} else {\n  ${newValue} = ${context}.${name}(${args});\n}\n`;\n}\nObject.defineProperty(invokeMethodTemplate, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.type.string], [assert.type.string], [assert.type.string]];\n  }});\nfunction localDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `var ${n};`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(localDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction changeDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `var ${n} = false;`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(changeDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction fieldDefinitionsTemplate(names) {\n  return assert.returnType((names.map((n) => `${n} = ${UTIL}.unitialized();`).join(\"\\n\")), assert.type.string);\n}\nObject.defineProperty(fieldDefinitionsTemplate, \"parameters\", {get: function() {\n    return [[List]];\n  }});\nfunction ifChangedGuardTemplate(changeNames, body) {\n  assert.argumentTypes(changeNames, List, body, assert.type.string);\n  var cond = changeNames.join(\" || \");\n  return assert.returnType((`\nif (${cond}) {\n  ${body}\n}\n`), assert.type.string);\n}\nObject.defineProperty(ifChangedGuardTemplate, \"parameters\", {get: function() {\n    return [[List], [assert.type.string]];\n  }});\nfunction addSimpleChangeRecordTemplate(protoIndex, oldValue, newValue) {\n  assert.argumentTypes(protoIndex, assert.type.number, oldValue, assert.type.string, newValue, assert.type.string);\n  return `${CHANGES_LOCAL} = ${UTIL}.addRecord(${CHANGES_LOCAL},\n    ${UTIL}.simpleChangeRecord(${PROTOS_ACCESSOR}[${protoIndex}].bindingMemento, ${oldValue}, ${newValue}));`;\n}\nObject.defineProperty(addSimpleChangeRecordTemplate, \"parameters\", {get: function() {\n    return [[assert.type.number], [assert.type.string], [assert.type.string]];\n  }});\nexport class ChangeDetectorJITGenerator {\n  constructor(typeName, records) {\n    assert.argumentTypes(typeName, assert.type.string, records, assert.genericType(List, ProtoRecord));\n    this.typeName = typeName;\n    this.records = records;\n    this.localNames = this.getLocalNames(records);\n    this.changeNames = this.getChangeNames(this.localNames);\n    this.fieldNames = this.getFieldNames(this.localNames);\n    this.pipeNames = this.getPipeNames(this.localNames);\n  }\n  getLocalNames(records) {\n    assert.argumentTypes(records, assert.genericType(List, ProtoRecord));\n    var index = 0;\n    var names = records.map((r) => {\n      var sanitizedName = r.name.replace(new RegExp(\"\\\\W\", \"g\"), '');\n      return `${sanitizedName}${index++}`;\n    });\n    return assert.returnType(([\"context\"].concat(names)), assert.genericType(List, String));\n  }\n  getChangeNames(localNames) {\n    return assert.returnType((localNames.map((n) => `change_${n}`)), assert.genericType(List, String));\n  }\n  getFieldNames(localNames) {\n    return assert.returnType((localNames.map((n) => `this.${n}`)), assert.genericType(List, String));\n  }\n  getPipeNames(localNames) {\n    return assert.returnType((localNames.map((n) => `this.${n}_pipe`)), assert.genericType(List, String));\n  }\n  generate() {\n    var text = typeTemplate(this.typeName, this.genConstructor(), this.genDetectChanges(), this.genSetContext());\n    return assert.returnType((new Function('AbstractChangeDetector', 'ChangeDetectionUtil', 'ContextWithVariableBindings', 'protos', text)(AbstractChangeDetector, ChangeDetectionUtil, ContextWithVariableBindings, this.records)), Function);\n  }\n  genConstructor() {\n    var fields = [];\n    fields = fields.concat(this.fieldNames);\n    this.records.forEach((r) => {\n      if (r.mode === RECORD_TYPE_PIPE) {\n        fields.push(this.pipeNames[r.selfIndex]);\n      }\n    });\n    return assert.returnType((constructorTemplate(this.typeName, fieldDefinitionsTemplate(fields))), assert.type.string);\n  }\n  genSetContext() {\n    return assert.returnType((setContextTemplate(this.typeName)), assert.type.string);\n  }\n  genDetectChanges() {\n    var body = this.genBody();\n    return assert.returnType((detectChangesTemplate(this.typeName, body)), assert.type.string);\n  }\n  genBody() {\n    var rec = this.records.map((r) => this.genRecord(r)).join(\"\\n\");\n    return assert.returnType((bodyTemplate(this.genLocalDefinitions(), this.genChangeDefinitions(), rec)), assert.type.string);\n  }\n  genLocalDefinitions() {\n    return assert.returnType((localDefinitionsTemplate(this.localNames)), assert.type.string);\n  }\n  genChangeDefinitions() {\n    return assert.returnType((changeDefinitionsTemplate(this.changeNames)), assert.type.string);\n  }\n  genRecord(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    if (r.mode === RECORD_TYPE_PIPE) {\n      return assert.returnType((this.genPipeCheck(r)), assert.type.string);\n    } else {\n      return assert.returnType((this.genReferenceCheck(r)), assert.type.string);\n    }\n  }\n  genPipeCheck(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var context = this.localNames[r.contextIndex];\n    var pipe = this.pipeNames[r.selfIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    return assert.returnType((pipeCheckTemplate(context, pipe, r.name, newValue, change, addRecord, notify)), assert.type.string);\n  }\n  genReferenceCheck(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var newValue = this.localNames[r.selfIndex];\n    var oldValue = this.fieldNames[r.selfIndex];\n    var change = this.changeNames[r.selfIndex];\n    var assignment = this.genUpdateCurrentValue(r);\n    var addRecord = addSimpleChangeRecordTemplate(r.selfIndex - 1, oldValue, newValue);\n    var notify = this.genNotify(r);\n    var check = referenceCheckTemplate(assignment, newValue, oldValue, change, r.lastInBinding ? addRecord : '', notify);\n    ;\n    if (r.isPureFunction()) {\n      return assert.returnType((this.ifChangedGuard(r, check)), assert.type.string);\n    } else {\n      return assert.returnType((check), assert.type.string);\n    }\n  }\n  genUpdateCurrentValue(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var context = this.localNames[r.contextIndex];\n    var newValue = this.localNames[r.selfIndex];\n    var args = this.genArgs(r);\n    switch (r.mode) {\n      case RECORD_TYPE_SELF:\n        return assert.returnType((assignmentTemplate(newValue, context)), assert.type.string);\n      case RECORD_TYPE_CONST:\n        return assert.returnType((`${newValue} = ${this.genLiteral(r.funcOrValue)}`), assert.type.string);\n      case RECORD_TYPE_PROPERTY:\n        if (r.contextIndex == 0) {\n          return assert.returnType((propertyReadTemplate(r.name, context, newValue)), assert.type.string);\n        } else {\n          return assert.returnType((assignmentTemplate(newValue, `${context}.${r.name}`)), assert.type.string);\n        }\n      case RECORD_TYPE_INVOKE_METHOD:\n        if (r.contextIndex == 0) {\n          return assert.returnType((invokeMethodTemplate(r.name, args, context, newValue)), assert.type.string);\n        } else {\n          return assert.returnType((assignmentTemplate(newValue, `${context}.${r.name}(${args})`)), assert.type.string);\n        }\n      case RECORD_TYPE_INVOKE_CLOSURE:\n        return assert.returnType((assignmentTemplate(newValue, `${context}(${args})`)), assert.type.string);\n      case RECORD_TYPE_PRIMITIVE_OP:\n        return assert.returnType((assignmentTemplate(newValue, `${UTIL}.${r.name}(${args})`)), assert.type.string);\n      case RECORD_TYPE_INTERPOLATE:\n        return assert.returnType((assignmentTemplate(newValue, this.genInterpolation(r))), assert.type.string);\n      case RECORD_TYPE_KEYED_ACCESS:\n        var key = this.localNames[r.args[0]];\n        return assert.returnType((assignmentTemplate(newValue, `${context}[${key}]`)), assert.type.string);\n      default:\n        throw new BaseException(`Unknown operation ${r.mode}`);\n    }\n  }\n  ifChangedGuard(r, body) {\n    return assert.returnType((ifChangedGuardTemplate(r.args.map((a) => this.changeNames[a]), body)), assert.type.string);\n  }\n  genInterpolation(r) {\n    assert.argumentTypes(r, ProtoRecord);\n    var res = \"\";\n    for (var i = 0; i < r.args.length; ++i) {\n      res += this.genLiteral(r.fixedArgs[i]);\n      res += \" + \";\n      res += this.localNames[r.args[i]];\n      res += \" + \";\n    }\n    res += this.genLiteral(r.fixedArgs[r.args.length]);\n    return assert.returnType((res), assert.type.string);\n  }\n  genLiteral(value) {\n    return assert.returnType((JSON.stringify(value)), assert.type.string);\n  }\n  genNotify(r) {\n    return assert.returnType((r.lastInDirective ? notifyTemplate(r.selfIndex - 1) : ''), assert.type.string);\n  }\n  genArgs(r) {\n    return assert.returnType((r.args.map((arg) => this.localNames[arg]).join(\", \")), assert.type.string);\n  }\n}\nObject.defineProperty(ChangeDetectorJITGenerator, \"parameters\", {get: function() {\n    return [[assert.type.string], [assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getLocalNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, ProtoRecord)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getChangeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getFieldNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.getPipeNames, \"parameters\", {get: function() {\n    return [[assert.genericType(List, String)]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genRecord, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genPipeCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genReferenceCheck, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genUpdateCurrentValue, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.ifChangedGuard, \"parameters\", {get: function() {\n    return [[ProtoRecord], [assert.type.string]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genInterpolation, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\nObject.defineProperty(ChangeDetectorJITGenerator.prototype.genArgs, \"parameters\", {get: function() {\n    return [[ProtoRecord]];\n  }});\n\n//# sourceMappingURL=/Users/patrick/Documents/open source/angular/modules/angular2/src/change_detection/change_detection_jit_generator.map\n\n//# sourceMappingURL=./change_detection_jit_generator.map","assert.genericType($__placeholder__0)","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()"]}