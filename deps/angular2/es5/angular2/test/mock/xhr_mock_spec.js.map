{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/mock/xhr_mock_spec.js","angular2/test/mock/@traceur/generated/TemplateParser/8","angular2/test/mock/@traceur/generated/TemplateParser/7","angular2/test/mock/@traceur/generated/TemplateParser/1180","angular2/test/mock/@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"angular2/test/mock/xhr_mock_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {describe, beforeEach, it, expect, ddescribe, iit, el, IS_DARTIUM} from 'angular2/test_lib';\nimport {XHRMock} from 'angular2/src/mock/xhr_mock';\nimport {PromiseWrapper, Promise} from 'angular2/src/facade/async';\nimport {isPresent} from 'angular2/src/facade/lang';\n\nexport function main() {\n  describe('XHRMock', () => {\n    var xhr;\n\n    beforeEach(() => {\n      xhr = new XHRMock();\n    });\n\n    function expectResponse(request: Promise, url: string, response: string, done = null) {\n      function onResponse(text: string) {\n        if (response === null) {\n          throw `Unexpected response ${url} -> ${text}`;\n        } else {\n          expect(text).toEqual(response);\n          if (isPresent(done)) done();\n        }\n      }\n\n      function onError(error: string) {\n        if (response !== null) {\n          throw `Unexpected error ${url}`;\n        } else {\n          expect(error).toEqual(`Failed to load ${url}`);\n          if (isPresent(done)) done();\n        }\n      }\n\n      PromiseWrapper.then(request, onResponse, onError);\n    }\n\n    it('should return a response from the definitions', (done) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should return an error from the definitions', (done) => {\n      var url = '/foo';\n      var response = null;\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should return a response from the expectations', (done) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should return an error from the expectations', (done) => {\n      var url = '/foo';\n      var response = null;\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should not reuse expectations', () => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      xhr.get(url);\n      xhr.get(url);\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should return expectations before definitions', (done) => {\n      var url = '/foo';\n      xhr.when(url, 'when');\n      xhr.expect(url, 'expect');\n      expectResponse(xhr.get(url), url, 'expect');\n      expectResponse(xhr.get(url), url, 'when', done);\n      xhr.flush();\n    });\n\n    it('should throw when there is no definitions or expectations', () => {\n      xhr.get('/foo');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should throw when flush is called without any pending requests', () => {\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('No pending requests to flush');\n    });\n\n    it('should throw on unstatisfied expectations', () => {\n      xhr.expect('/foo', 'bar');\n      xhr.when('/bar', 'foo');\n      xhr.get('/bar');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unsatisfied requests: /foo');\n    });\n  });\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","assert.type.any","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;"]}