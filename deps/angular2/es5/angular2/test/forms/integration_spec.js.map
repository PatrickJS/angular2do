{"version":3,"sources":["@traceur/generated/TemplateParser/22","angular2/test/forms/integration_spec.js","angular2/test/forms/@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/30","@traceur/generated/TemplateParser/21","@traceur/generated/TemplateParser/20","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/29","@traceur/generated/TemplateParser/27","angular2/test/forms/@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/28","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA,KAAK,SAAS,AAAC,4WAAoB,UAAS,SAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiB7C,SAAS,KAAG,CAAC,AAAG;AACrB,WAAS,cAAY,CAAE,IAAG,CAAG;AAC3B,SAAG,eAAe,cAAe,EAAC,CAAC;IACrC;AAAA,AAEA,WAAS,QAAM,CAAE,aAAY,CAAG,CAAA,QAAO,CAAG,CAAA,OAAM,CAAG,CAAA,QAAO;AACpD,QAAA,CAAA,WAAU,EAAI,IAAI,qBAAmB,AAAC,EAAC,CAAC;AAExC,QAAA,CAAA,QAAO,EAAI,IAAI,SAAQ,AAAC,CAAA,sBAAqB,CAC/C,IAAI,eAAa,AAAE,CAAA,IAAG,CAAC,CACvB,IAAI,wBAAsB,AAAC,EAAC,CAC5B,IAAI,OAAK,AAAE,CAAA,GAAI,MAAI,AAAC,EAAC,CAAC,CACtB,IAAI,cAAa,EAAC,CAClB,IAAI,wBAAsB,AAAC,EAAC,CAC5B,YAAU,CACZ,CAAC;AAED,gBAAU,YAAY,AAAE,CAAA,aAAY,CAAG,IAAI,SAAO,AAAE,CAAA;AAClD,aAAK,CAAG,SAAO;AACf,iBAAS,CAAI,EAAA,qBAAoB,CAAG,qBAAmB,CAAG,iBAAe,CACvE,yBAAuB,CAAG,aAAW,CAAC;AAAA,MAC1C,CAAC,CAAC,CAAC;AAEH,aAAO,QAAQ,AAAE,CAAA,aAAY,CAAC,KAAM,AAAC,EAAC,SAAA,EAAC,CAAM;AACvC,UAAA,CAAA,IAAG,EAAI,CAAA,EAAC,YAAY,AAAE,CAAA,IAAG,CAAG,KAAG,CAAC,CAAC;AACrC,WAAG,QAAQ,AAAE,CAAA,GAAI,SAAO,AAAE,CAAA,EAAC,CAAC,CAAG,KAAG,CAAG,QAAM,CAAC,CAAC;AAC7C,oBAAa,AAAC,CAAA,IAAG,CAAC,CAAC;AACnB,eAAO,AAAE,CAAA,IAAG,CAAC,CAAC;MAChB,EAAC,CAAC;IACJ;AAEA,WAAO,AAAE,CAAA,mBAAkB,GAAG,SAAA,AAAC;AAC7B,OAAC,AAAE,CAAA,2DAA0D,GAAI,SAAA,IAAG;AAC9D,UAAA,CAAA,GAAE,EAAI,IAAI,OAAK,AAAE,CAAA,GAAI,aAAY,AAAC,CACpC,CAAA,OAAM,CAAG,IAAI,QAAM,AAAE,CAAA,YAAW,CAAC,CACnC,CAAC,CAAC,CAAC;AAEC,UAAA,CAAA,CAAA,EAAI,qHAKM,CAAA;AACZ,cAAA,AAAK,CAAE,MAAI,CAAA,EAAA,CAAM,IAAC,GAAA,SAAA,IAAQ,CAAE;AAC5B,AAAI,YAAA,CAAA,KAAE,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;AACN,eAAA,CAAA,KAAA,MAAA,CAAA,QAAA,CAAA,YAAA,CAAA,CAAA;AACF,aAAA,EAAA,CAAA;QAEC,EAAA,CAAA;MACG,EAAA,CAAA;AAGA,OAAA,CAAA,sDAAsB,GAAA,SAAA,IAAA;AAEtB,UAAA,CAAA,IAAI,EAAA,IAAA,aAAA,CAAA,CAAA,OAAA,CAAA,IAAA,QAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;AAIR,UAAA,CAAA,GAAM,EAAE,IAAQ,OAAG,CAAE,IAAI,CAAA,CAAA;AACnB,UAAA,CAAA,CAAA,EAAA,qHAGQ,CAAE;AAEd,cAAA,AAAK,CAAE,MAAG,CAAA,EAAA,CAAO,IAAA,GAAA,SAAA,IAAU,CAAC;AAC5B,AAAI,YAAA,CAAA,KAAE,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;AACN,cAAA,MAAA,EAAA,eAAA,CAAA;AACF,sBAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA;AAEC,eAAA,CAAA,IAAA,MAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA,CAAA;AACG,aAAA,EAAG,CAAA;QAGH,EAAA,CAAA;MAEA,EAAA,CAAA;AAIJ,OAAA,CAAA,6DAAkC,GAAA,SAAA,IAAA;AAChC,AAAE,UAAA,CAAA,IAAA,EAAS,IAAI,aAAA,CAAW,CAAE,OAC1B,CAAS,IAAI,QAAA,CAAO,UAAC,CAAA,CAAS,CAAC,CACjC;AACA,UAAA,CAAA,GAAA,EAAA,IAAa,OAAI,AAAC,CAAC,IAAA,CAAA,CAAA;AAEf,UAAA,CAAA,CAAA,EAAA,qHAEE,CAAA;AACR,cAAE,CAAA,MAAA,CAAA,EAAA,CAAA,IAAA,GAAA,SAAA,IAAA,CAAA;AACF,YAAA,KAAA,EAAA,IAAA,aAAA,CAAA,CAAA,OAAA,CAAA,IAAA,QAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;AAEC,sBAAA,CAAA,IAAA,CAAA,CAAA;AACG,AAAE,YAAA,CAAA,KAAI,EAAI,CAAA,SAAO,AAAI,CAAA,IAAA,CAAA,QAAW,CAAE,CAAA;AACpC,eAAO,CAAA,KAAI,MAAO,CAAC,QAAK,CAAA,UAAA,CAAA,CAAA;AACxB,aAAA,AAAI,EAAG,CAAA;QACT,EAAC,CAAG;MAEA,EAAA,CAAA;AAIJ,OAAA,CAAA,2DAAkC,GAAA,SAAA,IAAA;AAC5B,UAAA,CAAA,GAAA,EAAI,IAAI,OAAA,CAAA,GAAU,aAAY,AAAC,CAAA;AACnC,cAAA,CAAO,IAAI,QAAM,AAAC,CAAA,KAAA,CAAA;AAElB,cAAE,CAAK,IAAI,QAAK,CAAA,KAAA,CAAA;AAAA,QAChB,CAAA,CAAA,MAAA,CAAA,CAAA;AAEA,UAAA,CAAA,CAAA,EAAO,sHAEP,CAAA;AACF,cAAA,CAAA,MAAA,CAAA,EAAA,CAAA,IAAA,GAAA,SAAA,IAAA,CAAA;AAEF,AAAS,YAAA,CAAA,KAAA,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAA4B,CAAA,CAAK;AACrC,eAAA,CAAA,KAAA,MAAA,CAAA,QAAA,CAAA,KAAgC,CAAC,CAAA;AAC9B,YAAA,KAAE,EAAI,MAAI,CAAA;AAEV,sBAAI,CAAA,IAAA,CAAA,CAAA;AAIR,eAAA,AAAM,CAAE,KAAA,MAAW,CAAA,QAAM,CAAG,KAAM,CAAA,CAAA;AAC5B,aAAA,EAAA,CAAA;QACJ,EAAA,CAAA;MAEA,EAAA,CAAA;AACA,aAAA,CAAA,yBAAqB,GAAS,SAAA;AAE9B,SAAA,CAAA,8BAAqB,GAAW,SAAA,IAAA;AAChC,YAAA,CAAA,GAAI,EAAE,IAAA,OAAA,CAAA,GAAA,aAAA,CAAA,CAAA,UAAA,CAAA,IAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACR,AAAE,YAAA,CAAA,CAAA,EAAA,gIAGD,CAAA;AACG,gBAAE,CAAI,MAAI,CAAA,EAAA,CAAK,IAAE,GAAI,SAAA,IAAA,CAAA;AAErB,AAAI,cAAA,CAAA,KAAA,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;AAIR,iBAAQ,CAAA,KAAK,QAAQ,CAAG,KAAC,AAAG,CAAA,IAAM,CAAA,CAAA;AAC5B,gBAAA,QAAQ,EAAA,MAAS,CAAC;AACtB,wBAAW,CAAA,KAAO,CAAA,SAAU,CAAA,CAAA;AAE5B,iBAAI,CAAA,GAAA,KAAU,MAAM,CAAA,QAAA,CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AACpB,eAAA,EAAA,CAAA;UAEA,EAAA,CAAA;QACA,EAAA,CAAA;AA1CJ,SAAC,AA2CC,CAAC,uCAAC,GAAA,SAAA,IAAA;AACF,YAAA,CAAA,GAAA,EAAA,IAAA,OAAA,CAAA,GAAA,aAAA,CAAA,CAAA,MAAA,CAAA,IAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACF,YAAA,CAAA,CAAA,EAAA,sIAGG,CAAA;AACG,gBAAI,CAAA,MAAA,CAAA,EAAA,CAAA,IAAA,GAAA,SAAA,IAAA,CAAA;AAKR,AAAM,cAAA,CAAA,KAAE,EAAQ,CAAA,SAAO,CAAA,IAAA,CAAO,QAAI,CAAG,CAAA;AAC/B,iBAAA,CAAA,KAAA,MAAa,CAAA,QAAU,CAAA,MAAM,CAAA,CAAA;AACjC,gBAAA,MAAO,EAAA,OAAS,CAAA;AAEZ,wBAAQ,CAAI,KAAA,CAAA,SAAU,CAAG,CAAG;AAChC,iBAAK,AAAE,CAAA,GAAA,KAAA,MAAQ,CAAM,QAAC,AAAQ,CAAE,CAAA,MAAA,CAAA,KAAW,CAAC,CAAA,CAAA;AAE5C,eAAG,AAAC,EAAC,CAAC;UACR,EAAC,CAAC;QACJ,EAAC,CAAC;MAEF,EAAA,CAAA;AACM,aAAA,CAAA,mBAAI,GAAA,SAAA;AAIR,SAAA,CAAA,gCAAiC,GAAC,SAAA,IAAG;AAC/B,YAAA,CAAA,CAAA,EAAA,kQAKO,CAAA;AACX,gBAAA,AAAK,CAAE,MAAG,CAAA,EAAA,CAAO,IAAA,OAAU,AAAC,EAAA,GAAA,SAAA,IAAS,CAAA;AACrC,AAAI,cAAA,CAAA,UAAE,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAA;AACN,iBAAA,CAAA,UAAA,MAAA,CAAA,QAAA,CAAA,YAAA,CAAA,CAAA;AACF,cAAA,CAAA,SAAA,EAAA,CAAA,SAAA,CAAA,IAAA,CAAA,YAAA,CAAA,CAAA;AAEF,iBAAA,CAAA,SAAA,MAAA,CAAA,QAAA,CAAA,WAAA,CAAA,CAAA;AACF,eAAA,EAAA,CAAA;UACJ,EAAA,CAAA;QAGM,EAAA,CAAA;AAIJ,SAAA,CAAA,sDAAsC,GAAA,SAAA,IAAA;AACjC,AAAK,YAAA,CAAA,CAAA,EAAI,iJAEd,CAAA;AACF,gBAAA,CAAA,MAAA,CAAA,EAAA,CAAA,IAAA,OAAA,EAAA,GAAA,SAAA,IAAA,CAAA;AC1NK,cAAA,CAAA,KAAA,EAAgB,CAAA,SAAA,CAAA,IAAA,CAAA,QACb,CAAC,CAAA;AAAiB,gBDgNzB,MAAA,EAAQ,eAAa,CAAA;AChN+B,wBAAA,CAAA,KAAA,CAAA,SAAA,CAAA,CAAA;AD2N/C,cAAA,CAAA,IAAA,EAAA,CAAA,IAAA,kBAA6B,IAAA,CAAA,MAAA,CAAmB,CAAA;AAC5C,iBAAK,CAAA,IAAA,MAAA,CAAA,QAAA,CAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA,CAAA;AACJ,eAAC,EAAA,CAAA;UACV,EAAA,CAAA;QAEA,EAAA,CAAA;MACE,EAAC,CAAA;IACH,EAAA,CAAA;EACF;AEnOQ,UAAQ,AAAC,cAAqC,CAAA;ACDtD,OAAO;AACD,UAAM,GCDZ,SAAS,IAAG,CAAG;ACAf,aAAoB,KAAG,OAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,eAAoB,KAAG,SAAkB,CAAC;AAA1C,SAAoB,KAAG,GAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,UAAoB,KAAG,IAAkB,CAAC;AAA1C,aAAoB,KAAG,OAAkB,CAAC;AAA1C,iBAAoB,KAAG,WAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,SAAoB,KAAG,GAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,YAAoB,KAAG,MAAkB,CAAC;AAA1C,aAAoB,KAAG,OAAkB,CAAC;AAA1C,qBAAoB,KAAG,eAAkB,CAAC;AAA1C,6BAAoB,KAAG,uBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,eAAoB,KAAG,SAAkB,CAAC;AAA1C,oBAAoB,KAAG,cAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,8BAAoB,KAAG,wBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,8BAAoB,KAAG,wBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,qBAAoB,KAAG,eAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,2BAAoB,KAAG,qBAAkB,CAAC;IDElC,CAFR,UAAS,IAAG,CAAG;ACAf,eAAoB,KAAG,SAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,gBAAoB,KAAG,UAAkB,CAAC;AAA1C,eAAoB,KAAG,SAAkB,CAAC;IDElC,CAFR,UAAS,IAAG;ACAZ,4BAAoB,KAAG,sBAAkB,CAAC;AAA1C,2BAAoB,KAAG,qBAAkB,CAAC;AAA1C,uBAAoB,KAAG,iBAAkB,CAAC;AAA1C,+BAAoB,KAAG,yBAAkB,CAAC;AAA1C,cAAoB,KAAG,QAAkB,CAAC;AAA1C,mBAAoB,KAAG,aAAkB,CAAC;AAA1C,2BAAoB,KAAG,qBAAkB,CAAC;IDElC,CDDuB;AACzB,UAAM;AGFZ,eCAA,SAAQ,AAAC;AACC,AAAI,UAAA,SPwOd,SAAM,OAAA,CACQ,AAAyB,CAAA;YAAzB,KAAyB,6CAAA,KAAA;YAAA,KAAA,6CAAA,KAAA;AQ1OvC,aAAA,KAAK,EAAA,KAAA,CAAA;AR2OD,aAAC,KAAA,EAAA,KAAc,CAAA;QO1O+B,AP2OhD,CO3OiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,gBACkB,CAAC;MACzD,AAAC,EAAC,CDJ0B,CAAA;ALApC,WAAK,eAAe,AAAC,CAAA,MAAA,CAAA,cAAA,CAAA,EAAA,GAAA,CACZ,UAAK,CAAA;AAAY,eAAA,EAAA,GDqOzB,UAAS,AAAC,CACT,CAAA,QAAO,CAAE,UAAA,CAAA,CAAA,CAAA,CAAA;QCtOuC,CAAC,CAAC,CAAC;AKDrD,6BGAA,SAAS,QAAO;AACN,AAAI,UAAA,uBRDd,SAAK,qBAAgB;ASArB,wBAAc,iBAAiB,AAAC,sBACL,MAAM,AAAC,CAAC,IAAG,CAAG,UAAQ,CAAC,CAAA;QDAA,ATuLlD,CSvLmD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC;ARDpB,kBAAA,CAAA,UDyOT,EAAA,CAAA;ACzOmC,iBAAC,CAAA,EAAA,MAAA,UAAA,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,OAAA,EAAA,EAAA,CAAA,CAAA;UD6OrD;AAzDE,mBAAS,CAAT,UAAW,EAAC,CAAG,CAAA,KAAI,CAAG;AACpB,aAAC,MAAM,IAAI,GAAG,EAAC,MAAI,EAAC,IAAE,CAAA,CAAC;UACzB;AAAA,aSpLgE,SAAO,CAAC,CAAC;MACnE,AAAC,CRJY,oBACP,CQGa,CHJS,CAAA;AAApC,qBCAA,SAAQ,AAAC,CAAE;AACD,AAAI,UAAA,ePwLd,SAAM,aAAW,CACH,EAAC,CAAG;AACd,eAAK,cAAc,AAAC,CAAC,EAAC,CAAG,qBAAmB,CAAC,CAAC;AAC9C,WAAC,cAAc,EAAI,IAAI,qBAAmB,AAAC,EAAC,CAAC;QO3LC,AP4LhD,CO5LiD;AACzC,aAAO,CAAA,CAAC,eAAc,YAAY,CAAC,AAAC,sBACkB,CAAC;MACzD,AAAC,EAAC,CDJ0B,CAAA;AN+LpC,WAAK,eAAe,AAAC,CAAC,YAAW,CAAG,cAAY,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAChE,eAAO,EAAC,GAAI,UAAQ,AAAC,CAAC,CAAC,QAAO,CAAG,kBAAgB,CAAC,CAAC,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;AACL,WAAK,eAAe,AAAC,CAAC,YAAW,CAAG,aAAW,CAAG,EAAC,GAAE,CAAG,UAAQ,AAAC,CAAE;AAC/D,eAAO,EAAC,CAAC,oBAAmB,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IGlM0B;EAC3B,CAAA;AJDI,CAAC,CAAC;ACsMgC","file":"angular2/test/forms/integration_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/dist/js/dev/es6/","sourcesContent":["System.register($__placeholder__0, function($__export) {\n          $__placeholder__1\n        });","import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach,\n  el, queryView, dispatchEvent} from 'angular2/test_lib';\n\nimport {Lexer, Parser, ChangeDetector, dynamicChangeDetection} from 'angular2/change_detection';\nimport {Compiler, CompilerCache} from 'angular2/src/core/compiler/compiler';\nimport {DirectiveMetadataReader} from 'angular2/src/core/compiler/directive_metadata_reader';\nimport {NativeShadowDomStrategy} from 'angular2/src/core/compiler/shadow_dom_strategy';\nimport {TemplateLoader} from 'angular2/src/core/compiler/template_loader';\nimport {MockTemplateResolver} from 'angular2/src/mock/template_resolver_mock';\n\nimport {Injector} from 'angular2/di';\n\nimport {Component, Decorator, Template} from 'angular2/core';\nimport {ControlGroupDirective, ControlNameDirective,\n  ControlDirective, NewControlGroupDirective,\n  Control, ControlGroup, ControlValueAccessor} from 'angular2/forms';\n\nexport function main() {\n  function detectChanges(view) {\n    view.changeDetector.detectChanges();\n  }\n\n  function compile(componentType, template, context, callback) {\n    var tplResolver = new MockTemplateResolver();\n\n    var compiler = new Compiler(dynamicChangeDetection,\n      new TemplateLoader(null),\n      new DirectiveMetadataReader(),\n      new Parser(new Lexer()),\n      new CompilerCache(),\n      new NativeShadowDomStrategy(),\n      tplResolver\n    );\n\n    tplResolver.setTemplate(componentType, new Template({\n      inline: template,\n      directives: [ControlGroupDirective, ControlNameDirective, ControlDirective,\n        NewControlGroupDirective, WrappedValue]\n    }));\n\n    compiler.compile(componentType).then((pv) => {\n      var view = pv.instantiate(null, null);\n      view.hydrate(new Injector([]), null, context);\n      detectChanges(view);\n      callback(view);\n    });\n  }\n\n  describe(\"integration tests\", () => {\n    it(\"should initialize DOM elements with the given form object\", (done) => {\n      var ctx = new MyComp(new ControlGroup({\n        \"login\": new Control(\"loginValue\")\n      }));\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control-name=\"login\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        var input = queryView(view, \"input\")\n        expect(input.value).toEqual(\"loginValue\");\n        done();\n      });\n    });\n\n    it(\"should update the control group values on DOM change\", (done) => {\n      var form = new ControlGroup({\n        \"login\": new Control(\"oldValue\")\n      });\n      var ctx = new MyComp(form);\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control-name=\"login\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        var input = queryView(view, \"input\")\n\n        input.value = \"updatedValue\";\n        dispatchEvent(input, \"change\");\n\n        expect(form.value).toEqual({\"login\": \"updatedValue\"});\n        done();\n      });\n    });\n\n    it(\"should update DOM elements when rebinding the control group\", (done) => {\n      var form = new ControlGroup({\n        \"login\": new Control(\"oldValue\")\n      });\n      var ctx = new MyComp(form);\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" control-name=\"login\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        ctx.form = new ControlGroup({\n          \"login\": new Control(\"newValue\")\n        });\n        detectChanges(view);\n\n        var input = queryView(view, \"input\")\n        expect(input.value).toEqual(\"newValue\");\n        done();\n      });\n    });\n\n    it(\"should update DOM element when rebinding the control name\", (done) => {\n      var ctx = new MyComp(new ControlGroup({\n        \"one\": new Control(\"one\"),\n        \"two\": new Control(\"two\")\n      }), \"one\");\n\n      var t = `<div [control-group]=\"form\">\n                <input type=\"text\" [control-name]=\"name\">\n              </div>`;\n\n      compile(MyComp, t, ctx, (view) => {\n        var input = queryView(view, \"input\")\n        expect(input.value).toEqual(\"one\");\n\n        ctx.name = \"two\";\n        detectChanges(view);\n\n        expect(input.value).toEqual(\"two\");\n        done();\n      });\n    });\n\n    describe(\"different control types\", () => {\n      it(\"should support type=checkbox\", (done) => {\n        var ctx = new MyComp(new ControlGroup({\"checkbox\": new Control(true)}));\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"checkbox\" control-name=\"checkbox\">\n                </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n          expect(input.checked).toBe(true);\n\n          input.checked = false;\n          dispatchEvent(input, \"change\");\n\n          expect(ctx.form.value).toEqual({\"checkbox\" : false});\n          done();\n        });\n      });\n\n      it(\"should support custom value accessors\", (done) => {\n        var ctx = new MyComp(new ControlGroup({\"name\": new Control(\"aa\")}));\n\n        var t = `<div [control-group]=\"form\">\n                  <input type=\"text\" control-name=\"name\" wrapped-value>\n                </div>`;\n\n        compile(MyComp, t, ctx, (view) => {\n          var input = queryView(view, \"input\")\n          expect(input.value).toEqual(\"!aa!\");\n\n          input.value = \"!bb!\";\n          dispatchEvent(input, \"change\");\n\n          expect(ctx.form.value).toEqual({\"name\" : \"bb\"});\n          done();\n        });\n      });\n    });\n\n    describe(\"declarative forms\", () => {\n      it(\"should initialize dom elements\", (done) => {\n        var t = `<div [new-control-group]=\"{'login': 'loginValue', 'password':'passValue'}\">\n                  <input type=\"text\" id=\"login\" control=\"login\">\n                  <input type=\"password\" id=\"password\" control=\"password\">\n                </div>`;\n\n        compile(MyComp, t, new MyComp(), (view) => {\n          var loginInput = queryView(view, \"#login\")\n          expect(loginInput.value).toEqual(\"loginValue\");\n\n          var passInput = queryView(view, \"#password\")\n          expect(passInput.value).toEqual(\"passValue\");\n\n          done();\n        });\n      });\n\n      it(\"should update the control group values on DOM change\", (done) => {\n        var t = `<div #form [new-control-group]=\"{'login': 'loginValue'}\">\n                  <input type=\"text\" control=\"login\">\n                </div>`;\n\n        compile(MyComp, t, new MyComp(), (view) => {\n          var input = queryView(view, \"input\")\n\n          input.value = \"updatedValue\";\n          dispatchEvent(input, \"change\");\n\n          var form = view.contextWithLocals.get(\"form\");\n          expect(form.value).toEqual({'login': 'updatedValue'});\n          done();\n        });\n      });\n\n    });\n  });\n}\n\n@Component({selector: \"my-comp\"})\nclass MyComp {\n  form:ControlGroup;\n  name:string;\n\n  constructor(form = null, name = null) {\n    this.form = form;\n    this.name = name;\n  }\n}\n\nclass WrappedValueAccessor extends ControlValueAccessor {\n  readValue(el){\n    return el.value.substring(1, el.value.length - 1);\n  }\n\n  writeValue(el, value):void {\n    el.value = `!${value}!`;\n  }\n}\n\n@Decorator({\n  selector:'[wrapped-value]'\n})\nclass WrappedValue {\n  constructor(cd:ControlNameDirective) {\n    cd.valueAccessor = new WrappedValueAccessor();\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function($__m) {\n          $__placeholder__0\n        }","$__placeholder__0 = $__m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()","assert.argumentTypes($__placeholder__0)","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","$traceurRuntime.superConstructor(\n          $__placeholder__0).apply(this, arguments)"]}