{"version":3,"sources":["console_reporter.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/reporter/console_reporter.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/reporter/","sourcesContent":["import { print, isPresent, isBlank, NumberWrapper } from 'angular2/src/facade/lang';\nimport { StringMapWrapper, ListWrapper, List } from 'angular2/src/facade/collection';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\nimport { Math } from 'angular2/src/facade/math';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Statistic } from '../statistic';\nimport { Reporter } from '../reporter';\nimport { SampleDescription } from '../sample_description';\nimport { MeasureValues } from '../measure_values';\n\n/**\n * A reporter for the console\n */\nexport class ConsoleReporter extends Reporter {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get PRINT() { return _PRINT; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get COLUMN_WIDTH() { return _COLUMN_WIDTH; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n\n  static _lpad(value, columnWidth, fill = ' ') {\n    var result = '';\n    for (var i=0; i<columnWidth - value.length; i++) {\n      result += fill;\n    }\n    return result + value;\n  }\n\n  static _formatNum(n) {\n    return NumberWrapper.toFixed(n, 2);\n  }\n\n  static _sortedProps(obj) {\n    var props = [];\n    StringMapWrapper.forEach(obj, (value, prop) => ListWrapper.push(props, prop));\n    props.sort();\n    return props;\n  }\n\n  _columnWidth:number;\n  _metricNames:List;\n  _print:Function;\n\n  constructor(columnWidth, sampleDescription, print) {\n    super();\n    this._columnWidth = columnWidth;\n    this._metricNames = ConsoleReporter._sortedProps(sampleDescription.metrics);\n    this._print = print;\n    this._printDescription(sampleDescription);\n  }\n\n  _printDescription(sampleDescription) {\n    this._print(`BENCHMARK ${sampleDescription.id}`);\n    this._print('Description:');\n    var props = ConsoleReporter._sortedProps(sampleDescription.description);\n    props.forEach( (prop) => {\n      this._print(`- ${prop}: ${sampleDescription.description[prop]}`);\n    });\n    this._print('Metrics:');\n    this._metricNames.forEach( (metricName) => {\n      this._print(`- ${metricName}: ${sampleDescription.metrics[metricName]}`);\n    });\n    this._print('');\n    this._printStringRow(this._metricNames);\n    this._printStringRow(this._metricNames.map( (_) => '' ), '-');\n  }\n\n  reportMeasureValues(measureValues:MeasureValues):Promise {\n    var formattedValues = ListWrapper.map(this._metricNames, (metricName) => {\n      var value = measureValues.values[metricName];\n      return ConsoleReporter._formatNum(value);\n    });\n    this._printStringRow(formattedValues);\n    return PromiseWrapper.resolve(null);\n  }\n\n  reportSample(completeSample:List<MeasureValues>, validSample:List<MeasureValues>):Promise {\n    this._printStringRow(this._metricNames.map( (_) => '' ), '=');\n    this._printStringRow(\n      ListWrapper.map(this._metricNames, (metricName) => {\n        var sample = ListWrapper.map(validSample, (measureValues) => measureValues.values[metricName]);\n        var mean = Statistic.calculateMean(sample);\n        var cv = Statistic.calculateCoefficientOfVariation(sample, mean);\n        var formattedCv = NumberWrapper.isNaN(cv) ? 'NaN' : Math.floor(cv);\n        return `${ConsoleReporter._formatNum(mean)}\\u00B1${formattedCv}%`;\n      })\n    );\n    return PromiseWrapper.resolve(null);\n  }\n\n  _printStringRow(parts, fill = ' ') {\n    this._print(\n      ListWrapper.map(parts, (part) => {\n        var w = this._columnWidth;\n        return ConsoleReporter._lpad(part, w, fill);\n      }).join(' | ')\n    );\n  }\n\n}\n\nvar _PRINT = new OpaqueToken('ConsoleReporter.print');\nvar _COLUMN_WIDTH = new OpaqueToken('ConsoleReporter.columnWidht');\nvar _BINDINGS = [\n  bind(ConsoleReporter).toFactory(\n    (columnWidth, sampleDescription, print) => new ConsoleReporter(columnWidth, sampleDescription, print),\n    [_COLUMN_WIDTH, SampleDescription, _PRINT]\n  ),\n  bind(_COLUMN_WIDTH).toValue(18),\n  bind(_PRINT).toValue(print)\n];\n","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}