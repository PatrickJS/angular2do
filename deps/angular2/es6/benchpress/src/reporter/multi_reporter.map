{"version":3,"sources":["multi_reporter.js","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAE,IAAG;AAAG,SAAO;AAAG,YAAU,CAAE,KAAO,cAAY,CAAC;AACzD,KAAO,EAAE,IAAG;AAAG,YAAU,CAAE,KAAO,iCAA+B,CAAC;AAClE,KAAO,EAAE,OAAM;AAAG,eAAa,CAAE,KAAO,4BAA0B,CAAC;AAEnE,KAAO,EAAE,aAAY,CAAE,KAAO,oBAAkB,CAAC;AACjD,KAAO,EAAE,QAAO,CAAE,KAAO,cAAY,CAAC;AAEtC,KAAO,MAAM,cAAY,QAAU,SAAO;AACxC,OAAO,eAAa,CAAE,WAAU,CAAG;AACjC,SAAO,EACL,IAAG,AAAC,CAAC,SAAQ,CAAC,eAAe,AAAC,CAC5B,CAAC,QAAO,IAAM,CAAA,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CAAC,WAAU,CAAG,EAAC,KAAI,IAAM,CAAA,QAAO,SAAS,AAAC,CAAC,KAAI,CAAC,CAAE,CAAC,CACnG,EAAC,QAAO,CAAC,CACX,CACA,CAAA,IAAG,AAAC,CAAC,aAAY,CAAC,UAAU,AAAC,CAC3B,CAAC,QAAO,IAAM,IAAI,cAAY,AAAC,CAAC,QAAO,CAAC,CACxC,EAAC,SAAQ,CAAC,CACZ,CACF,CAAC;EACH;AAAA,AAIA,YAAU,CAAE,SAAQ,CAAG;AACrB,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,WAAW,EAAI,UAAQ,CAAC;EAC7B;AAAA,AAEA,oBAAkB,CAAE,MAAK,AAAc;AC5BzC,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CD6Bd,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CACvC,IAAG,WAAW,CAAG,EAAC,QAAO,IAAM,CAAA,QAAO,oBAAoB,AAAC,CAAC,MAAK,CAAC,CACpE,CAAC,CC/BsC,CD4BC,QAAM,CC5Ba,CAAA;EDgC7D;AAEA,aAAW,CAAE,cAAa,AAAoB,CAAG,CAAA,WAAU,AAAoB;AClCjF,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CDmCd,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CACvC,IAAG,WAAW,CAAG,EAAC,QAAO,IAAM,CAAA,QAAO,aAAa,AAAC,CAAC,cAAa,CAAG,YAAU,CAAC,CAClF,CAAC,CCrCsC,CDkCyC,QAAM,CClC3B,CAAA;EDsC7D;AACF;AAAA,AEvCA,KAAK,eAAe,AAAC,2DACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YF2BG,aAAY,GE3BQ;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,oDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YCD1B,MAAK,YAAY,AHkCa,CAAA,IAAG,CAAE,cAAY,CAAC,AGlCZ,IAApC,MAAK,YAAY,AHkC8C,CAAA,IAAG,CAAE,cAAY,CAAC,AGlC7C,GDCa;EAAC,CAAC,CAAC,CAAC;AFwCrD,AAAI,EAAA,CAAA,SAAQ,EAAI,IAAI,YAAU,AAAC,CAAC,wBAAuB,CAAC,CAAC;AACzD","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/reporter/multi_reporter.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/reporter/","sourcesContent":["import { bind, Injector, OpaqueToken } from 'angular2/di';\nimport { List, ListWrapper } from 'angular2/src/facade/collection';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\n\nimport { MeasureValues } from '../measure_values';\nimport { Reporter } from '../reporter';\n\nexport class MultiReporter extends Reporter {\n  static createBindings(childTokens) {\n    return [\n      bind(_CHILDREN).toAsyncFactory(\n        (injector) => PromiseWrapper.all(ListWrapper.map(childTokens, (token) => injector.asyncGet(token) )),\n        [Injector]\n      ),\n      bind(MultiReporter).toFactory(\n        (children) => new MultiReporter(children),\n        [_CHILDREN]\n      )\n    ];\n  }\n\n  _reporters:List;\n\n  constructor(reporters) {\n    super();\n    this._reporters = reporters;\n  }\n\n  reportMeasureValues(values:MeasureValues):Promise {\n    return PromiseWrapper.all(ListWrapper.map(\n      this._reporters, (reporter) => reporter.reportMeasureValues(values)\n    ));\n  }\n\n  reportSample(completeSample:List<MeasureValues>, validSample:List<MeasureValues>):Promise {\n    return PromiseWrapper.all(ListWrapper.map(\n      this._reporters, (reporter) => reporter.reportSample(completeSample, validSample)\n    ));\n  }\n}\n\nvar _CHILDREN = new OpaqueToken('MultiReporter.children');\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}