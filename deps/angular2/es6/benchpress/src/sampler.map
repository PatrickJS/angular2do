{"version":3,"sources":["sampler.js","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/8"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/sampler.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/","sourcesContent":["import { isPresent, isBlank, Date, DateWrapper } from 'angular2/src/facade/lang';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\nimport { StringMapWrapper, StringMap, List, ListWrapper } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\n\nimport { Metric } from './metric';\nimport { Validator } from './validator';\nimport { Reporter } from './reporter';\nimport { WebDriverExtension } from './web_driver_extension';\nimport { WebDriverAdapter } from './web_driver_adapter';\n\nimport { Options } from './sample_options';\nimport { MeasureValues} from './measure_values';\n\n/**\n * The Sampler owns the sample loop:\n * 1. calls the prepare/execute callbacks,\n * 2. gets data from the metric\n * 3. asks the validator for a valid sample\n * 4. reports the new data to the reporter\n * 5. loop until there is a valid sample\n */\nexport class Sampler {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get TIME() { return _TIME; }\n\n  _driver:WebDriverAdapter;\n  _driverExtension:WebDriverExtension;\n  _metric:Metric;\n  _reporter:Reporter;\n  _validator:Validator;\n  _forceGc:boolean;\n  _prepare:Function;\n  _execute:Function;\n  _time:Function;\n\n  constructor({\n    driver, driverExtension, metric, reporter, validator, forceGc, prepare, execute, time\n  }:{\n    driver: WebDriverAdapter,\n    driverExtension: WebDriverExtension, metric: Metric, reporter: Reporter,\n    validator: Validator, prepare: Function, execute: Function, time: Function\n  }={}) {\n    this._driver = driver;\n    this._driverExtension = driverExtension;\n    this._metric = metric;\n    this._reporter = reporter;\n    this._validator = validator;\n    this._forceGc = forceGc;\n    this._prepare = prepare;\n    this._execute = execute;\n    this._time = time;\n  }\n\n  sample():Promise<SampleState> {\n    var loop;\n    loop = (lastState) => {\n      return this._iterate(lastState)\n        .then( (newState) => {\n          if (isPresent(newState.validSample)) {\n            return newState;\n          } else {\n            return loop(newState);\n          }\n        });\n    }\n    return this._gcIfNeeded().then( (_) => loop(new SampleState([], null)) );\n  }\n\n  _gcIfNeeded() {\n    if (this._forceGc) {\n      return this._driverExtension.gc();\n    } else {\n      return PromiseWrapper.resolve(null);\n    }\n  }\n\n  _iterate(lastState) {\n    var resultPromise;\n    if (isPresent(this._prepare)) {\n      resultPromise = this._driver.waitFor(this._prepare)\n        .then( (_) => this._gcIfNeeded() );\n    } else {\n      resultPromise = PromiseWrapper.resolve(null);\n    }\n    if (isPresent(this._prepare) || lastState.completeSample.length === 0) {\n      resultPromise = resultPromise.then( (_) => this._metric.beginMeasure() );\n    }\n    return resultPromise\n      .then( (_) => this._driver.waitFor(this._execute) )\n      .then( (_) => this._gcIfNeeded() )\n      .then( (_) => this._metric.endMeasure(isBlank(this._prepare)) )\n      .then( (measureValues) => this._report(lastState, measureValues) );\n  }\n\n  _report(state:SampleState, metricValues:StringMap):Promise<SampleState> {\n    var measureValues = new MeasureValues(state.completeSample.length, this._time(), metricValues);\n    var completeSample = ListWrapper.concat(state.completeSample, [measureValues]);\n    var validSample = this._validator.validate(completeSample);\n    var resultPromise = this._reporter.reportMeasureValues(measureValues);\n    if (isPresent(validSample)) {\n      resultPromise = resultPromise.then( (_) => this._reporter.reportSample(completeSample, validSample) )\n    }\n    return resultPromise.then( (_) => new SampleState(completeSample, validSample) );\n  }\n\n}\n\nexport class SampleState {\n  completeSample:List;\n  validSample:List;\n\n  constructor(completeSample: List, validSample: List) {\n    this.completeSample = completeSample;\n    this.validSample = validSample;\n  }\n}\n\nvar _TIME = new OpaqueToken('Sampler.time');\n\nvar _BINDINGS = [\n  bind(Sampler).toFactory(\n    (driver, driverExtension, metric, reporter, validator, forceGc, prepare, execute, time) => new Sampler({\n      driver: driver,\n      driverExtension: driverExtension,\n      reporter: reporter,\n      validator: validator,\n      metric: metric,\n      forceGc: forceGc,\n      // TODO(tbosch): DI right now does not support null/undefined objects\n      // Mostly because the cache would have to be initialized with a\n      // special null object, which is expensive.\n      prepare: prepare !== false ? prepare : null,\n      execute: execute,\n      time: time\n    }),\n    [WebDriverAdapter, WebDriverExtension, Metric, Reporter, Validator, Options.FORCE_GC, Options.PREPARE, Options.EXECUTE, _TIME]\n  ),\n  bind(Options.FORCE_GC).toValue(false),\n  bind(Options.PREPARE).toValue(false),\n  bind(_TIME).toValue( () => DateWrapper.now() )\n];\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.argumentTypes($__placeholder__0)"]}