{"version":3,"sources":["sample_description.js","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAE,gBAAe;AAAG,YAAU;AAAG,UAAQ,CAAE,KAAO,iCAA+B,CAAC;AACzF,KAAO,EAAE,IAAG;AAAG,YAAU,CAAE,KAAO,cAAY,CAAC;AAC/C,KAAO,EAAE,SAAQ,CAAE,KAAO,cAAY,CAAC;AACvC,KAAO,EAAE,MAAK,CAAE,KAAO,WAAS,CAAC;AACjC,KAAO,EAAE,OAAM,CAAE,KAAO,mBAAiB,CAAC;AAK1C,KAAO,MAAM,kBAAgB;AAE3B,WAAW,SAAO,EAAI;AAAE,SAAO,UAAQ,CAAC;EAAE;AAAA,AAM1C,YAAU,CAAE,EAAC,CAAG,CAAA,YAAW,AAAgB,CAAG,CAAA,OAAM,AAAU,CAAG;AAC/D,OAAG,GAAG,EAAI,GAAC,CAAC;AACZ,OAAG,QAAQ,EAAI,QAAM,CAAC;AACtB,OAAG,YAAY,EAAI,GAAC,CAAC;AACrB,cAAU,QAAQ,AAAC,CAAC,YAAW,CAAG,EAAC,WAAU,IAAM;AACjD,qBAAe,QAAQ,AAAC,CAAC,WAAU,CAAG,EAAC,KAAI,CAAG,CAAA,IAAG,IAAM,CAAA,IAAG,YAAY,CAAE,IAAG,CAAC,EAAI,MAAI,CAAE,CAAC;IACzF,CAAC,CAAC;EACJ;AAAA,AACF;AAAA,ACzBA,KAAK,eAAe,AAAC,iCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,gBCD1B,MAAK,YAAY,AFiBc,CAAA,IAAG,CAAE,UAAQ,CAAC,AEjBT,IFiBoB,SAAQ,GChBf;EAAC,CAAC,CAAC,CAAC;AD0BrD,AAAI,EAAA,CAAA,SAAQ,EAAI,EACd,IAAG,AAAC,CAAC,iBAAgB,CAAC,UAAU,AAAC,CAC/B,CAAC,MAAK,CAAG,CAAA,EAAC,CAAG,CAAA,OAAM,CAAG,CAAA,SAAQ,CAAG,CAAA,SAAQ,CAAG,CAAA,WAAU,CAAG,CAAA,QAAO,IAAM,IAAI,kBAAgB,AAAC,CAAC,EAAC,CAC3F,EACE;AAAC,UAAQ,CAAG,QAAM;AAAG,YAAU,CAAG,UAAQ;AAAA,AAAC,CAC3C,CAAA,SAAQ,SAAS,AAAC,EAAC,CACnB,YAAU,CACV,SAAO,CACT,CACA,CAAA,MAAK,SAAS,AAAC,EAAC,CAAC,CACnB,EACE,MAAK,CAAG,CAAA,OAAM,UAAU,CAAG,CAAA,OAAM,SAAS,CAAG,CAAA,OAAM,WAAW,CAC9D,UAAQ,CAAG,CAAA,OAAM,oBAAoB,CAAG,CAAA,OAAM,mBAAmB,CACnE,CACF,CACA,CAAA,IAAG,AAAC,CAAC,OAAM,oBAAoB,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAC5C,CAAA,IAAG,AAAC,CAAC,OAAM,mBAAmB,CAAC,QAAQ,AAAC,CAAC,EAAC,CAAC,CAC7C,CAAC;AACD","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/sample_description.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/","sourcesContent":["import { StringMapWrapper, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { bind, OpaqueToken } from 'angular2/di';\nimport { Validator } from './validator';\nimport { Metric } from './metric';\nimport { Options } from './sample_options';\n\n/**\n * SampleDescription merges all available descriptions about a sample\n */\nexport class SampleDescription {\n  // TODO(tbosch): use static values when our transpiler supports them\n  static get BINDINGS() { return _BINDINGS; }\n\n  id:string;\n  description:StringMap;\n  metrics:StringMap;\n\n  constructor(id, descriptions:List<StringMap>, metrics:StringMap) {\n    this.id = id;\n    this.metrics = metrics;\n    this.description = {};\n    ListWrapper.forEach(descriptions, (description) => {\n      StringMapWrapper.forEach(description, (value, prop) => this.description[prop] = value );\n    });\n  }\n}\n\nvar _BINDINGS = [\n  bind(SampleDescription).toFactory(\n    (metric, id, forceGc, userAgent, validator, defaultDesc, userDesc) => new SampleDescription(id,\n      [\n        {'forceGc': forceGc, 'userAgent': userAgent},\n        validator.describe(),\n        defaultDesc,\n        userDesc\n      ],\n      metric.describe()),\n    [\n      Metric, Options.SAMPLE_ID, Options.FORCE_GC, Options.USER_AGENT,\n      Validator, Options.DEFAULT_DESCRIPTION, Options.SAMPLE_DESCRIPTION\n    ]\n  ),\n  bind(Options.DEFAULT_DESCRIPTION).toValue({}),\n  bind(Options.SAMPLE_DESCRIPTION).toValue({})\n];\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.genericType($__placeholder__0)"]}