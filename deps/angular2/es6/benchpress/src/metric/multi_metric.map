{"version":3,"sources":["multi_metric.js","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAE,IAAG;AAAG,SAAO;AAAG,YAAU,CAAE,KAAO,cAAY,CAAC;AACzD,KAAO,EAAE,IAAG;AAAG,YAAU;AAAG,iBAAe;AAAG,UAAQ,CAAE,KAAO,iCAA+B,CAAC;AAC/F,KAAO,EAAE,OAAM;AAAG,eAAa,CAAE,KAAO,4BAA0B,CAAC;AAEnE,KAAO,EAAE,MAAK,CAAE,KAAO,YAAU,CAAC;AAElC,KAAO,MAAM,YAAU,QAAU,OAAK;AACpC,OAAO,eAAa,CAAE,WAAU,CAAG;AACjC,SAAO,EACL,IAAG,AAAC,CAAC,SAAQ,CAAC,eAAe,AAAC,CAC5B,CAAC,QAAO,IAAM,CAAA,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CAAC,WAAU,CAAG,EAAC,KAAI,IAAM,CAAA,QAAO,SAAS,AAAC,CAAC,KAAI,CAAC,CAAE,CAAC,CACnG,EAAC,QAAO,CAAC,CACX,CACA,CAAA,IAAG,AAAC,CAAC,WAAU,CAAC,UAAU,AAAC,CACzB,CAAC,QAAO,IAAM,IAAI,YAAU,AAAC,CAAC,QAAO,CAAC,CACtC,EAAC,SAAQ,CAAC,CACZ,CACF,CAAC;EACH;AAAA,AAIA,YAAU,CAAE,OAAM,CAAG;AACnB,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,SAAS,EAAI,QAAM,CAAC;EACzB;AAAA,AAKA,aAAW,CAAE,AAAD;AC9Bd,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CD+Bd,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CACvC,IAAG,SAAS,CAAG,EAAC,MAAK,IAAM,CAAA,MAAK,aAAa,AAAC,EAAC,CACjD,CAAC,CCjCsC,CD8B1B,QAAM,CC9BwC,CAAA;EDkC7D;AAOA,WAAS,CAAE,OAAM,AAAQ;ACzC3B,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CD0Cd,cAAa,IAAI,AAAC,CAAC,WAAU,IAAI,AAAC,CACvC,IAAG,SAAS,CAAG,EAAC,MAAK,IAAM,CAAA,MAAK,WAAW,AAAC,CAAC,OAAM,CAAC,CACtD,CAAC,KAAK,AAAC,CAAE,CAAC,MAAK,IAAM;AACnB,WAAO,CAAA,eAAc,AAAC,CAAC,MAAK,CAAC,CAAC;IAChC,CAAC,CC9CsC,CCA3C,CAAA,MAAK,YAAY,AFyCa,CAAA,OAAM,CAAE,UAAQ,CAAC,AEzCX,CDA2B,CAAA;ED+C7D;AAMA,SAAO,CAAE,AAAD;ACrDV,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CDsDd,eAAc,AAAC,CAAC,IAAG,SAAS,IAAI,AAAC,CAAE,CAAC,MAAK,IAAM,CAAA,MAAK,SAAS,AAAC,EAAC,CAAE,CAAC,CCtDlC,CDqD9B,UAAQ,CCrD0C,CAAA;EDuD7D;AACF;AAAA,AGxDA,KAAK,eAAe,AAAC,gDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YCD1B,MAAK,KAAK,WDCuC;EAAC,CAAC,CAAC,CAAC;AHyDrD,OAAS,gBAAc,CAAE,IAAG,CAAG;AAC7B,AAAI,IAAA,CAAA,MAAK,EAAI,GAAC,CAAC;AACf,YAAU,QAAQ,AAAC,CAAC,IAAG,CAAG,EAAC,GAAE,IAAM;AACjC,mBAAe,QAAQ,AAAC,CAAC,GAAE,CAAG,EAAC,KAAI,CAAG,CAAA,IAAG,IAAM;AAC7C,WAAK,CAAE,IAAG,CAAC,EAAI,MAAI,CAAC;IACtB,CAAC,CAAC;EACJ,CAAC,CAAC;AACF,OAAO,OAAK,CAAC;AACf;AAAA,AAEI,EAAA,CAAA,SAAQ,EAAI,IAAI,YAAU,AAAC,CAAC,sBAAqB,CAAC,CAAC;AACvD","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/metric/multi_metric.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/metric/","sourcesContent":["import { bind, Injector, OpaqueToken } from 'angular2/di';\nimport { List, ListWrapper, StringMapWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { Promise, PromiseWrapper } from 'angular2/src/facade/async';\n\nimport { Metric } from '../metric';\n\nexport class MultiMetric extends Metric {\n  static createBindings(childTokens) {\n    return [\n      bind(_CHILDREN).toAsyncFactory(\n        (injector) => PromiseWrapper.all(ListWrapper.map(childTokens, (token) => injector.asyncGet(token) )),\n        [Injector]\n      ),\n      bind(MultiMetric).toFactory(\n        (children) => new MultiMetric(children),\n        [_CHILDREN]\n      )\n    ];\n  }\n\n  _metrics:List;\n\n  constructor(metrics) {\n    super();\n    this._metrics = metrics;\n  }\n\n  /**\n   * Starts measuring\n   */\n  beginMeasure():Promise {\n    return PromiseWrapper.all(ListWrapper.map(\n      this._metrics, (metric) => metric.beginMeasure()\n    ));\n  }\n\n  /**\n   * Ends measuring and reports the data\n   * since the begin call.\n   * @param restart: Whether to restart right after this.\n   */\n  endMeasure(restart:boolean):Promise<StringMap> {\n    return PromiseWrapper.all(ListWrapper.map(\n      this._metrics, (metric) => metric.endMeasure(restart)\n    )).then( (values) => {\n      return mergeStringMaps(values);\n    });\n  }\n\n  /**\n   * Describes the metrics provided by this metric implementation.\n   * (e.g. units, ...)\n   */\n  describe():StringMap {\n    return mergeStringMaps(this._metrics.map( (metric) => metric.describe() ));\n  }\n}\n\nfunction mergeStringMaps(maps) {\n  var result = {};\n  ListWrapper.forEach(maps, (map) => {\n    StringMapWrapper.forEach(map, (value, prop) => {\n      result[prop] = value;\n    });\n  });\n  return result;\n}\n\nvar _CHILDREN = new OpaqueToken('MultiMetric.children');\n","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}