{"version":3,"sources":["sample_options.js"],"names":[],"mappings":"AAAA,KAAO,EAAE,IAAG;AAAG,YAAU,CAAE,KAAO,cAAY,CAAC;AAE/C,KAAO,MAAM,QAAM;AAEjB,WAAW,UAAQ,EAAI;AAAE,SAAO,WAAS,CAAC;EAAE;AAAA,AAE5C,WAAW,oBAAkB,EAAI;AAAE,SAAO,qBAAmB,CAAC;EAAE;AAAA,AAEhE,WAAW,mBAAiB,EAAI;AAAE,SAAO,oBAAkB,CAAC;EAAE;AAAA,AAE9D,WAAW,SAAO,EAAI;AAAE,SAAO,UAAQ,CAAC;EAAE;AAAA,AAE1C,WAAW,QAAM,EAAI;AAAE,SAAO,SAAO,CAAC;EAAE;AAAA,AAExC,WAAW,QAAM,EAAI;AAAE,SAAO,SAAO,CAAC;EAAE;AAAA,AAExC,WAAW,aAAW,EAAI;AAAE,SAAO,cAAY,CAAC;EAAE;AAAA,AAElD,WAAW,WAAS,EAAI;AAAE,SAAO,YAAU,CAAC;EAAE;AAAA,AAChD;AAAA,AAEI,EAAA,CAAA,UAAS,EAAI,IAAI,YAAU,AAAC,CAAC,kBAAiB,CAAC,CAAC;AACpD,AAAI,EAAA,CAAA,oBAAmB,EAAI,IAAI,YAAU,AAAC,CAAC,4BAA2B,CAAC,CAAC;AACxE,AAAI,EAAA,CAAA,mBAAkB,EAAI,IAAI,YAAU,AAAC,CAAC,2BAA0B,CAAC,CAAC;AACtE,AAAI,EAAA,CAAA,SAAQ,EAAI,IAAI,YAAU,AAAC,CAAC,iBAAgB,CAAC,CAAC;AAClD,AAAI,EAAA,CAAA,QAAO,EAAI,IAAI,YAAU,AAAC,CAAC,iBAAgB,CAAC,CAAC;AACjD,AAAI,EAAA,CAAA,QAAO,EAAI,IAAI,YAAU,AAAC,CAAC,iBAAgB,CAAC,CAAC;AACjD,AAAI,EAAA,CAAA,aAAY,EAAI,IAAI,YAAU,AAAC,CAAC,sBAAqB,CAAC,CAAC;AAC3D,AAAI,EAAA,CAAA,WAAU,EAAI,IAAI,YAAU,AAAC,CAAC,mBAAkB,CAAC,CAAC;AACtD","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/sample_options.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/src/","sourcesContent":["import { bind, OpaqueToken } from 'angular2/di';\n\nexport class Options {\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get SAMPLE_ID() { return _SAMPLE_ID; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get DEFAULT_DESCRIPTION() { return _DEFAULT_DESCRIPTION; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get SAMPLE_DESCRIPTION() { return _SAMPLE_DESCRIPTION; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get FORCE_GC() { return _FORCE_GC; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get PREPARE() { return _PREPARE; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get EXECUTE() { return _EXECUTE; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get CAPABILITIES() { return _CAPABILITIES; }\n  // TODO(tbosch): use static initializer when our transpiler supports it\n  static get USER_AGENT() { return _USER_AGENT; }\n}\n\nvar _SAMPLE_ID = new OpaqueToken('Options.sampleId');\nvar _DEFAULT_DESCRIPTION = new OpaqueToken('Options.defaultDescription');\nvar _SAMPLE_DESCRIPTION = new OpaqueToken('Options.sampleDescription');\nvar _FORCE_GC = new OpaqueToken('Options.forceGc');\nvar _PREPARE = new OpaqueToken('Options.prepare');\nvar _EXECUTE = new OpaqueToken('Options.execute');\nvar _CAPABILITIES = new OpaqueToken('Options.capabilities');\nvar _USER_AGENT = new OpaqueToken('Options.userAgent');\n"]}