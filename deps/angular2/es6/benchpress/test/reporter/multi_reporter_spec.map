{"version":3,"sources":["multi_reporter_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS;AAAG,UAAQ,CAAC,KAAO,oBAAkB,CAAC;AAElG,KAAO,EAAE,IAAG;AAAG,YAAU;AAAG,UAAQ,CAAE,KAAO,iCAA+B,CAAC;AAC7E,KAAO,EAAE,cAAa;AAAG,QAAM,CAAE,KAAO,4BAA0B,CAAC;AACnE,KAAO,EAAE,WAAU,CAAE,KAAO,2BAAyB,CAAC;AAEtD,KAAO,EAAE,QAAO;AAAG,cAAY;AAAG,KAAG;AAAG,SAAO;AAAG,cAAY,CAAE,KAAO,wBAAsB,CAAC;AAE9F,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAS,gBAAc,CAAE,GAAE,CAAG;AAC5B,SAAO,CAAA,GAAI,SAAO,AAAC,CAAC,CAClB,WAAU,IAAI,AAAC,CAAC,GAAE,CAAG,EAAC,EAAC,IAAM,CAAA,IAAG,AAAC,CAAC,EAAC,CAAC,QAAQ,AAAC,CAAC,GAAI,aAAW,AAAC,CAAC,EAAC,CAAC,CAAC,CAAE,CACpE,CAAA,aAAY,eAAe,AAAC,CAAC,GAAE,CAAC,CAClC,CAAC,SAAS,AAAC,CAAC,aAAY,CAAC,CAAC;EAC5B;AAAA,AAEA,SAAO,AAAC,CAAC,gBAAe,CAAG,EAAC,AAAD,IAAM;AAE/B,KAAC,AAAC,CAAC,mCAAkC,CAAG,EAAC,IAAG,IAAM;AAChD,AAAI,QAAA,CAAA,EAAC,EAAI,IAAI,cAAY,AAAC,CAAC,CAAA,CAAG,CAAA,WAAU,IAAI,AAAC,EAAC,CAAG,GAAC,CAAC,CAAC;AACpD,oBAAc,AAAC,CAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC,KACtB,AAAC,CAAE,CAAC,CAAA,IAAM,CAAA,CAAA,oBAAoB,AAAC,CAAC,EAAC,CAAC,CAAE,KACpC,AAAC,CAAE,CAAC,MAAK,IAAM;AAEnB,aAAK,AAAC,CAAC,MAAK,CAAC,QAAQ,AAAC,CAAC,CACrB;AAAC,aAAG,CAAG,KAAG;AAAG,iBAAO,CAAG,GAAC;AAAA,QAAC,CACzB;AAAC,aAAG,CAAG,KAAG;AAAG,iBAAO,CAAG,GAAC;AAAA,QAAC,CAC3B,CAAC,CAAC;AACF,WAAG,AAAC,EAAC,CAAC;MACR,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,6BAA4B,CAAG,EAAC,IAAG,IAAM;AAC1C,AAAI,QAAA,CAAA,cAAa,EAAI,EACnB,GAAI,cAAY,AAAC,CAAC,CAAA,CAAG,CAAA,WAAU,IAAI,AAAC,EAAC,CAAG,GAAC,CAAC,CAC1C,IAAI,cAAY,AAAC,CAAC,CAAA,CAAG,CAAA,WAAU,IAAI,AAAC,EAAC,CAAG,GAAC,CAAC,CAC5C,CAAC;AACD,AAAI,QAAA,CAAA,WAAU,EAAI,EAAC,cAAa,CAAE,CAAA,CAAC,CAAC,CAAC;AAErC,oBAAc,AAAC,CAAC,CAAC,IAAG,CAAG,KAAG,CAAC,CAAC,KACtB,AAAC,CAAE,CAAC,CAAA,IAAM,CAAA,CAAA,aAAa,AAAC,CAAC,cAAa,CAAG,YAAU,CAAC,CAAE,KACtD,AAAC,CAAE,CAAC,MAAK,IAAM;AAEnB,aAAK,AAAC,CAAC,MAAK,CAAC,QAAQ,AAAC,CAAC,CACrB;AAAC,aAAG,CAAG,KAAG;AAAG,yBAAe,CAAG,eAAa;AAAG,sBAAY,CAAG,YAAU;AAAA,QAAC,CACzE;AAAC,aAAG,CAAG,KAAG;AAAG,yBAAe,CAAG,eAAa;AAAG,sBAAY,CAAG,YAAU;AAAA,QAAC,CAC3E,CAAC,CAAC;AACF,WAAG,AAAC,EAAC,CAAC;MACR,CAAC,CAAA;IACH,CAAC,CAAC;EAEJ,CAAC,CAAC;AACJ;AAAA,AAEA,IAAM,aAAW,QAAU,SAAO;AAGhC,YAAU,CAAE,EAAC,CAAG;AACd,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,IAAI,EAAI,GAAC,CAAC;EACf;AAAA,AAEA,oBAAkB,CAAE,MAAK,AAAc;AC9DzC,SAAK,cAAc,QD8DU,cAAY,CC9DH,CAAA;ACAtC,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CF+Dd,cAAa,QAAQ,AAAC,CAAC;AAC5B,SAAG,CAAG,CAAA,IAAG,IAAI;AACb,aAAO,CAAG,OAAK;AAAA,IACjB,CAAC,CElEsC,CF8DC,QAAM,CE9Da,CAAA;EFmE7D;AAEA,aAAW,CAAE,cAAa,AAAoB,CAAG,CAAA,WAAU,AAAoB;ACrEjF,SAAK,cAAc,gBEAnB,CAAA,MAAK,YAAY,AHqEa,CAAA,IAAG,CAAE,cAAY,CAAC,AGrEZ,cAApC,CAAA,MAAK,YAAY,AHqE8C,CAAA,IAAG,CAAE,cAAY,CAAC,AGrE7C,CFAE,CAAA;ACAtC,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CFsEd,cAAa,QAAQ,AAAC,CAAC;AAC5B,SAAG,CAAG,CAAA,IAAG,IAAI;AACb,qBAAe,CAAG,eAAa;AAC/B,kBAAY,CAAG,YAAU;AAAA,IAC3B,CAAC,CE1EsC,CFqEyC,QAAM,CErE3B,CAAA;EF2E7D;AAEF;AI7EA,KAAK,eAAe,AAAC,0DACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YJ6DG,aAAY,GI7DQ;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,mDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YDD1B,MAAK,YAAY,AHqEa,CAAA,IAAG,CAAE,cAAY,CAAC,AGrEZ,IAApC,MAAK,YAAY,AHqE8C,CAAA,IAAG,CAAE,cAAY,CAAC,AGrE7C,GCCa;EAAC,CAAC,CAAC,CAAC;AJ6ErD","file":"/Users/patrick/Documents/open source/angular/modules/benchpress/test/reporter/multi_reporter_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchpress/test/reporter/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\n\nimport { List, ListWrapper, StringMap } from 'angular2/src/facade/collection';\nimport { PromiseWrapper, Promise } from 'angular2/src/facade/async';\nimport { DateWrapper } from 'angular2/src/facade/lang';\n\nimport { Reporter, MultiReporter, bind, Injector, MeasureValues } from 'benchpress/benchpress';\n\nexport function main() {\n  function createReporters(ids) {\n    return new Injector([\n      ListWrapper.map(ids, (id) => bind(id).toValue(new MockReporter(id)) ),\n      MultiReporter.createBindings(ids)\n    ]).asyncGet(MultiReporter);\n  }\n\n  describe('multi reporter', () => {\n\n    it('should reportMeasureValues to all', (done) => {\n      var mv = new MeasureValues(0, DateWrapper.now(), {});\n      createReporters(['m1', 'm2'])\n        .then( (r) => r.reportMeasureValues(mv) )\n        .then( (values) => {\n\n        expect(values).toEqual([\n          {'id': 'm1', 'values': mv},\n          {'id': 'm2', 'values': mv}\n        ]);\n        done();\n      });\n    });\n\n    it('should reportSample to call', (done) => {\n      var completeSample = [\n        new MeasureValues(0, DateWrapper.now(), {}),\n        new MeasureValues(1, DateWrapper.now(), {})\n      ];\n      var validSample = [completeSample[1]];\n\n      createReporters(['m1', 'm2'])\n        .then( (r) => r.reportSample(completeSample, validSample) )\n        .then( (values) => {\n\n        expect(values).toEqual([\n          {'id': 'm1', 'completeSample': completeSample, 'validSample': validSample},\n          {'id': 'm2', 'completeSample': completeSample, 'validSample': validSample}\n        ]);\n        done();\n      })\n    });\n\n  });\n}\n\nclass MockReporter extends Reporter {\n  _id:string;\n\n  constructor(id) {\n    super();\n    this._id = id;\n  }\n\n  reportMeasureValues(values:MeasureValues):Promise {\n    return PromiseWrapper.resolve({\n      'id': this._id,\n      'values': values\n    });\n  }\n\n  reportSample(completeSample:List<MeasureValues>, validSample:List<MeasureValues>):Promise {\n    return PromiseWrapper.resolve({\n      'id': this._id,\n      'completeSample': completeSample,\n      'validSample': validSample\n    });\n  }\n\n}\n","assert.argumentTypes($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}