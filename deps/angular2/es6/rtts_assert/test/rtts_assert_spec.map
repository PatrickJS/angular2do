{"version":3,"sources":["rtts_assert_spec.es6","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/385","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/rtts_assert/test/rtts_assert_spec.es6","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/rtts_assert/test/","sourcesContent":["// # Assert.js\n// A run-time type assertion library for JavaScript. Designed to be used with [Traceur](https://github.com/google/traceur-compiler).\n\n\n// - [Basic Type Check](#basic-type-check)\n// - [Custom Check](#custom-check)\n// - [Primitive Values](#primitive-values)\n// - [Describing more complex types](#describing-more-complex-types)\n//   - [assert.arrayOf](#assert-arrayof)\n//   - [assert.structure](#assert-structure)\n// - [Integrating with Traceur](#integrating-with-traceur)\n\n// Note: `assert` gets automatically included by traceur!\n\nexport function main() {\n\ndescribe('prettyPrint', () => {\n  class Type {};\n\n  it('should limit the number of printed properties', () => {\n    var o = {};\n    for (var i = 0; i < 100; i++) {\n      o['p_' + i] = i;\n    }\n    try {\n      assert.type(o, Type);\n      throw 'fail!';\n    } catch (e) {\n      expect(e.message.indexOf('p_0')).toBeGreaterThan(-1);\n      expect(e.message.indexOf('...')).toBeGreaterThan(-1);\n      expect(e.message.indexOf('p_20')).toBe(-1);\n    }\n  });\n\n  it('should limit the depth of printed properties', () => {\n    var o = {l1: {l2: {l3: {l4: {l5: {l6: 'deep'}}}}}};\n\n    expect(() => {\n      assert.type(o, Type);\n    }).toThrowError('Expected an instance of Type, got {l1: {l2: {l3: {l4: [...]}}}}!');\n  });\n});\n\n// ## Basic Type Check\n// By default, `instanceof` is used to check the type.\n//\n// Note that you can use `assert.type()` in unit tests or anywhere in your code.\n// Most of the time, you will use it with Traceur.\n// Jump to the [Traceur section](#integrating-with-traceur) to see an example of that.\ndescribe('basic type check', function() {\n\n  class Type {}\n\n  it('should pass', function() {\n    assert.type(new Type(), Type);\n  });\n\n\n  it('should fail', function() {\n    expect(() => assert.type(123, Type))\n      .toThrowError('Expected an instance of Type, got 123!');\n  });\n\n\n  it('should allow null', function() {\n    assert.type(null, Type);\n  });\n});\n\n\n\n// ## Custom Check\n// Often, `instanceof` is not flexible enough.\n// In that case, your type can define its own `assert` method which will be used instead.\n//\n// See [Describing More Complex Types](#describing-more-complex-types) for examples how to\n// define custom checks using `assert.define()`.\ndescribe('custom check', function() {\n\n  class Type {}\n\n  // the basic check can just return true/false, without specifying any reason\n  it('should pass when returns true', function() {\n    Type.assert = function(value) {\n      return true;\n    };\n\n    assert.type({}, Type);\n  });\n\n\n  it('should fail when returns false', function() {\n    Type.assert = function(value) {\n      return false;\n    };\n\n    expect(() => assert.type({}, Type))\n      .toThrowError('Expected an instance of Type, got {}!');\n  });\n\n\n  // Using `assert.fail()` allows to report even multiple errors.\n  it('should fail when calls assert.fail()', function() {\n    Type.assert = function(value) {\n      assert.fail('not smart enough');\n      assert.fail('not blue enough');\n    };\n\n    expect(() => assert.type({}, Type))\n      .toThrowError('Expected an instance of Type, got {}!\\n' +\n                    '  - not smart enough\\n' +\n                    '  - not blue enough');\n  });\n\n\n  it('should fail when throws an exception', function() {\n    Type.assert = function(value) {\n      throw new Error('not long enough');\n    };\n\n    expect(function() {\n      assert.type(12345, Type);\n    }).toThrowError('Expected an instance of Type, got 12345!\\n' +\n                    '  - not long enough');\n  });\n});\n\n\n\n// ## Primitive Values\n// You don't want to check primitive values (such as strings, numbers, or booleans) using `typeof` rather than\n// `instanceof`.\n//\n// Again, you probably won't write this code and rather use Traceur to do it for you, simply based on type annotations.\ndescribe('primitive value check', function() {\n  var primitive = $traceurRuntime.type;\n\n  describe('string', function() {\n\n    it('should pass', function() {\n      assert.type('xxx', primitive.string);\n    });\n\n\n    it('should fail', function() {\n      expect(() => assert.type(12345, primitive.string))\n        .toThrowError('Expected an instance of string, got 12345!');\n    });\n\n    it('should allow null', function() {\n      assert.type(null, primitive.string);\n    });\n  });\n\n\n  describe('number', function() {\n\n    it('should pass', function() {\n      assert.type(123, primitive.number);\n    });\n\n\n    it('should fail', function() {\n      expect(() => assert.type(false, primitive.number))\n        .toThrowError('Expected an instance of number, got false!');\n    });\n\n    it('should allow null', function() {\n      assert.type(null, primitive.number);\n    });\n  });\n\n\n  describe('boolean', function() {\n\n    it('should pass', function() {\n      expect(assert.type(true, primitive.boolean)).toBe(true);\n      expect(assert.type(false, primitive.boolean)).toBe(false);\n    });\n\n\n    it('should fail', function() {\n      expect(() => assert.type(123, primitive.boolean))\n        .toThrowError('Expected an instance of boolean, got 123!');\n    });\n\n    it('should allow null', function() {\n      assert.type(null, primitive.boolean);\n    });\n  });\n});\n\n\n// ## Describing more complex types\n//\n// Often, a simple type check using `instanceof` or `typeof` is not enough.\n// That's why you can define custom checks using this DSL.\n// The goal was to make them easy to compose and as descriptive as possible.\n// Of course you can write your own DSL on the top of this.\ndescribe('define', function() {\n\n  // If the first argument to `assert.define()` is a type (function), it will define `assert` method on that function.\n  //\n  // In this example, being a type of Type means being a either a function or object.\n  it('should define assert for an existing type', function() {\n    class Type {}\n\n    assert.define(Type, function(value) {\n      assert(value).is(Function, Object);\n    });\n\n    assert.type({}, Type);\n    assert.type(function() {}, Type);\n    expect(() => assert.type('str', Type))\n      .toThrowError('Expected an instance of Type, got \"str\"!\\n' +\n                    '  - \"str\" is not instance of Function\\n' +\n                    '  - \"str\" is not instance of Object');\n  });\n\n\n  // If the first argument to `assert.define()` is a string,\n  // it will create an interface - basically an empty class with `assert` method.\n  it('should define an interface', function() {\n    var User = assert.define('MyUser', function(user) {\n      assert(user).is(Object);\n    });\n\n    assert.type({}, User);\n    expect(() => assert.type(12345, User))\n      .toThrowError('Expected an instance of MyUser, got 12345!\\n' +\n                    '  - 12345 is not instance of Object');\n  });\n\n\n  // Here are a couple of more APIs to describe your custom types...\n  //\n  // ### assert.arrayOf\n  // Checks if the value is an array and if so, it checks whether all the items are one the given types.\n  // These types can be composed types, not just simple ones.\n  describe('arrayOf', function() {\n\n    var Titles = assert.define('ListOfTitles', function(value) {\n      assert(value).is(assert.arrayOf(assert.string, assert.number));\n    });\n\n    it('should pass', function () {\n      assert.type(['one', 55, 'two'], Titles);\n    });\n\n\n    it('should fail when non-array given', function () {\n      expect(() => assert.type('foo', Titles))\n        .toThrowError('Expected an instance of ListOfTitles, got \"foo\"!\\n' +\n                      '  - \"foo\" is not instance of array of string/number\\n' +\n                      '    - \"foo\" is not instance of Array');\n    });\n\n\n    it('should fail when an invalid item in the array', function () {\n      expect(() => assert.type(['aaa', true], Titles))\n        .toThrowError('Expected an instance of ListOfTitles, got [\"aaa\", true]!\\n' +\n                      '  - [\"aaa\", true] is not instance of array of string/number\\n' +\n                      '    - true is not instance of string\\n' +\n                      '    - true is not instance of number');\n    });\n  });\n\n\n  // ### assert.structure\n  // Similar to `assert.arrayOf` which checks a content of an array,\n  // `assert.structure` checks if the value is an object with specific properties.\n  describe('structure', function() {\n\n    var User = assert.define('MyUser', function(value) {\n      assert(value).is(assert.structure({\n        name: assert.string,\n        age: assert.number\n      }));\n    });\n\n    it('should pass', function () {\n      assert.type({name: 'Vojta', age: 28}, User);\n    });\n\n\n    it('should fail when non-object given', function () {\n      expect(() => assert.type(123, User))\n        .toThrowError('Expected an instance of MyUser, got 123!\\n' +\n                      '  - 123 is not instance of object with properties name, age\\n' +\n                      '    - 123 is not instance of Object');\n    });\n\n\n    it('should fail when an invalid property', function () {\n      expect(() => assert.type({name: 'Vojta', age: true}, User))\n        .toThrowError('Expected an instance of MyUser, got {name: \"Vojta\", age: true}!\\n' +\n                      '  - {name: \"Vojta\", age: true} is not instance of object with properties name, age\\n' +\n                      '    - true is not instance of number');\n    });\n  });\n});\n\n\n\n// ## Integrating with Traceur\n//\n// Manually calling `assert.type()` in your code is cumbersome. Most of the time, you'll want to\n// have Traceur add the calls to `assert.type()` to your code based on type annotations.\n//\n// This has several advantages:\n// - it's shorter and nicer,\n// - you can easily ignore it when generating production code.\n//\n// You'll need to run Traceur with `--types=true --type-assertions=true --type-assertion-module=\"path/to/assert\"`.\ndescribe('Traceur', function() {\n\n  describe('arguments', function() {\n\n    function reverse(str: string) {\n      return str ? reverse(str.substring(1)) + str[0] : ''\n    }\n\n    it('should pass', function() {\n      expect(reverse('angular')).toBe('ralugna');\n    });\n\n\n    it('should fail', function() {\n      expect(() => reverse(123))\n        .toThrowError('Invalid arguments given!\\n' +\n                      '  - 1st argument has to be an instance of string, got 123');\n    });\n  });\n\n\n  describe('return value', function() {\n\n    function foo(bar): number {\n      return bar;\n    }\n\n    it('should pass', function() {\n      expect(foo(123)).toBe(123);\n    });\n\n\n    it('should fail', function() {\n      expect(() => foo('bar'))\n        .toThrowError('Expected to return an instance of number, got \"bar\"!');\n    });\n  });\n\n\n  describe('variables', function() {\n\n    it('should pass', function() {\n      var count:number = 1;\n    });\n\n\n    it('should fail', function() {\n      expect(() => {\n        var count: number = true;\n      }).toThrowError('Expected an instance of number, got true!');\n    });\n  });\n\n\n  describe('void', function() {\n    function foo(bar): void {\n      return bar;\n    }\n\n    it('should pass when not defined', function() {\n      function nonReturn(): void {}\n      function returnNothing(): void { return; }\n      function returnUndefined(): void { return undefined; }\n\n      foo();\n      foo(undefined);\n      nonReturn();\n      returnNothing();\n      returnUndefined();\n    });\n\n\n    it('should fail when a value returned', function() {\n      expect(() => foo('bar'))\n        .toThrowError('Expected to return an instance of void, got \"bar\"!');\n    });\n\n\n    it('should fail when null returned', function() {\n      expect(() => foo(null))\n        .toThrowError('Expected to return an instance of void, got null!');\n    });\n  });\n\n\n  describe('generics', function() {\n\n    it('should pass', function() {\n      var list:Array<string> = [];\n    });\n\n    // TODO(tbosch): add assertions based on generics to rtts_assert\n\n  });\n\n});\n\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","return assert.returnType(($__placeholder__0), $__placeholder__1)","assert.type($__placeholder__0, $__placeholder__1)","assert.genericType($__placeholder__0)"]}