{"version":3,"sources":["rtts_assert.es6"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/rtts_assert/src/rtts_assert.es6","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/rtts_assert/src/","sourcesContent":["var _global = typeof window === 'object' ? window : global;\n\n// TODO(vojta):\n// - extract into multiple files\n// - different error types\n// - simplify/humanize error messages\n// - throw when invalid input (such as odd number of args into assert.argumentTypes)\n\nvar POSITION_NAME = ['', '1st', '2nd', '3rd'];\nfunction argPositionName(i) {\n  var position = (i / 2) + 1;\n\n  return POSITION_NAME[position] || (position + 'th');\n}\n\nvar primitives;\nvar genericType;\n\nif (typeof $traceurRuntime === 'object') {\n  primitives = $traceurRuntime.type;\n  genericType = $traceurRuntime.genericType;\n} else {\n  // Allow to work without traceur runtime as well!\n  primitives = {\n    any: {name: 'any'},\n    boolean: {name: 'boolean'},\n    number: {name: 'number'},\n    string: {name: 'string'},\n    symbol: {name: 'symbol'},\n    void: {name: 'void'}\n  };\n  genericType = function(type, args) {\n    return {\n      type: type,\n      args: args\n    }\n  }\n}\nObject.keys(primitives).forEach(function(name) {\n  primitives[name].__assertName = name;\n});\n\nexport function proxy(){\n}\n\nfunction assertArgumentTypes(...params) {\n  var actual, type;\n  var currentArgErrors;\n  var errors = [];\n  var msg;\n\n  for (var i = 0, l = params.length; i < l; i = i + 2) {\n    actual = params[i];\n    type = params[i + 1];\n\n    currentArgErrors = [];\n\n    // currentStack = [];\n    //\n\n    if (!isType(actual, type, currentArgErrors)) {\n\n      // console.log(JSON.stringify(errors, null, '  '));\n      // TODO(vojta): print \"an instance of\" only if T starts with uppercase.\n      errors.push(argPositionName(i) + ' argument has to be an instance of ' + prettyPrint(type) + ', got ' + prettyPrint(actual));\n      if (currentArgErrors.length) {\n        errors.push(currentArgErrors);\n      }\n    }\n  }\n\n  if (errors.length) {\n    throw new Error('Invalid arguments given!\\n' + formatErrors(errors));\n  }\n}\n\nfunction prettyPrint(value, depth) {\n  if (typeof(depth) === 'undefined') {\n    depth = 0;\n  }\n\n  if (depth++ > 3) {\n    return '[...]';\n  }\n\n  if (typeof value === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof value === 'string') {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  if (value === null) {\n    return 'null';\n  }\n\n  if (typeof value === 'object') {\n    if (value.__assertName) {\n      return value.__assertName;\n    }\n\n    if (value.map && typeof value.map === 'function') {\n      return '[' + value.map((v) => prettyPrint(v, depth)).join(', ') + ']';\n    }\n\n    var properties = Object.keys(value);\n    var suffix = '}';\n    if (properties.length > 20) {\n      properties.length = 20;\n      suffix = ', ... }';\n    }\n    return '{' + properties.map((p) => p + ': ' + prettyPrint(value[p], depth)).join(', ') + suffix;\n  }\n\n  return value.__assertName || value.name || value.toString();\n}\n\nfunction isType(value, T, errors) {\n  if (T && T.type) {\n    // needed for generics.\n    // TODO(tbosch): read out T.args and do assertions based on them as well!\n    T = T.type;\n  }\n  if (T === primitives.void) {\n    return typeof value === 'undefined';\n  }\n\n  if (_isProxy(value)) {\n    return true;\n  }\n\n  if (T === primitives.any || value === null) {\n    return true;\n  }\n\n  if (T === primitives.string) {\n    return typeof value === 'string';\n  }\n\n  if (T === primitives.number) {\n    return typeof value === 'number';\n  }\n\n  if (T === primitives.boolean) {\n    return typeof value === 'boolean';\n  }\n\n  // var parentStack = currentStack;\n  // currentStack = [];\n\n  // shouldnt this create new stack?\n  if (typeof T.assert === 'function') {\n    var parentStack = currentStack;\n    var isValid;\n    currentStack = errors;\n    try {\n      isValid = T.assert(value) ;\n    } catch (e) {\n      fail(e.message);\n      isValid = false;\n    }\n\n    currentStack = parentStack;\n\n    if (typeof isValid === 'undefined') {\n      isValid = errors.length === 0;\n    }\n\n    return isValid;\n\n    // if (!currentStack.length) {\n    //   currentStack = parentStack;\n    //   return [];\n    // }\n    // var res = currentStack;\n    // currentStack = parentStack;\n    // return ['not instance of ' + prettyPrint(T), res];\n  }\n\n  return value instanceof T;\n\n  // if (!(value instanceof T)) {\n  //   fail('not instance of ' + prettyPrint(T));\n  // }\n\n  // var res = currentStack;\n  // currentStack = parentStack;\n\n  // return res;\n}\n\nfunction _isProxy(obj) {\n  if (!obj || !obj.constructor || !obj.constructor.annotations) return false;\n  return obj.constructor.annotations.filter((a) => a instanceof proxy).length > 0;\n}\n\nfunction formatErrors(errors, indent = '  ') {\n  return errors.map((e) => {\n    if (typeof e === 'string') return indent + '- ' + e;\n    return formatErrors(e, indent + '  ');\n  }).join('\\n');\n}\n\n\n// assert a type of given value and throw if does not pass\nfunction type(actual, T) {\n  var errors = [];\n  // currentStack = [];\n\n  if (!isType(actual, T, errors)) {\n    // console.log(JSON.stringify(errors, null, '  '));\n    // TODO(vojta): print \"an instance of\" only if T starts with uppercase.\n    var msg = 'Expected an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';\n    if (errors.length) {\n      msg += '\\n' + formatErrors(errors);\n    }\n\n    throw new Error(msg);\n  }\n  return actual;\n}\n\nfunction returnType(actual, T) {\n  var errors = [];\n  // currentStack = [];\n\n  if (!isType(actual, T, errors)) {\n    // console.log(JSON.stringify(errors, null, '  '));\n    // TODO(vojta): print \"an instance of\" only if T starts with uppercase.\n    var msg = 'Expected to return an instance of ' + prettyPrint(T) + ', got ' + prettyPrint(actual) + '!';\n    if (errors.length) {\n      msg += '\\n' + formatErrors(errors);\n    }\n\n    throw new Error(msg);\n  }\n\n  return actual;\n}\n\n// TODO(vojta): define these with DSL?\nvar string = type.string = define('string', function(value) {\n  return typeof value === 'string';\n});\n\nvar boolean = type.boolean = define('boolean', function(value) {\n  return typeof value === 'boolean';\n});\n\nvar number = type.number = define('number', function(value) {\n  return typeof value === 'number';\n});\n\nfunction arrayOf(...types) {\n  return assert.define('array of ' + types.map(prettyPrint).join('/'), function(value) {\n    if (assert(value).is(Array)) {\n      for (var item of value) {\n        assert(item).is(...types);\n      }\n    }\n  });\n}\n\nfunction structure(definition) {\n  var properties = Object.keys(definition);\n  return assert.define('object with properties ' + properties.join(', '), function(value) {\n    if (assert(value).is(Object)) {\n      for (var property of properties) {\n        assert(value[property]).is(definition[property]);\n      }\n    }\n  })\n}\n\n\n\n// I'm sorry, bad global state... to make the API nice ;-)\nvar currentStack = [];\n\nfunction fail(message) {\n  currentStack.push(message);\n}\n\nfunction define(classOrName, check) {\n  var cls = classOrName;\n\n  if (typeof classOrName === 'string') {\n    cls = function() {};\n    cls.__assertName = classOrName;\n  }\n\n  cls.assert = function(value) {\n    // var parentStack = currentStack;\n\n    // currentStack = [];\n\n    return check(value);\n\n    // if (currentStack.length) {\n    //   parentStack.push(currentStack)\n    // }\n    // currentStack = parentStack;\n  };\n\n  return cls;\n}\n\n\n\nfunction assert(value) {\n  return {\n    is: function is(...types) {\n      // var errors = []\n      var allErrors = [];\n      var errors;\n\n      for (var type of types) {\n        errors = [];\n\n        if (isType(value, type, errors)) {\n          return true;\n        }\n\n        // if no errors, merge multiple \"is not instance of \" into x/y/z ?\n        allErrors.push(prettyPrint(value) + ' is not instance of ' + prettyPrint(type))\n        if (errors.length) {\n          allErrors.push(errors);\n        }\n      }\n\n      // if (types.length > 1) {\n      //   currentStack.push(['has to be ' + types.map(prettyPrint).join(' or '), ...allErrors]);\n      // } else {\n        currentStack.push(...allErrors);\n      // }\n      return false;\n    }\n  };\n}\n\n\n// PUBLIC API\n\n// asserting API\n\n// throw if no type provided\nassert.type = type;\nfor (var prop in primitives) {\n  assert.type[prop] = primitives[prop];\n}\nassert.genericType = genericType;\n\n// throw if odd number of args\nassert.argumentTypes = assertArgumentTypes;\nassert.returnType = returnType;\n\n\n// define AP;\nassert.define = define;\nassert.fail = fail;\n\n// primitive value type;\nassert.string = string;\nassert.number = number;\nassert.boolean = boolean;\n\n// custom types\nassert.arrayOf = arrayOf;\nassert.structure = structure;\n\n\nexport {assert}\n"]}