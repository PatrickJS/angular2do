{"version":3,"sources":["view_pool.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,WAAU;AAAG,WAAS;AAAG,iBAAe;AAAG,KAAG,CAAC,KAAO,iCAA+B,CAAC;AAC9F,UAAY,WAAS,CAAA,IAAO,SAAO,CAAC;AAEpC,KAAO,MAAM,SAAO;AAGlB,YAAU,CAAE,QAAO,AAAQ,CAAG;ACNhC,SAAK,cAAc,UCAnB,CAAA,MAAK,KAAK,QDA4B,CAAA;ADOlC,OAAG,OAAO,EAAI,GAAC,CAAC;AAChB,OAAG,UAAU,EAAI,SAAO,CAAC;EAC3B;AAAA,AAEA,IAAE,CAAE,AAAD;AGXL,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CHYd,WAAU,QAAQ,AAAC,CAAC,IAAG,OAAO,CAAC,CAAA,CAAI,KAAG,EAAI,CAAA,WAAU,WAAW,AAAC,CAAC,IAAG,OAAO,CAAC,CGZ5C,CHWlC,CAAA,UAAS,KAAK,CGXwC,CAAA;EHa7D;AAEA,KAAG,CAAE,IAAG,AAAiB,CAAG;ACf9B,SAAK,cAAc,MDeN,CAAA,UAAS,KAAK,CCfW,CAAA;ADgBlC,OAAI,IAAG,OAAO,OAAO,EAAI,CAAA,IAAG,UAAU,CAAG;AACvC,gBAAU,KAAK,AAAC,CAAC,IAAG,OAAO,CAAG,KAAG,CAAC,CAAC;IACrC;AAAA,EACF;AAAA,AAEA,OAAK,CAAE,AAAD,CAAG;AACP,SAAO,CAAA,IAAG,OAAO,OAAO,CAAC;EAC3B;AAAA,AACF;AAAA,AIxBA,KAAK,eAAe,AAAC,wBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YFD1B,MAAK,KAAK,UECuC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,uCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YJcb,UAAS,KAAK,GIdsB;EAAC,CAAC,CAAC,CAAC;AJyBrD","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/view_pool.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/","sourcesContent":["import {ListWrapper, MapWrapper, StringMapWrapper, List} from 'angular2/src/facade/collection';\nimport * as viewModule from './view';\n\nexport class ViewPool {\n  _views: List<viewModule.View>;\n  _capacity: number;\n  constructor(capacity: number) {\n    this._views = [];\n    this._capacity = capacity;\n  }\n\n  pop(): viewModule.View {\n    return ListWrapper.isEmpty(this._views) ? null : ListWrapper.removeLast(this._views);\n  }\n\n  push(view: viewModule.View) {\n    if (this._views.length < this._capacity) {\n      ListWrapper.push(this._views, view);\n    }\n  }\n\n  length() {\n    return this._views.length;\n  }\n}\n\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}