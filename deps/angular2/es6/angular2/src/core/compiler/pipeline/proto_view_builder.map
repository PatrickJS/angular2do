{"version":3,"sources":["proto_view_builder.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/pipeline/proto_view_builder.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/pipeline/","sourcesContent":["import {isPresent, BaseException} from 'angular2/src/facade/lang';\nimport {ListWrapper, MapWrapper} from 'angular2/src/facade/collection';\n\nimport {ProtoView} from '../view';\nimport {ChangeDetection} from 'angular2/change_detection';\n\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\nimport {ShadowDomStrategy} from '../shadow_dom_strategy';\n\n/**\n * Creates ProtoViews and forwards variable bindings from parent to children.\n *\n * Fills:\n * - (in parent): CompileElement#inheritedElementBinder.nestedProtoView\n * - CompileElement#inheritedProtoView\n *\n * Reads:\n * - (in parent): CompileElement#inheritedProtoView\n * - (in parent): CompileElement#variableBindings\n * - CompileElement#isViewRoot\n */\nexport class ProtoViewBuilder extends CompileStep {\n  changeDetection:ChangeDetection;\n  _shadowDomStrategy:ShadowDomStrategy;\n  constructor(changeDetection:ChangeDetection, shadowDomStrategy:ShadowDomStrategy) {\n    super();\n    this._shadowDomStrategy = shadowDomStrategy;\n    this.changeDetection = changeDetection;\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var inheritedProtoView = null;\n    if (current.isViewRoot) {\n      var protoChangeDetector = this.changeDetection.createProtoChangeDetector('dummy');\n      inheritedProtoView = new ProtoView(current.element, protoChangeDetector,\n        this._shadowDomStrategy);\n      if (isPresent(parent)) {\n        if (isPresent(parent.inheritedElementBinder.nestedProtoView)) {\n          throw new BaseException('Only one nested view per element is allowed');\n        }\n        parent.inheritedElementBinder.nestedProtoView = inheritedProtoView;\n\n        // When current is a view root, the variable bindings are set to the *nested* proto view.\n        // The root view conceptually signifies a new \"block scope\" (the nested view), to which\n        // the variables are bound.\n        if (isPresent(parent.variableBindings)) {\n          MapWrapper.forEach(parent.variableBindings, (mappedName, varName) => {\n            inheritedProtoView.bindVariable(varName, mappedName);\n          });\n        }\n      }\n    } else if (isPresent(parent)) {\n      inheritedProtoView = parent.inheritedProtoView;\n    }\n\n    // The view's contextWithLocals needs to have a full set of variable names at construction time\n    // in order to prevent new variables from being set later in the lifecycle. Since we don't want\n    // to actually create variable bindings for the $implicit bindings, add to the\n    // protoContextLocals manually.\n    if (isPresent(current.variableBindings)) {\n      MapWrapper.forEach(current.variableBindings, (mappedName, varName) => {\n        MapWrapper.set(inheritedProtoView.protoContextLocals, mappedName, null);\n      });\n    }\n\n    current.inheritedProtoView = inheritedProtoView;\n  }\n}\n","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}