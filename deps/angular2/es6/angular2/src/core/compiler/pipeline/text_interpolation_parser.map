{"version":3,"sources":["text_interpolation_parser.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,aAAY;AAAG,cAAY;AAAG,UAAQ,CAAC,KAAO,2BAAyB,CAAC;AAChF,KAAO,EAAC,GAAE,CAAC,KAAO,0BAAwB,CAAC;AAE3C,KAAO,EAAC,MAAK,CAAC,KAAO,4BAA0B,CAAC;AAEhD,KAAO,EAAC,WAAU,CAAC,KAAO,iBAAe,CAAC;AAC1C,KAAO,EAAC,cAAa,CAAC,KAAO,oBAAkB,CAAC;AAChD,KAAO,EAAC,cAAa,CAAC,KAAO,oBAAkB,CAAC;AAQhD,KAAO,MAAM,wBAAsB,QAAU,YAAU;AAGrD,YAAU,CAAE,MAAK,AAAO,CAAG,CAAA,eAAc,AAAI,CAAG;AClBlD,SAAK,cAAc,QDkBE,OAAK,kBElB1B,CAAA,MAAK,KAAK,KDA4B,CAAA;ADmBlC,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,QAAQ,EAAI,OAAK,CAAC;AACrB,OAAG,iBAAiB,EAAI,gBAAc,CAAC;EACzC;AAAA,AAEA,QAAM,CAAE,MAAK,AAAe,CAAG,CAAA,OAAM,AAAe,CAAG,CAAA,OAAM,AAAe,CAAG;ACxBjF,SAAK,cAAc,QDwBF,eAAa,UAAW,eAAa,UAAW,eAAa,CCxBxC,CAAA;ADyBlC,OAAI,CAAC,OAAM,gBAAgB,CAAA,EAAK,CAAA,OAAM,eAAe,CAAG;AACtD,aAAM;IACR;AAAA,AACI,MAAA,CAAA,OAAM,EAAI,CAAA,OAAM,QAAQ,CAAC;AAC7B,AAAI,MAAA,CAAA,UAAS,EAAI,CAAA,GAAE,WAAW,AAAC,CAAC,GAAE,kBAAkB,AAAC,CAAC,OAAM,CAAC,CAAC,CAAC;AAC/D,QAAS,GAAA,CAAA,CAAA,EAAE,EAAA,CAAG,CAAA,CAAA,EAAE,CAAA,UAAS,OAAO,CAAG,CAAA,CAAA,EAAE,CAAG;AACtC,AAAI,QAAA,CAAA,IAAG,EAAI,CAAA,UAAS,CAAE,CAAA,CAAC,CAAC;AACxB,SAAI,GAAE,WAAW,AAAC,CAAC,IAAG,CAAC,CAAG;AACxB,WAAG,eAAe,AAAC,CAAC,OAAM,CAAG,KAAG,CAAG,EAAA,CAAC,CAAC;MACvC;AAAA,IACF;AAAA,EACF;AAAA,AAEA,eAAa,CAAE,eAAc,CAAG,CAAA,IAAG,CAAG,CAAA,SAAQ,CAAG;AAC/C,AAAI,MAAA,CAAA,GAAE,EAAI,CAAA,IAAG,QAAQ,mBAAmB,AAAC,CAAC,GAAE,UAAU,AAAC,CAAC,IAAG,CAAC,CAAG,CAAA,IAAG,iBAAiB,CAAC,CAAC;AACrF,OAAI,SAAQ,AAAC,CAAC,GAAE,CAAC,CAAG;AAClB,QAAE,QAAQ,AAAC,CAAC,IAAG,CAAG,IAAE,CAAC,CAAC;AACtB,oBAAc,mBAAmB,AAAC,CAAC,SAAQ,CAAG,IAAE,CAAC,CAAC;IACpD;AAAA,EACF;AAAA,AACF;AAAA,AG7CA,KAAK,eAAe,AAAC,uCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YHiBL,MAAK,IElB1B,MAAK,KAAK,OCCuC;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,yDACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YHuBT,cAAa,IAAW,cAAa,IAAW,cAAa,GGvB7B;EAAC,CAAC,CAAC,CAAC;AH6CrD","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/pipeline/text_interpolation_parser.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/pipeline/","sourcesContent":["import {RegExpWrapper, StringWrapper, isPresent} from 'angular2/src/facade/lang';\nimport {DOM} from 'angular2/src/facade/dom';\n\nimport {Parser} from 'angular2/change_detection';\n\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\n/**\n * Parses interpolations in direct text child nodes of the current element.\n *\n * Fills:\n * - CompileElement#textNodeBindings\n */\nexport class TextInterpolationParser extends CompileStep {\n  _parser:Parser;\n  _compilationUnit:any;\n  constructor(parser:Parser, compilationUnit:any) {\n    super();\n    this._parser = parser;\n    this._compilationUnit = compilationUnit;\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    if (!current.compileChildren || current.ignoreBindings) {\n      return;\n    }\n    var element = current.element;\n    var childNodes = DOM.childNodes(DOM.templateAwareRoot(element));\n    for (var i=0; i<childNodes.length; i++) {\n      var node = childNodes[i];\n      if (DOM.isTextNode(node)) {\n        this._parseTextNode(current, node, i);\n      }\n    }\n  }\n\n  _parseTextNode(pipelineElement, node, nodeIndex) {\n    var ast = this._parser.parseInterpolation(DOM.nodeValue(node), this._compilationUnit);\n    if (isPresent(ast)) {\n      DOM.setText(node, ' ');\n      pipelineElement.addTextNodeBinding(nodeIndex, ast);\n    }\n  }\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}