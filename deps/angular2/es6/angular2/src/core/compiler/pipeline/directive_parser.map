{"version":3,"sources":["directive_parser.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/pipeline/directive_parser.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/core/compiler/pipeline/","sourcesContent":["import {isPresent, isBlank, BaseException} from 'angular2/src/facade/lang';\nimport {List, MapWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/facade/dom';\nimport {SelectorMatcher} from '../selector';\nimport {CssSelector} from '../selector';\n\nimport {DirectiveMetadata} from '../directive_metadata';\nimport {Component, Viewport} from '../../annotations/annotations';\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\n/**\n * Parses the directives on a single element. Assumes ViewSplitter has already created\n * <template> elements for template directives.\n *\n * Fills:\n * - CompileElement#decoratorDirectives\n * - CompileElement#templateDirecitve\n * - CompileElement#componentDirective.\n *\n * Reads:\n * - CompileElement#propertyBindings (to find directives contained\n *   in the property bindings)\n * - CompileElement#variableBindings (to find directives contained\n *   in the variable bindings)\n */\nexport class DirectiveParser extends CompileStep {\n  _selectorMatcher:SelectorMatcher;\n  constructor(directives:List<DirectiveMetadata>) {\n    super();\n    this._selectorMatcher = new SelectorMatcher();\n    for (var i=0; i<directives.length; i++) {\n      var directiveMetadata = directives[i];\n      this._selectorMatcher.addSelectable(\n        CssSelector.parse(directiveMetadata.annotation.selector),\n        directiveMetadata\n      );\n    }\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var attrs = current.attrs();\n    var classList = current.classList();\n\n    var cssSelector = new CssSelector();\n    cssSelector.setElement(DOM.nodeName(current.element));\n    for (var i=0; i < classList.length; i++) {\n      cssSelector.addClassName(classList[i]);\n    }\n    MapWrapper.forEach(attrs, (attrValue, attrName) => {\n      if (isBlank(current.propertyBindings) ||\n        isPresent(current.propertyBindings) && !MapWrapper.contains(current.propertyBindings, attrName)) {\n        cssSelector.addAttribute(attrName, attrValue);\n      }\n    });\n    if (isPresent(current.propertyBindings)) {\n      MapWrapper.forEach(current.propertyBindings, (expression, prop) => {\n        cssSelector.addAttribute(prop, expression.source);\n      });\n    }\n    if (isPresent(current.variableBindings)) {\n      MapWrapper.forEach(current.variableBindings, (value, name) => {\n        cssSelector.addAttribute(name, value);\n      });\n    }\n    // Note: We assume that the ViewSplitter already did its work, i.e. template directive should\n    // only be present on <template> elements any more!\n    var isTemplateElement = DOM.isTemplateElement(current.element);\n    this._selectorMatcher.match(cssSelector, (directive) => {\n      if (directive.annotation instanceof Viewport) {\n        if (!isTemplateElement) {\n          throw new BaseException('Viewport directives need to be placed on <template> elements or elements with template attribute!');\n        } else if (isPresent(current.viewportDirective)) {\n          throw new BaseException('Only one template directive per element is allowed!');\n        }\n      } else if (isTemplateElement) {\n        throw new BaseException('Only template directives are allowed on <template> elements!');\n      } else if ((directive.annotation instanceof Component) && isPresent(current.componentDirective)) {\n        throw new BaseException('Only one component directive per element is allowed!');\n      }\n      current.addDirective(directive);\n    });\n  }\n}\n","assert.argumentTypes($__placeholder__0)","assert.genericType($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}