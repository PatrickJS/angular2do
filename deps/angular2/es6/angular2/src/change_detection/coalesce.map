{"version":3,"sources":["coalesce.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/change_detection/coalesce.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/change_detection/","sourcesContent":["import {isPresent} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, Map, MapWrapper} from 'angular2/src/facade/collection';\nimport {RECORD_TYPE_SELF, ProtoRecord} from './proto_record';\n\n/**\n * Removes \"duplicate\" records. It assuming that record evaluation does not\n * have side-effects.\n *\n * Records that are not last in bindings are removed and all the indices\n * of the records that depend on them are updated.\n *\n * Records that are last in bindings CANNOT be removed, and instead are\n * replaced with very cheap SELF records.\n */\nexport function coalesce(records:List<ProtoRecord>):List<ProtoRecord> {\n  var res = ListWrapper.create();\n  var indexMap = MapWrapper.create();\n\n  for (var i = 0; i < records.length; ++i) {\n    var r = records[i];\n    var record = _replaceIndices(r, res.length + 1, indexMap);\n    var matchingRecord = _findMatching(record, res);\n\n    if (isPresent(matchingRecord) && record.lastInBinding) {\n      ListWrapper.push(res, _selfRecord(record, matchingRecord.selfIndex, res.length + 1));\n      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\n\n    } else if (isPresent(matchingRecord) && !record.lastInBinding) {\n      MapWrapper.set(indexMap, r.selfIndex, matchingRecord.selfIndex);\n\n    } else {\n      ListWrapper.push(res, record);\n      MapWrapper.set(indexMap, r.selfIndex, record.selfIndex);\n    }\n  }\n\n  return res;\n}\n\nfunction _selfRecord(r:ProtoRecord, contextIndex:number, selfIndex:number):ProtoRecord {\n  return new ProtoRecord(\n    RECORD_TYPE_SELF,\n    \"self\",\n    null,\n    [],\n    r.fixedArgs,\n    contextIndex,\n    selfIndex,\n    r.bindingMemento,\n    r.directiveMemento,\n    r.expressionAsString,\n    r.lastInBinding,\n    r.lastInDirective\n  );\n}\n\nfunction _findMatching(r:ProtoRecord, rs:List<ProtoRecord>){\n  return ListWrapper.find(rs, (rr) =>\n    rr.mode === r.mode &&\n    rr.funcOrValue === r.funcOrValue &&\n    rr.contextIndex === r.contextIndex &&\n    ListWrapper.equals(rr.args, r.args)\n  );\n}\n\nfunction _replaceIndices(r:ProtoRecord, selfIndex:number, indexMap:Map) {\n  var args = ListWrapper.map(r.args, (a) => _map(indexMap, a));\n  var contextIndex = _map(indexMap, r.contextIndex);\n  return new ProtoRecord(\n    r.mode,\n    r.name,\n    r.funcOrValue,\n    args,\n    r.fixedArgs,\n    contextIndex,\n    selfIndex,\n    r.bindingMemento,\n    r.directiveMemento,\n    r.expressionAsString,\n    r.lastInBinding,\n    r.lastInDirective\n  );\n}\n\nfunction _map(indexMap:Map, value:number) {\n  var r = MapWrapper.get(indexMap, value)\n  return isPresent(r) ? r : value;\n}","assert.argumentTypes($__placeholder__0)","assert.genericType($__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}