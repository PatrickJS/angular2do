{"version":3,"sources":["pipe_registry.js","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/7"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,IAAG;AAAG,YAAU,CAAC,KAAO,iCAA+B,CAAC;AAChE,KAAO,EAAC,OAAM;AAAG,UAAQ;AAAG,cAAY;AAAG,MAAI,CAAC,KAAO,2BAAyB,CAAC;AACjF,KAAO,EAAC,IAAG,CAAC,KAAO,SAAO,CAAC;AAE3B,KAAO,MAAM,aAAW;AAGtB,YAAU,CAAE,MAAK,CAAE;AACjB,OAAG,OAAO,EAAI,OAAK,CAAC;EACtB;AAAA,AAEA,IAAE,CAAE,IAAG,AAAO,CAAG,CAAA,GAAE;AACjB,AAAI,MAAA,CAAA,aAAY,EAAI,CAAA,IAAG,OAAO,CAAE,IAAG,CAAC,CAAC;AACrC,OAAI,OAAM,AAAC,CAAC,aAAY,CAAC,CAAG;AAC1B,UAAM,IAAI,cAAY,AAAC,CAAC,gCAAgC,IAAG,aAAc,GAAE,GAAG,CAAC,CAAC;IAClF;AAAA,AAEI,MAAA,CAAA,cAAa,EAAI,CAAA,WAAU,KAAK,AAAC,CAAC,aAAY,CAChD,EAAC,UAAS,IAAM,CAAA,UAAS,SAAS,AAAC,CAAC,GAAE,CAAC,CAAC,CAAC;AAE3C,OAAI,OAAM,AAAC,CAAC,cAAa,CAAC,CAAG;AAC3B,UAAM,IAAI,cAAY,AAAC,CAAC,gCAAgC,IAAG,aAAc,GAAE,GAAG,CAAC,CAAC;IAClF;AAAA,ACtBJ,SAAO,CAAA,MAAK,WAAW,AAAC,CAAC,CDwBd,cAAa,OAAO,AAAC,EAAC,CCxBU,CDWnB,KAAG,CCXoC,CAAA;EDyB7D;AACF;AAAA,AE1BA,KAAK,eAAe,AAAC,0CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YCD1B,MAAK,KAAK,cDCuC;EAAC,CAAC,CAAC,CAAC;AFyBrD","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/change_detection/pipes/pipe_registry.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/change_detection/pipes/","sourcesContent":["import {List, ListWrapper} from 'angular2/src/facade/collection';\nimport {isBlank, isPresent, BaseException, CONST} from 'angular2/src/facade/lang';\nimport {Pipe} from './pipe';\n\nexport class PipeRegistry {\n  config;\n\n  constructor(config){\n    this.config = config;\n  }\n\n  get(type:string, obj):Pipe {\n    var listOfConfigs = this.config[type];\n    if (isBlank(listOfConfigs)) {\n      throw new BaseException(`Cannot find a pipe for type '${type}' object '${obj}'`);\n    }\n\n    var matchingConfig = ListWrapper.find(listOfConfigs,\n      (pipeConfig) => pipeConfig.supports(obj));\n\n    if (isBlank(matchingConfig)) {\n      throw new BaseException(`Cannot find a pipe for type '${type}' object '${obj}'`);\n    }\n\n    return matchingConfig.create();\n  }\n}","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.$__placeholder__0)"]}