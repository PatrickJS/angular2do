{"version":3,"sources":["annotations.js","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA,KAAO,EAAC,KAAI,CAAC,KAAO,2BAAyB,CAAC;AAY9C,KAAO,MAAM,OAAK;AAEhB,AACA,YAAU,CAAE,KAAI,CAAG;AACjB,OAAG,MAAM,EAAI,MAAI,CAAC;EACpB;AAAA,AACF;AAAA,AClBA,KAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDavB,MAAI,AAAC,EAAC,ECbwC;EAAC,CAAC,CAAC,CAAC;AD+BrD,KAAO,MAAM,cAAY;AAEvB,AACA,YAAU,CAAE,KAAI,CAAG;AACjB,OAAG,MAAM,EAAI,MAAI,CAAC;EACpB;AAAA,AACF;AAAA,ACtCA,KAAK,eAAe,AAAC,8BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDiCvB,MAAI,AAAC,EAAC,ECjCwC;EAAC,CAAC,CAAC,CAAC;ADmDrD,KAAO,MAAM,WAAS;AAEpB,AACA,YAAU,CAAE,KAAI,CAAG;AACjB,OAAG,MAAM,EAAI,MAAI,CAAC;EACpB;AAAA,AACF;AAAA,AC1DA,KAAK,eAAe,AAAC,2BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDqDvB,MAAI,AAAC,EAAC,ECrDwC;EAAC,CAAC,CAAC,CAAC;ADsFrD,KAAO,MAAM,qBAAmB;AAC9B,AACA,YAAU,CAAE,AAAD,CAAG,GACd;AAAA,AACF;AAAA,AC3FA,KAAK,eAAe,AAAC,qCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDuFvB,MAAI,AAAC,EAAC,ECvFwC;EAAC,CAAC,CAAC,CAAC;AD0FrD","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/di/annotations.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/di/","sourcesContent":["import {CONST} from \"angular2/src/facade/lang\";\n\n/**\n * A parameter annotation that creates a synchronous eager dependency.\n *\n * ```\n * class AComponent {\n *   constructor(@Inject('aServiceToken') aService) {}\n * }\n * ```\n *\n */\nexport class Inject {\n  token;\n  @CONST()\n  constructor(token) {\n    this.token = token;\n  }\n}\n\n/**\n * A parameter annotation that creates an asynchronous eager dependency.\n *\n * ```\n * class AComponent {\n *   constructor(@InjectPromise('aServiceToken') aServicePromise) {\n *     aServicePromise.then(aService => ...);\n *   }\n * }\n * ```\n *\n */\nexport class InjectPromise {\n  token;\n  @CONST()\n  constructor(token) {\n    this.token = token;\n  }\n}\n\n/**\n * A parameter annotation that creates a synchronous lazy dependency.\n *\n * ```\n * class AComponent {\n *   constructor(@InjectLazy('aServiceToken') aServiceFn) {\n *     aService = aServiceFn();\n *   }\n * }\n * ```\n *\n */\nexport class InjectLazy {\n  token;\n  @CONST()\n  constructor(token) {\n    this.token = token;\n  }\n}\n\n/**\n * `DependencyAnnotation` is used by the framework to extend DI.\n *\n * Only annotations implementing `DependencyAnnotation` will be added\n * to the list of dependency properties.\n *\n * For example:\n *\n * ```\n * class Parent extends DependencyAnnotation {}\n * class NotDependencyProperty {}\n *\n * class AComponent {\n *   constructor(@Parent @NotDependencyProperty aService:AService) {}\n * }\n * ```\n *\n * will create the following dependency:\n *\n * ```\n * new Dependency(Key.get(AService), [new Parent()])\n * ```\n *\n * The framework can use `new Parent()` to handle the `aService` dependency\n * in a specific way.\n *\n */\nexport class DependencyAnnotation {\n  @CONST()\n  constructor() {\n  }\n}","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}