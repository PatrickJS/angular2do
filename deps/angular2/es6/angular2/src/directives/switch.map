{"version":3,"sources":["switch.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/836","@traceur/generated/TemplateParser/837","@traceur/generated/TemplateParser/25","@traceur/generated/TemplateParser/838","@traceur/generated/TemplateParser/839","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/directives/switch.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/directives/","sourcesContent":["import {Decorator, Viewport} from 'angular2/src/core/annotations/annotations';\nimport {ViewContainer} from 'angular2/src/core/compiler/view_container';\nimport {NgElement} from 'angular2/src/core/dom/element';\nimport {isPresent, isBlank, normalizeBlank} from 'angular2/src/facade/lang';\nimport {ListWrapper, List, MapWrapper, Map} from 'angular2/src/facade/collection';\nimport {Parent} from 'angular2/src/core/annotations/visibility';\n\n/**\n * The `Switch` directive is used to conditionally swap DOM structure on your template based on a\n * scope expression.\n * Elements within `Switch` but without `SwitchWhen` or `SwitchDefault` directives will be\n * preserved at the location as specified in the template.\n *\n * `Switch` simply chooses nested elements and makes them visible based on which element matches\n * the value obtained from the evaluated expression. In other words, you define a container element\n * (where you place the directive), place an expression on the **`[switch]=\"...\"` attribute**),\n * define any inner elements inside of the directive and place a `[switch-when]` attribute per\n * element.\n * The when attribute is used to inform Switch which element to display when the expression is\n * evaluated. If a matching expression is not found via a when attribute then an element with the\n * default attribute is displayed.\n *\n * Example:\n *\n * ```\n * <ANY [switch]=\"expression\">\n *   <template [switch-when]=\"whenExpression1\">...</template>\n *   <template [switch-when]=\"whenExpression1\">...</template>\n *   <template [switch-default]>...</template>\n * </ANY>\n * ```\n */\n@Decorator({\n  selector: '[switch]',\n  bind: {\n    'value': 'switch'\n  }\n})\nexport class Switch {\n  _switchValue: any;\n  _useDefault: boolean;\n  _valueViewContainers: Map;\n  _activeViewContainers: List<ViewContainer>;\n\n  constructor() {\n    this._valueViewContainers = MapWrapper.create();\n    this._activeViewContainers = ListWrapper.create();\n    this._useDefault = false;\n  }\n\n  set value(value) {\n    // Empty the currently active ViewContainers\n    this._emptyAllActiveViewContainers();\n\n    // Add the ViewContainers matching the value (with a fallback to default)\n    this._useDefault = false;\n    var containers = MapWrapper.get(this._valueViewContainers, value);\n    if (isBlank(containers)) {\n      this._useDefault = true;\n      containers = normalizeBlank(MapWrapper.get(this._valueViewContainers, _whenDefault));\n    }\n    this._activateViewContainers(containers);\n\n    this._switchValue = value;\n  }\n\n  _onWhenValueChanged(oldWhen, newWhen, viewContainer: ViewContainer) {\n    this._deregisterViewContainer(oldWhen, viewContainer);\n    this._registerViewContainer(newWhen, viewContainer);\n\n    if (oldWhen === this._switchValue) {\n      viewContainer.remove();\n      ListWrapper.remove(this._activeViewContainers, viewContainer);\n    } else if (newWhen === this._switchValue) {\n      if (this._useDefault) {\n        this._useDefault = false;\n        this._emptyAllActiveViewContainers();\n      }\n      viewContainer.create();\n      ListWrapper.push(this._activeViewContainers, viewContainer);\n    }\n\n    // Switch to default when there is no more active ViewContainers\n    if (this._activeViewContainers.length === 0 && !this._useDefault) {\n      this._useDefault = true;\n      this._activateViewContainers(MapWrapper.get(this._valueViewContainers, _whenDefault));\n    }\n  }\n\n  _emptyAllActiveViewContainers() {\n    var activeContainers = this._activeViewContainers;\n    for (var i = 0; i < activeContainers.length; i++) {\n      activeContainers[i].remove();\n    }\n    this._activeViewContainers = ListWrapper.create();\n  }\n\n  _activateViewContainers(containers: List<ViewContainer>) {\n    // TODO(vicb): assert(this._activeViewContainers.length === 0);\n    if (isPresent(containers)) {\n      for (var i = 0; i < containers.length; i++) {\n        containers[i].create();\n      }\n      this._activeViewContainers = containers;\n    }\n  }\n\n  _registerViewContainer(value, container: ViewContainer) {\n    var containers = MapWrapper.get(this._valueViewContainers, value);\n    if (isBlank(containers)) {\n      containers = ListWrapper.create();\n      MapWrapper.set(this._valueViewContainers, value, containers);\n    }\n    ListWrapper.push(containers, container);\n  }\n\n  _deregisterViewContainer(value, container: ViewContainer) {\n    // `_whenDefault` is used a marker for non-registered whens\n    if (value == _whenDefault) return;\n    var containers = MapWrapper.get(this._valueViewContainers, value);\n    if (containers.length == 1) {\n      MapWrapper.delete(this._valueViewContainers, value);\n    } else {\n      ListWrapper.remove(containers, container);\n    }\n  }\n}\n\n/**\n * Defines a case statement as an expression.\n *\n * If multiple `SwitchWhen` match the `Switch` value, all of them are displayed.\n *\n * Example:\n *\n * ```\n * // match against a context variable\n * <template [switch-when]=\"contextVariable\">...</template>\n *\n * // match against a constant string\n * <template [switch-when]=\"'stringValue'\">...</template>\n * ```\n */\n@Viewport({\n  selector: '[switch-when]',\n  bind: {\n    'when' : 'switch-when'\n  }\n})\nexport class SwitchWhen {\n  _value: any;\n  _switch: Switch;\n  _viewContainer: ViewContainer;\n\n  constructor(el: NgElement, viewContainer: ViewContainer, @Parent() sswitch: Switch) {\n    // `_whenDefault` is used as a marker for a not yet initialized value\n    this._value = _whenDefault;\n    this._switch = sswitch;\n    this._viewContainer = viewContainer;\n  }\n\n  set when(value) {\n    this._switch._onWhenValueChanged(this._value, value, this._viewContainer);\n    this._value = value;\n  }\n}\n\n\n/**\n * Defines a default case statement.\n *\n * Default case statements are displayed when no `SwitchWhen` match the `switch` value.\n *\n * Example:\n *\n * ```\n * <template [switch-default]>...</template>\n * ```\n */\n@Viewport({\n  selector: '[switch-default]'\n})\nexport class SwitchDefault {\n  constructor(viewContainer: ViewContainer, @Parent() sswitch: Switch) {\n    sswitch._registerViewContainer(_whenDefault, viewContainer);\n  }\n}\n\nvar _whenDefault = new Object();\n","assert.argumentTypes($__placeholder__0)","assert.type.any","assert.type.any","assert.genericType($__placeholder__0)","assert.type.any","assert.type.any","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}