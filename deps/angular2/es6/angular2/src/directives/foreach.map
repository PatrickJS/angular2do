{"version":3,"sources":["foreach.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/src/directives/foreach.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/src/directives/","sourcesContent":["import {Viewport} from 'angular2/src/core/annotations/annotations';\nimport {ViewContainer} from 'angular2/src/core/compiler/view_container';\nimport {View} from 'angular2/src/core/compiler/view';\nimport {isPresent, isBlank} from 'angular2/src/facade/lang';\nimport {ListWrapper} from 'angular2/src/facade/collection';\n\n@Viewport({\n  selector: '[foreach][in]',\n  bind: {\n    'iterableChanges': 'in | iterableDiff'\n  }\n})\nexport class Foreach  {\n  viewContainer: ViewContainer;\n  constructor(viewContainer:ViewContainer) {\n    super();\n    this.viewContainer = viewContainer;\n  }\n\n  set iterableChanges(changes) {\n    if (isBlank(changes)) {\n      this.viewContainer.clear();\n      return;\n    }\n\n    // TODO(rado): check if change detection can produce a change record that is\n    // easier to consume than current.\n    var recordViewTuples = [];\n    changes.forEachRemovedItem(\n      (removedRecord) => ListWrapper.push(recordViewTuples, new RecordViewTuple(removedRecord, null))\n    );\n\n    changes.forEachMovedItem(\n      (movedRecord) => ListWrapper.push(recordViewTuples, new RecordViewTuple(movedRecord, null))\n    );\n\n    var insertTuples = Foreach.bulkRemove(recordViewTuples, this.viewContainer);\n\n    changes.forEachAddedItem(\n      (addedRecord) => ListWrapper.push(insertTuples, new RecordViewTuple(addedRecord, null))\n    );\n\n    Foreach.bulkInsert(insertTuples, this.viewContainer);\n\n    for (var i = 0; i < insertTuples.length; i++) {\n      this.perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n  }\n\n  perViewChange(view, record) {\n    view.setLocal('\\$implicit', record.item);\n    view.setLocal('index', record.currentIndex);\n  }\n\n  static bulkRemove(tuples, viewContainer) {\n    tuples.sort((a, b) => a.record.previousIndex - b.record.previousIndex);\n    var movedTuples = [];\n    for (var i = tuples.length - 1; i >= 0; i--) {\n      var tuple = tuples[i];\n      // separate moved views from removed views.\n      if (isPresent(tuple.record.currentIndex)) {\n        tuple.view = viewContainer.detach(tuple.record.previousIndex);\n        ListWrapper.push(movedTuples, tuple);\n      } else {\n        viewContainer.remove(tuple.record.previousIndex);\n      }\n    }\n    return movedTuples;\n  }\n\n  static bulkInsert(tuples, viewContainer) {\n    tuples.sort((a, b) => a.record.currentIndex - b.record.currentIndex);\n    for (var i = 0; i < tuples.length; i++) {\n      var tuple = tuples[i];\n      if (isPresent(tuple.view)) {\n        viewContainer.insert(tuple.view, tuple.record.currentIndex);\n      } else {\n        tuple.view = viewContainer.create(tuple.record.currentIndex);\n      }\n    }\n    return tuples;\n  }\n}\n\nclass RecordViewTuple {\n  view: View;\n  record: any;\n  constructor(record, view) {\n    this.record = record;\n    this.view = view;\n  }\n}\n","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}