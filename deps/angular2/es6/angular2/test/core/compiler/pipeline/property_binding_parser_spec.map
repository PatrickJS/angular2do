{"version":3,"sources":["property_binding_parser_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,QAAO;AAAG,WAAS;AAAG,GAAC;AAAG,OAAK;AAAG,IAAE;AAAG,UAAQ;AAAG,GAAC,CAAC,KAAO,oBAAkB,CAAC;AACtF,KAAO,EAAC,qBAAoB,CAAC,KAAO,8DAA4D,CAAC;AACjG,KAAO,EAAC,eAAc,CAAC,KAAO,uDAAqD,CAAC;AACpF,KAAO,EAAC,UAAS,CAAC,KAAO,iCAA+B,CAAC;AACzD,KAAO,EAAC,cAAa,CAAC,KAAO,sDAAoD,CAAC;AAClF,KAAO,EAAC,WAAU,CAAC,KAAO,mDAAiD,CAAA;AAC3E,KAAO,EAAC,cAAa,CAAC,KAAO,sDAAoD,CAAC;AAClF,KAAO,EAAC,KAAI;AAAG,OAAK,CAAC,KAAO,4BAA0B,CAAC;AAEvD,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,uBAAsB,CAAG,EAAC,AAAD,IAAM;AACtC,WAAS,eAAa,CAAE,cAAa,EAAI,MAAI,CAAG;AAC9C,WAAO,IAAI,gBAAc,AAAC,CAAC,CACzB,GAAI,SAAO,AAAC,CAAC,CAAC,MAAK,CAAG,CAAA,OAAM,CAAG,CAAA,OAAM,IAAM;AAAE,cAAM,eAAe,EAAI,eAAa,CAAC;MAAE,CAAC,CACvF,IAAI,sBAAoB,AAAC,CAAC,GAAI,OAAK,AAAC,CAAC,GAAI,MAAI,AAAC,EAAC,CAAC,CAAG,KAAG,CAAC,CAAC,CAAC,CAAC;IAC9D;AAAA,AAEA,KAAC,AAAC,CAAC,uDAAsD,CAAG,EAAC,AAAD,IAAM;AAChE,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,CAAC,IAAG,CAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,qBAAoB,CAAC,CAAC,CAAC;AACrE,WAAK,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;IAChD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,yBAAwB,CAAG,EAAC,AAAD,IAAM;AAClC,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,qBAAoB,CAAC,CAAC,CAAC;AACjE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,IAAE,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,GAAE,CAAC,CAAC;IAC9E,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,4BAA2B,CAAG,EAAC,AAAD,IAAM;AACrC,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,wBAAuB,CAAC,CAAC,CAAC;AACpE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,IAAE,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,GAAE,CAAC,CAAC;IAC9E,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oCAAmC,CAAG,EAAC,AAAD,IAAM;AAG7C,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,uBAAsB,CAAC,CAAC,CAAC;AACnE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,IAAE,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,OAAM,CAAC,CAAC;IAClF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2BAA0B,CAAG,EAAC,AAAD,IAAM;AACpC,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,iCAAgC,CAAC,CAAC,CAAC;AAC7E,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,IAAE,CAAC,CAAC,QAAQ,AAAC,CAAC,GAAE,CAAC,CAAC;IACvE,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,0DAAyD,CAAG,EAAC,AAAD,IAAM;AACnE,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,iCAAgC,CAAC,CAAC,CAAC;AAC7E,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,aAAW,CAAC,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;IACrF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,iFAAgF,CAAG,EAAC,AAAD,IAAM;AAC1F,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,8BAA6B,CAAC,CAAC,CAAC;AAC1E,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,aAAW,CAAC,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;IACrF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,wDAAuD,CAAG,EAAC,AAAD,IAAM;AACjE,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,oBAAmB,CAAC,CAAC,CAAC;AAChE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,aAAW,CAAC,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;IACrF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,+EAA8E,CAAG,EAAC,AAAD,IAAM;AACxF,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,iBAAgB,CAAC,CAAC,CAAC;AAC7D,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,iBAAiB,CAAG,aAAW,CAAC,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;IACrF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,yBAAwB,CAAG,EAAC,AAAD,IAAM;AAClC,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,2BAA0B,CAAC,CAAC,CAAC;AACvE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,cAAc,CAAG,QAAM,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,KAAI,CAAC,CAAC;AAE/E,YAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,6BAA4B,CAAC,CAAC,CAAC;AACrE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,cAAc,CAAG,UAAQ,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,KAAI,CAAC,CAAC;IAEnF,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,0BAAyB,CAAG,EAAC,AAAD,IAAM;AACnC,AAAI,QAAA,CAAA,OAAM,EAAI,CAAA,cAAa,AAAC,EAAC,QAAQ,AAAC,CAAC,EAAC,AAAC,CAAC,4BAA2B,CAAC,CAAC,CAAC;AACxE,WAAK,AAAC,CAAC,UAAS,IAAI,AAAC,CAAC,OAAM,CAAE,CAAA,CAAC,cAAc,CAAG,QAAM,CAAC,OAAO,CAAC,QAAQ,AAAC,CAAC,KAAI,CAAC,CAAC;IACjF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA,AAEA,IAAM,SAAO,QAAU,YAAU;AAE/B,YAAU,CAAE,OAAM,CAAG;AACnB,QAAI,AAAC,EAAC,CAAC;AACP,OAAG,eAAe,EAAI,QAAM,CAAC;EAC/B;AAAA,AACA,QAAM,CAAE,MAAK,AAAe,CAAG,CAAA,OAAM,AAAe,CAAG,CAAA,OAAM,AAAe,CAAG;ACtFjF,SAAK,cAAc,QDsFF,eAAa,UAAW,eAAa,UAAW,eAAa,CCtFxC,CAAA;ADuFlC,OAAG,eAAe,AAAC,CAAC,MAAK,CAAG,QAAM,CAAG,QAAM,CAAC,CAAC;EAC/C;AAAA,AACF;AEzFA,KAAK,eAAe,AAAC,0CACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YFqFT,cAAa,IAAW,cAAa,IAAW,cAAa,GErF7B;EAAC,CAAC,CAAC,CAAC;AFyFrD","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/pipeline/property_binding_parser_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/pipeline/","sourcesContent":["import {describe, beforeEach, it, expect, iit, ddescribe, el} from 'angular2/test_lib';\nimport {PropertyBindingParser} from 'angular2/src/core/compiler/pipeline/property_binding_parser';\nimport {CompilePipeline} from 'angular2/src/core/compiler/pipeline/compile_pipeline';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {CompileElement} from 'angular2/src/core/compiler/pipeline/compile_element';\nimport {CompileStep} from 'angular2/src/core/compiler/pipeline/compile_step'\nimport {CompileControl} from 'angular2/src/core/compiler/pipeline/compile_control';\nimport {Lexer, Parser} from 'angular2/change_detection';\n\nexport function main() {\n  describe('PropertyBindingParser', () => {\n    function createPipeline(ignoreBindings = false) {\n      return new CompilePipeline([\n        new MockStep((parent, current, control) => { current.ignoreBindings = ignoreBindings; }),\n        new PropertyBindingParser(new Parser(new Lexer()), null)]);\n    }\n\n    it('should not parse bindings when ignoreBindings is true', () => {\n      var results = createPipeline(true).process(el('<div [a]=\"b\"></div>'));\n      expect(results[0].propertyBindings).toBe(null);\n    });\n\n    it('should detect [] syntax', () => {\n      var results = createPipeline().process(el('<div [a]=\"b\"></div>'));\n      expect(MapWrapper.get(results[0].propertyBindings, 'a').source).toEqual('b');\n    });\n\n    it('should detect bind- syntax', () => {\n      var results = createPipeline().process(el('<div bind-a=\"b\"></div>'));\n      expect(MapWrapper.get(results[0].propertyBindings, 'a').source).toEqual('b');\n    });\n\n    it('should detect interpolation syntax', () => {\n      // Note: we don't test all corner cases of interpolation as we assume shared functionality between text interpolation\n      // and attribute interpolation.\n      var results = createPipeline().process(el('<div a=\"{{b}}\"></div>'));\n      expect(MapWrapper.get(results[0].propertyBindings, 'a').source).toEqual('{{b}}');\n    });\n\n    it('should detect var- syntax', () => {\n      var results = createPipeline().process(el('<template var-a=\"b\"></template>'));\n      expect(MapWrapper.get(results[0].variableBindings, 'b')).toEqual('a');\n    });\n\n    it('should store variable binding for a non-template element', () => {\n      var results = createPipeline().process(el('<p var-george=\"washington\"></p>'));\n      expect(MapWrapper.get(results[0].variableBindings, 'washington')).toEqual('george');\n    });\n\n    it('should store variable binding for a non-template element using shorthand syntax', () => {\n      var results = createPipeline().process(el('<p #george=\"washington\"></p>'));\n      expect(MapWrapper.get(results[0].variableBindings, 'washington')).toEqual('george');\n    });\n\n    it('should store a variable binding with an implicit value', () => {\n      var results = createPipeline().process(el('<p var-george></p>'));\n      expect(MapWrapper.get(results[0].variableBindings, '\\$implicit')).toEqual('george');\n    });\n\n    it('should store a variable binding with an implicit value using shorthand syntax', () => {\n      var results = createPipeline().process(el('<p #george></p>'));\n      expect(MapWrapper.get(results[0].variableBindings, '\\$implicit')).toEqual('george');\n    });\n\n    it('should detect () syntax', () => {\n      var results = createPipeline().process(el('<div (click)=\"b()\"></div>'));\n      expect(MapWrapper.get(results[0].eventBindings, 'click').source).toEqual('b()');\n      // \"(click[])\" is not an expected syntax and is only used to validate the regexp\n      results = createPipeline().process(el('<div (click[])=\"b()\"></div>'));\n      expect(MapWrapper.get(results[0].eventBindings, 'click[]').source).toEqual('b()');\n\n    });\n\n    it('should detect on- syntax', () => {\n      var results = createPipeline().process(el('<div on-click=\"b()\"></div>'));\n      expect(MapWrapper.get(results[0].eventBindings, 'click').source).toEqual('b()');\n    });\n  });\n}\n\nclass MockStep extends CompileStep {\n  processClosure:Function;\n  constructor(process) {\n    super();\n    this.processClosure = process;\n  }\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    this.processClosure(parent, current, control);\n  }\n}\n","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}