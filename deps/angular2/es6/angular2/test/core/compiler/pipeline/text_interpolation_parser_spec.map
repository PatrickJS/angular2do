{"version":3,"sources":["text_interpolation_parser_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/pipeline/text_interpolation_parser_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/pipeline/","sourcesContent":["import {describe, beforeEach, expect, it, iit, ddescribe, el} from 'angular2/test_lib';\nimport {TextInterpolationParser} from 'angular2/src/core/compiler/pipeline/text_interpolation_parser';\nimport {CompilePipeline} from 'angular2/src/core/compiler/pipeline/compile_pipeline';\nimport {MapWrapper} from 'angular2/src/facade/collection';\nimport {Lexer, Parser} from 'angular2/change_detection';\nimport {CompileElement} from 'angular2/src/core/compiler/pipeline/compile_element';\nimport {CompileStep} from 'angular2/src/core/compiler/pipeline/compile_step'\nimport {CompileControl} from 'angular2/src/core/compiler/pipeline/compile_control';\nimport {IgnoreChildrenStep} from './pipeline_spec';\n\nexport function main() {\n  describe('TextInterpolationParser', () => {\n    function createPipeline(ignoreBindings = false) {\n      return new CompilePipeline([\n        new MockStep((parent, current, control) => { current.ignoreBindings = ignoreBindings; }),\n        new IgnoreChildrenStep(),\n        new TextInterpolationParser(new Parser(new Lexer()), null)\n      ]);\n    }\n\n    it('should not look for text interpolation when ignoreBindings is true', () => {\n      var results = createPipeline(true).process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'));\n      expect(results[0].textNodeBindings).toBe(null);\n    });\n\n    it('should find text interpolation in normal elements', () => {\n      var results = createPipeline().process(el('<div>{{expr1}}<span></span>{{expr2}}</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}\");\n      expect(MapWrapper.get(bindings, 2).source).toEqual(\"{{expr2}}\");\n    });\n\n    it('should find text interpolation in template elements', () => {\n      var results = createPipeline().process(el('<template>{{expr1}}<span></span>{{expr2}}</template>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}\");\n      expect(MapWrapper.get(bindings, 2).source).toEqual(\"{{expr2}}\");\n    });\n\n    it('should allow multiple expressions', () => {\n      var results = createPipeline().process(el('<div>{{expr1}}{{expr2}}</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{expr1}}{{expr2}}\");\n    });\n\n    it('should not interpolate when compileChildren is false', () => {\n      var results = createPipeline().process(el('<div>{{included}}<span ignore-children>{{excluded}}</span></div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"{{included}}\");\n      expect(results[1].textNodeBindings).toBe(null);\n    });\n\n    it('should allow fixed text before, in between and after expressions', () => {\n      var results = createPipeline().process(el('<div>a{{expr1}}b{{expr2}}c</div>'));\n      var bindings = results[0].textNodeBindings;\n      expect(MapWrapper.get(bindings, 0).source).toEqual(\"a{{expr1}}b{{expr2}}c\");\n    });\n\n    it('should escape quotes in fixed parts', () => {\n      var results = createPipeline().process(el(\"<div>'\\\"a{{expr1}}</div>\"));\n      expect(MapWrapper.get(results[0].textNodeBindings, 0).source).toEqual(\"'\\\"a{{expr1}}\");\n    });\n  });\n}\n\nclass MockStep extends CompileStep {\n  processClosure:Function;\n  constructor(process) {\n    super();\n    this.processClosure = process;\n  }\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    this.processClosure(parent, current, control);\n  }\n}\n","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}