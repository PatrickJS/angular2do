{"version":3,"sources":["pipeline_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/pipeline/pipeline_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/core/compiler/pipeline/","sourcesContent":["import {describe, beforeEach, it, expect, iit, ddescribe, el} from 'angular2/test_lib';\nimport {ListWrapper, List, MapWrapper} from 'angular2/src/facade/collection';\nimport {DOM} from 'angular2/src/facade/dom';\nimport {isPresent, NumberWrapper, StringWrapper} from 'angular2/src/facade/lang';\n\nimport {CompilePipeline} from 'angular2/src/core/compiler/pipeline/compile_pipeline';\nimport {CompileElement} from 'angular2/src/core/compiler/pipeline/compile_element';\nimport {CompileStep} from 'angular2/src/core/compiler/pipeline/compile_step'\nimport {CompileControl} from 'angular2/src/core/compiler/pipeline/compile_control';\n\nexport function main() {\n  describe('compile_pipeline', () => {\n    describe('children compilation', () => {\n      it('should walk the tree in depth first order including template contents', () => {\n        var element = el('<div id=\"1\"><template id=\"2\"><span id=\"3\"></span></template></div>');\n\n        var step0Log = [];\n        var results = new CompilePipeline([createLoggerStep(step0Log)]).process(element);\n\n        expect(step0Log).toEqual(['1', '1<2', '2<3']);\n        expect(resultIdLog(results)).toEqual(['1', '2', '3']);\n      });\n\n      it('should stop walking the tree when compileChildren is false', () => {\n        var element = el('<div id=\"1\"><template id=\"2\" ignore-children><span id=\"3\"></span></template></div>');\n\n        var step0Log = [];\n        var pipeline = new CompilePipeline([new IgnoreChildrenStep(), createLoggerStep(step0Log)]);\n        var results = pipeline.process(element);\n\n        expect(step0Log).toEqual(['1', '1<2']);\n        expect(resultIdLog(results)).toEqual(['1', '2']);\n      });\n    });\n\n    describe('control.addParent', () => {\n      it('should report the new parent to the following processor and the result', () => {\n        var element = el('<div id=\"1\"><span wrap0=\"1\" id=\"2\"><b id=\"3\"></b></span></div>');\n        var step0Log = [];\n        var step1Log = [];\n        var pipeline = new CompilePipeline([\n          createWrapperStep('wrap0', step0Log),\n          createLoggerStep(step1Log)\n        ]);\n        var result = pipeline.process(element);\n        expect(step0Log).toEqual(['1', '1<2', '2<3']);\n        expect(step1Log).toEqual(['1', '1<wrap0#0', 'wrap0#0<2', '2<3']);\n        expect(resultIdLog(result)).toEqual(['1', 'wrap0#0', '2', '3']);\n      });\n\n      it('should allow to add a parent by multiple processors to the same element', () => {\n        var element = el('<div id=\"1\"><span wrap0=\"1\" wrap1=\"1\" id=\"2\"><b id=\"3\"></b></span></div>');\n        var step0Log = [];\n        var step1Log = [];\n        var step2Log = [];\n        var pipeline = new CompilePipeline([\n          createWrapperStep('wrap0', step0Log),\n          createWrapperStep('wrap1', step1Log),\n          createLoggerStep(step2Log)\n        ]);\n        var result = pipeline.process(element);\n        expect(step0Log).toEqual(['1', '1<2', '2<3']);\n        expect(step1Log).toEqual(['1', '1<wrap0#0', 'wrap0#0<2', '2<3']);\n        expect(step2Log).toEqual(['1', '1<wrap0#0', 'wrap0#0<wrap1#0', 'wrap1#0<2', '2<3']);\n        expect(resultIdLog(result)).toEqual(['1', 'wrap0#0', 'wrap1#0', '2', '3']);\n      });\n\n      it('should allow to add a parent by multiple processors to different elements', () => {\n        var element = el('<div id=\"1\"><span wrap0=\"1\" id=\"2\"><b id=\"3\" wrap1=\"1\"></b></span></div>');\n        var step0Log = [];\n        var step1Log = [];\n        var step2Log = [];\n        var pipeline = new CompilePipeline([\n          createWrapperStep('wrap0', step0Log),\n          createWrapperStep('wrap1', step1Log),\n          createLoggerStep(step2Log)\n        ]);\n        var result = pipeline.process(element);\n        expect(step0Log).toEqual(['1', '1<2', '2<3']);\n        expect(step1Log).toEqual(['1', '1<wrap0#0', 'wrap0#0<2', '2<3']);\n        expect(step2Log).toEqual(['1', '1<wrap0#0', 'wrap0#0<2', '2<wrap1#0', 'wrap1#0<3']);\n        expect(resultIdLog(result)).toEqual(['1', 'wrap0#0', '2', 'wrap1#0', '3']);\n      });\n\n      it('should allow to add multiple parents by the same processor', () => {\n        var element = el('<div id=\"1\"><span wrap0=\"2\" id=\"2\"><b id=\"3\"></b></span></div>');\n        var step0Log = [];\n        var step1Log = [];\n        var pipeline = new CompilePipeline([\n          createWrapperStep('wrap0', step0Log),\n          createLoggerStep(step1Log)\n        ]);\n        var result = pipeline.process(element);\n        expect(step0Log).toEqual(['1', '1<2', '2<3']);\n        expect(step1Log).toEqual(['1', '1<wrap0#0', 'wrap0#0<wrap0#1', 'wrap0#1<2', '2<3']);\n        expect(resultIdLog(result)).toEqual(['1', 'wrap0#0', 'wrap0#1', '2', '3']);\n      });\n\n    });\n\n    describe('control.addChild', () => {\n      it('should report the new child to all processors and the result', () => {\n        var element = el('<div id=\"1\"><div id=\"2\"></div></div>');\n        var resultLog = [];\n        var newChild = new CompileElement(el('<div id=\"3\"></div>'));\n        var pipeline = new CompilePipeline([\n          new MockStep((parent, current, control) => {\n            if (StringWrapper.equals(current.element.id, '1')) {\n              control.addChild(newChild);\n            }\n          }),\n          createLoggerStep(resultLog)\n        ]);\n        var result = pipeline.process(element);\n        expect(result[2]).toBe(newChild);\n        expect(resultLog).toEqual(['1', '1<2', '1<3']);\n        expect(resultIdLog(result)).toEqual(['1', '2', '3']);\n      });\n    });\n\n  });\n}\n\nclass MockStep extends CompileStep {\n  processClosure:Function;\n  constructor(process) {\n    super();\n    this.processClosure = process;\n  }\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    this.processClosure(parent, current, control);\n  }\n}\n\nexport class IgnoreChildrenStep extends CompileStep {\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var attributeMap = DOM.attributeMap(current.element);\n    if (MapWrapper.contains(attributeMap, 'ignore-children')) {\n      current.compileChildren = false;\n    }\n  }\n}\n\nfunction logEntry(log, parent, current) {\n  var parentId = '';\n  if (isPresent(parent)) {\n    parentId = parent.element.getAttribute('id')+'<';\n  }\n  ListWrapper.push(log, parentId+current.element.getAttribute('id'));\n}\n\nfunction createLoggerStep(log) {\n  return new MockStep((parent, current, control) => {\n    logEntry(log, parent, current);\n  });\n}\n\nfunction createWrapperStep(wrapperId, log) {\n  var nextElementId = 0;\n  return new MockStep((parent, current, control) => {\n    var parentCountStr = current.element.getAttribute(wrapperId);\n    if (isPresent(parentCountStr)) {\n      var parentCount = NumberWrapper.parseInt(parentCountStr, 10);\n      while (parentCount > 0) {\n        control.addParent(new CompileElement(el(`<a id=\"${wrapperId}#${nextElementId++}\"></a>`)));\n        parentCount--;\n      }\n    }\n    logEntry(log, parent, current);\n  });\n}\n\nfunction resultIdLog(result) {\n  var idLog = [];\n  ListWrapper.forEach(result, (current) => {\n    logEntry(idLog, null, current);\n  });\n  return idLog;\n}","assert.argumentTypes($__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}