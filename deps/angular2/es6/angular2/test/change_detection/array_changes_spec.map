{"version":3,"sources":["array_changes_spec.js"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/array_changes_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/","sourcesContent":["import {describe, it, iit, xit, expect, beforeEach, afterEach} from 'angular2/test_lib';\nimport {ArrayChanges} from 'angular2/src/change_detection/pipes/array_changes';\n\nimport {NumberWrapper} from 'angular2/src/facade/lang';\nimport {ListWrapper, MapWrapper} from 'angular2/src/facade/collection';\n\nimport {TestIterable} from './iterable';\nimport {arrayChangesAsString} from './util';\n\n// todo(vicb): UnmodifiableListView / frozen object when implemented\nexport function main() {\n  describe('collection_changes', function() {\n    describe('CollectionChanges', function() {\n      var changes;\n      var l;\n\n      beforeEach(() => {\n        changes = new ArrayChanges();\n      });\n\n      afterEach(() => {\n        changes = null;\n      });\n\n      it('should support list and iterables', () => {\n        expect(ArrayChanges.supportsObj([])).toBeTruthy();\n        expect(ArrayChanges.supportsObj(new TestIterable())).toBeTruthy();\n        expect(ArrayChanges.supportsObj(MapWrapper.create())).toBeFalsy();\n        expect(ArrayChanges.supportsObj(null)).toBeFalsy();\n      });\n\n      it('should support iterables', () => {\n        l = new TestIterable();\n\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: []\n        }));\n\n        l.list = [1];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['1[null->0]'],\n          additions: ['1[null->0]']\n        }));\n\n        l.list = [2, 1];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[null->0]', '1[0->1]'],\n          previous: ['1[0->1]'],\n          additions: ['2[null->0]'],\n          moves: ['1[0->1]']\n        }));\n      });\n\n      it('should detect additions', () => {\n        l = [];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: []\n        }));\n\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a[null->0]'],\n          additions: ['a[null->0]']\n        }));\n\n        ListWrapper.push(l, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]'],\n          previous: ['a'],\n          additions: ['b[null->1]']\n        }));\n      });\n\n      it('should support changing the reference', () => {\n        l = [0];\n        changes.check(l);\n\n        l = [1, 0];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['1[null->0]', '0[0->1]'],\n          previous: ['0[0->1]'],\n          additions: ['1[null->0]'],\n          moves: ['0[0->1]']\n        }));\n\n        l = [2, 1, 0];\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[null->0]', '1[0->1]', '0[1->2]'],\n          previous: ['1[0->1]', '0[1->2]'],\n          additions: ['2[null->0]'],\n          moves: ['1[0->1]', '0[1->2]']\n        }));\n      });\n\n      it('should handle swapping element', () => {\n        l = [1, 2];\n        changes.check(l);\n\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 2);\n        ListWrapper.push(l, 1);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['2[1->0]', '1[0->1]'],\n          previous: ['1[0->1]', '2[1->0]'],\n          moves: ['2[1->0]', '1[0->1]']\n        }));\n      });\n\n      it('should handle swapping element', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n\n        ListWrapper.removeAt(l, 1);\n        ListWrapper.insert(l, 0, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[1->0]', 'a[0->1]', 'c'],\n          previous: ['a[0->1]', 'b[1->0]', 'c'],\n          moves: ['b[1->0]', 'a[0->1]']\n        }));\n\n        ListWrapper.removeAt(l, 1);\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b', 'c[2->1]', 'a[1->2]'],\n          previous: ['b', 'a[1->2]', 'c[2->1]'],\n          moves: ['c[2->1]', 'a[1->2]']\n        }));\n      });\n\n      it('should detect changes in list', () => {\n        l = [];\n        changes.check(l);\n\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a[null->0]'],\n          additions: ['a[null->0]']\n        }));\n\n        ListWrapper.push(l, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]'],\n          previous: ['a'],\n          additions: ['b[null->1]']\n        }));\n\n        ListWrapper.push(l, 'c');\n        ListWrapper.push(l, 'd');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b', 'c[null->2]', 'd[null->3]'],\n          previous: ['a', 'b'],\n          additions: ['c[null->2]', 'd[null->3]']\n        }));\n\n        ListWrapper.removeAt(l, 2);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b', 'd[3->2]'],\n          previous: ['a', 'b', 'c[2->null]', 'd[3->2]'],\n          moves: ['d[3->2]'],\n          removals: ['c[2->null]']\n        }));\n\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 'd');\n        ListWrapper.push(l, 'c');\n        ListWrapper.push(l, 'b');\n        ListWrapper.push(l, 'a');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['d[2->0]', 'c[null->1]', 'b[1->2]', 'a[0->3]'],\n          previous: ['a[0->3]', 'b[1->2]', 'd[2->0]'],\n          additions: ['c[null->1]'],\n          moves: ['d[2->0]', 'b[1->2]', 'a[0->3]']\n        }));\n      });\n\n      it('should test string by value rather than by reference (Dart)', () => {\n        l = ['a', 'boo'];\n        changes.check(l);\n\n        var b = 'b';\n        var oo = 'oo';\n        ListWrapper.set(l, 1, b + oo);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'boo'],\n          previous: ['a', 'boo']\n        }));\n      });\n\n      it('should ignore [NaN] != [NaN] (JS)', () => {\n        l = [NumberWrapper.NaN];\n        changes.check(l);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: [NumberWrapper.NaN],\n          previous: [NumberWrapper.NaN]\n        }));\n      });\n\n      it('should detect [NaN] moves', () => {\n        l = [NumberWrapper.NaN, NumberWrapper.NaN];\n        changes.check(l);\n\n        ListWrapper.insert(l, 0, 'foo');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n            collection: ['foo[null->0]', 'NaN[0->1]', 'NaN[1->2]'],\n            previous: ['NaN[0->1]', 'NaN[1->2]'],\n            additions: ['foo[null->0]'],\n            moves: ['NaN[0->1]', 'NaN[1->2]']}\n        ));\n      });\n\n      it('should remove and add same item', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n\n        ListWrapper.removeAt(l, 1);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'c[2->1]'],\n          previous: ['a', 'b[1->null]', 'c[2->1]'],\n          moves: ['c[2->1]'],\n          removals: ['b[1->null]']\n        }));\n\n        ListWrapper.insert(l, 1, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'b[null->1]', 'c[1->2]'],\n          previous: ['a', 'c[1->2]'],\n          additions: ['b[null->1]'],\n          moves: ['c[1->2]']\n        }));\n      });\n\n      it('should support duplicates', () => {\n        l = ['a', 'a', 'a', 'b', 'b'];\n        changes.check(l);\n\n        ListWrapper.removeAt(l, 0);\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['a', 'a', 'b[3->2]', 'b[4->3]'],\n          previous: ['a', 'a', 'a[2->null]', 'b[3->2]', 'b[4->3]'],\n          moves: ['b[3->2]', 'b[4->3]'],\n          removals: ['a[2->null]']\n        }));\n      });\n\n      it('should support insertions/moves', () => {\n        l = ['a', 'a', 'b', 'b'];\n        changes.check(l);\n\n        ListWrapper.insert(l, 0, 'b');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[2->0]', 'a[0->1]', 'a[1->2]', 'b', 'b[null->4]'],\n          previous: ['a[0->1]', 'a[1->2]', 'b[2->0]', 'b'],\n          additions: ['b[null->4]'],\n          moves: ['b[2->0]', 'a[0->1]', 'a[1->2]']\n        }));\n      });\n\n      it('should not report unnecessary moves', () => {\n        l = ['a', 'b', 'c'];\n        changes.check(l);\n\n        ListWrapper.clear(l);\n        ListWrapper.push(l, 'b');\n        ListWrapper.push(l, 'a');\n        ListWrapper.push(l, 'c');\n        changes.check(l);\n        expect(changes.toString()).toEqual(arrayChangesAsString({\n          collection: ['b[1->0]', 'a[0->1]', 'c'],\n          previous: ['a[0->1]', 'b[1->0]', 'c'],\n          moves: ['b[1->0]', 'a[0->1]']\n        }));\n      });\n    });\n  });\n}\n\n"]}