{"version":3,"sources":["change_detection_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/978","@traceur/generated/TemplateParser/979","@traceur/generated/TemplateParser/980","@traceur/generated/TemplateParser/992","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/change_detection_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/","sourcesContent":["import {ddescribe, describe, it, iit, xit, expect, beforeEach, afterEach, IS_DARTIUM} from 'angular2/test_lib';\n\nimport {isPresent, isBlank, isJsObject, BaseException, FunctionWrapper} from 'angular2/src/facade/lang';\nimport {List, ListWrapper, MapWrapper, StringMapWrapper} from 'angular2/src/facade/collection';\n\nimport {Parser} from 'angular2/src/change_detection/parser/parser';\nimport {Lexer} from 'angular2/src/change_detection/parser/lexer';\n\nimport {ChangeDispatcher, DynamicChangeDetector, ChangeDetectionError, ContextWithVariableBindings,\n  PipeRegistry, NO_CHANGE, CHECK_ALWAYS, CHECK_ONCE, CHECKED, DETACHED} from 'angular2/change_detection';\n\nimport {ChangeDetectionUtil} from 'angular2/src/change_detection/change_detection_util';\n\n\nimport {JitProtoChangeDetector, DynamicProtoChangeDetector} from 'angular2/src/change_detection/proto_change_detector';\n\n\nexport function main() {\n  describe(\"change detection\", () => {\n    StringMapWrapper.forEach(\n      { \"dynamic\": (registry = null) => new DynamicProtoChangeDetector(registry),\n        \"JIT\": (registry = null) => new JitProtoChangeDetector(registry)\n      }, (createProtoChangeDetector, name) => {\n\n        if (name == \"JIT\" && IS_DARTIUM) return;\n\n        function ast(exp:string, location:string = 'location') {\n          var parser = new Parser(new Lexer());\n          return parser.parseBinding(exp, location);\n        }\n\n        function createChangeDetector(memo:string, exp:string, context = null, registry = null) {\n          var pcd = createProtoChangeDetector(registry);\n          pcd.addAst(ast(exp), memo, memo);\n          var dispatcher = new TestDispatcher();\n          var cd = pcd.instantiate(dispatcher);\n          cd.setContext(context);\n\n          return {\"changeDetector\" : cd, \"dispatcher\" : dispatcher};\n        }\n\n        function executeWatch(memo:string, exp:string, context = null) {\n          var res = createChangeDetector(memo, exp, context);\n          res[\"changeDetector\"].detectChanges();\n          return res[\"dispatcher\"].log;\n        }\n\n        describe(`${name} change detection`, () => {\n          it('should do simple watching', () => {\n            var person = new Person(\"misko\");\n            var c = createChangeDetector('name', 'name', person);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=misko']);\n            dispatcher.clear();\n\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual([]);\n            dispatcher.clear();\n\n            person.name = \"Misko\";\n            cd.detectChanges();\n            expect(dispatcher.log).toEqual(['name=Misko']);\n          });\n\n          it('should report all changes on the first run including uninitialized values', () => {\n            expect(executeWatch('value', 'value', new Uninitialized())).toEqual(['value=null']);\n          });\n\n          it('should report all changes on the first run including null values', () => {\n            var td = new TestData(null);\n            expect(executeWatch('a', 'a', td)).toEqual(['a=null']);\n          });\n\n          it(\"should support literals\", () => {\n            expect(executeWatch('const', '10')).toEqual(['const=10']);\n            expect(executeWatch('const', '\"str\"')).toEqual(['const=str']);\n            expect(executeWatch('const', '\"a\\n\\nb\"')).toEqual(['const=a\\n\\nb']);\n          });\n\n          it('simple chained property access', () => {\n            var address = new Address('Grenoble');\n            var person = new Person('Victor', address);\n\n            expect(executeWatch('address.city', 'address.city', person))\n              .toEqual(['address.city=Grenoble']);\n          });\n\n          it(\"should support method calls\", () => {\n            var person = new Person('Victor');\n            expect(executeWatch('m', 'sayHi(\"Jim\")', person)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support function calls\", () => {\n            var td = new TestData(() => (a) => a);\n            expect(executeWatch('value', 'a()(99)', td)).toEqual(['value=99']);\n          });\n\n          it(\"should support chained method calls\", () => {\n            var person = new Person('Victor');\n            var td = new TestData(person);\n            expect(executeWatch('m', 'a.sayHi(\"Jim\")', td)).toEqual(['m=Hi, Jim']);\n          });\n\n          it(\"should support literal array\", () => {\n            var c = createChangeDetector('array', '[1,2]');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[[1, 2]]]);\n\n            c = createChangeDetector('array', '[1,a]', new TestData(2));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues).toEqual([[[1, 2]]]);\n          });\n\n          it(\"should support literal maps\", () => {\n            var c = createChangeDetector('map', '{z:1}');\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0][0]['z']).toEqual(1);\n\n            c = createChangeDetector('map', '{z:a}', new TestData(1));\n            c[\"changeDetector\"].detectChanges();\n            expect(c[\"dispatcher\"].loggedValues[0][0]['z']).toEqual(1);\n          });\n\n          it(\"should support binary operations\", () => {\n            expect(executeWatch('exp', '10 + 2')).toEqual(['exp=12']);\n            expect(executeWatch('exp', '10 - 2')).toEqual(['exp=8']);\n\n            expect(executeWatch('exp', '10 * 2')).toEqual(['exp=20']);\n            expect(executeWatch('exp', '10 / 2')).toEqual([`exp=${5.0}`]); //dart exp=5.0, js exp=5\n            expect(executeWatch('exp', '11 % 2')).toEqual(['exp=1']);\n\n            expect(executeWatch('exp', '1 == 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 != 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 < 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 > 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 < 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '1 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 <= 1')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', '2 >= 1')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '2 >= 2')).toEqual(['exp=true']);\n            expect(executeWatch('exp', '1 >= 2')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true && true')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'true && false')).toEqual(['exp=false']);\n\n            expect(executeWatch('exp', 'true || false')).toEqual(['exp=true']);\n            expect(executeWatch('exp', 'false || false')).toEqual(['exp=false']);\n          });\n\n          it(\"should support negate\", () => {\n            expect(executeWatch('exp', '!true')).toEqual(['exp=false']);\n            expect(executeWatch('exp', '!!true')).toEqual(['exp=true']);\n          });\n\n          it(\"should support conditionals\", () => {\n            expect(executeWatch('m', '1 < 2 ? 1 : 2')).toEqual(['m=1']);\n            expect(executeWatch('m', '1 > 2 ? 1 : 2')).toEqual(['m=2']);\n          });\n\n          describe(\"keyed access\", () => {\n            it(\"should support accessing a list item\", () => {\n              expect(executeWatch('array[0]', '[\"foo\", \"bar\"][0]')).toEqual(['array[0]=foo']);\n            });\n\n            it(\"should support accessing a map item\", () => {\n              expect(executeWatch('map[foo]', '{\"foo\": \"bar\"}[\"foo\"]')).toEqual(['map[foo]=bar']);\n            });\n          });\n\n          it(\"should support interpolation\", () => {\n            var parser = new Parser(new Lexer());\n            var pcd = createProtoChangeDetector();\n            var ast = parser.parseInterpolation(\"B{{a}}A\", \"location\");\n            pcd.addAst(ast, \"memo\", \"memo\");\n\n            var dispatcher = new TestDispatcher();\n            var cd = pcd.instantiate(dispatcher);\n            cd.setContext(new TestData(\"value\"));\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([\"memo=BvalueA\"]);\n          });\n \n          describe(\"change notification\", () => {\n            describe(\"simple checks\", () => {\n              it(\"should pass a change record to the dispatcher\", () => {\n                var person = new Person('bob');\n                var c = createChangeDetector('name', 'name', person);\n                var cd = c[\"changeDetector\"];\n                var dispatcher = c[\"dispatcher\"];\n\n                cd.detectChanges();\n\n                var changeRecord = dispatcher.changeRecords[0][0];\n\n                expect(changeRecord.bindingMemento).toEqual('name');\n                expect(changeRecord.change.currentValue).toEqual('bob');\n                expect(changeRecord.change.previousValue).toEqual(ChangeDetectionUtil.unitialized());\n              });\n            });\n\n            describe(\"pipes\", () => {\n              it(\"should pass a change record to the dispatcher\", () => {\n                var registry = new FakePipeRegistry('pipe', () => new CountingPipe());\n\n                var person = new Person('bob');\n                var c = createChangeDetector('name', 'name | pipe', person, registry);\n                var cd = c[\"changeDetector\"];\n                var dispatcher = c[\"dispatcher\"];\n\n                cd.detectChanges();\n\n                var changeRecord = dispatcher.changeRecords[0][0];\n\n                expect(changeRecord.bindingMemento).toEqual('name');\n                expect(changeRecord.change.currentValue).toEqual('bob state:0');\n                expect(changeRecord.change.previousValue).toEqual(ChangeDetectionUtil.unitialized());\n              });\n            });\n\n            describe(\"group changes\", () => {\n              it(\"should notify the dispatcher when a group of records changes\", () => {\n                var pcd = createProtoChangeDetector();\n                pcd.addAst(ast(\"1 + 2\"), \"memo\", \"1\");\n                pcd.addAst(ast(\"10 + 20\"), \"memo\", \"1\");\n                pcd.addAst(ast(\"100 + 200\"), \"memo2\", \"2\");\n\n                var dispatcher = new TestDispatcher();\n                var cd = pcd.instantiate(dispatcher);\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual([[3, 30], [300]]);\n              });\n\n              it(\"should notify the dispatcher before switching to the next group\", () => {\n                var pcd = createProtoChangeDetector();\n                pcd.addAst(ast(\"a()\"), \"a\", \"1\");\n                pcd.addAst(ast(\"b()\"), \"b\", \"2\");\n                pcd.addAst(ast(\"c()\"), \"c\", \"2\");\n\n                var dispatcher = new TestDispatcher();\n                var cd = pcd.instantiate(dispatcher);\n\n                var tr = new TestRecord();\n                tr.a = () => {\n                  dispatcher.logValue('InvokeA');\n                  return 'a'\n                };\n                tr.b = () => {\n                  dispatcher.logValue('InvokeB');\n                  return 'b'\n                };\n                tr.c = () => {\n                  dispatcher.logValue('InvokeC');\n                  return 'c'\n                };\n                cd.setContext(tr);\n\n                cd.detectChanges();\n\n                expect(dispatcher.loggedValues).toEqual(['InvokeA', ['a'], 'InvokeB', 'InvokeC', ['b', 'c']]);\n              });\n            });\n          });\n          \n          describe(\"enforce no new changes\", () => {\n            it(\"should throw when a record gets changed after it has been checked\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast(\"a\"), \"a\", 1);\n\n              var dispatcher = new TestDispatcher();\n              var cd = pcd.instantiate(dispatcher);\n              cd.setContext(new TestData('value'));\n\n              expect(() => {\n                cd.checkNoChanges();\n              }).toThrowError(new RegExp(\"Expression 'a in location' has changed after it was checked\"));\n            });\n          });\n\n          //TODO vsavkin: implement it\n          describe(\"error handling\", () => {\n            xit(\"should wrap exceptions into ChangeDetectionError\", () => {\n              var pcd = createProtoChangeDetector();\n              pcd.addAst(ast('invalidProp', 'someComponent'), \"a\", 1);\n\n              var cd = pcd.instantiate(new TestDispatcher());\n              cd.setContext(null);\n\n              try {\n                cd.detectChanges();\n\n                throw new BaseException(\"fail\");\n              } catch (e) {\n                expect(e).toBeAnInstanceOf(ChangeDetectionError);\n                expect(e.location).toEqual(\"invalidProp in someComponent\");\n              }\n            });\n          });\n\n          describe(\"ContextWithVariableBindings\", () => {\n            it('should read a field from ContextWithVariableBindings', () => {\n              var locals = new ContextWithVariableBindings(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('key', 'key', locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should invoke a function from ContextWithVariableBindings', () => {\n              var locals = new ContextWithVariableBindings(null,\n                MapWrapper.createFromPairs([[\"key\", () => \"value\"]]));\n\n              expect(executeWatch('key', 'key()', locals))\n                .toEqual(['key=value']);\n            });\n\n            it('should handle nested ContextWithVariableBindings', () => {\n              var nested = new ContextWithVariableBindings(null,\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n              var locals = new ContextWithVariableBindings(nested, MapWrapper.create());\n\n              expect(executeWatch('key', 'key', locals))\n                .toEqual(['key=value']);\n            });\n\n            it(\"should fall back to a regular field read when ContextWithVariableBindings \" +\n            \"does not have the requested field\", () => {\n              var locals = new ContextWithVariableBindings(new Person(\"Jim\"),\n                MapWrapper.createFromPairs([[\"key\", \"value\"]]));\n\n              expect(executeWatch('name', 'name', locals))\n                .toEqual(['name=Jim']);\n            });\n          });\n\n          describe(\"handle children\", () => {\n            var parent, child;\n\n            beforeEach(() => {\n              var protoParent = createProtoChangeDetector();\n              parent = protoParent.instantiate(null);\n\n              var protoChild = createProtoChangeDetector();\n              child = protoChild.instantiate(null);\n            });\n\n            it(\"should add children\", () => {\n              parent.addChild(child);\n\n              expect(parent.children.length).toEqual(1);\n              expect(parent.children[0]).toBe(child);\n            });\n\n            it(\"should remove children\", () => {\n              parent.addChild(child);\n              parent.removeChild(child);\n\n              expect(parent.children).toEqual([]);\n            });\n          });\n        });\n\n        describe(\"mode\", () => {\n          it(\"should not check a detached change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = DETACHED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should not check a checked change detector\", () => {\n            var c = createChangeDetector('name', 'a', new TestData(\"value\"));\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.mode = CHECKED;\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual([]);\n          });\n\n          it(\"should change CHECK_ONCE to CHECKED\", () => {\n            var cd = createProtoChangeDetector().instantiate(null);\n            cd.mode = CHECK_ONCE;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECKED);\n          });\n\n          it(\"should not change the CHECK_ALWAYS\", () => {\n            var cd = createProtoChangeDetector().instantiate(null);\n            cd.mode = CHECK_ALWAYS;\n\n            cd.detectChanges();\n\n            expect(cd.mode).toEqual(CHECK_ALWAYS);\n          });\n        });\n\n        describe(\"markPathToRootAsCheckOnce\", () => {\n          function changeDetector(mode, parent) {\n            var cd = createProtoChangeDetector().instantiate(null);\n            cd.mode = mode;\n            if (isPresent(parent)) parent.addChild(cd);\n            return cd;\n          }\n\n          it(\"should mark all checked detectors as CHECK_ONCE \" +\n            \"until reaching a detached one\", () => {\n\n            var root = changeDetector(CHECK_ALWAYS, null);\n            var disabled = changeDetector(DETACHED, root);\n            var parent = changeDetector(CHECKED, disabled);\n            var checkAlwaysChild = changeDetector(CHECK_ALWAYS, parent);\n            var checkOnceChild = changeDetector(CHECK_ONCE, checkAlwaysChild);\n            var checkedChild = changeDetector(CHECKED, checkOnceChild);\n\n            checkedChild.markPathToRootAsCheckOnce();\n\n            expect(root.mode).toEqual(CHECK_ALWAYS);\n            expect(disabled.mode).toEqual(DETACHED);\n            expect(parent.mode).toEqual(CHECK_ONCE);\n            expect(checkAlwaysChild.mode).toEqual(CHECK_ALWAYS);\n            expect(checkOnceChild.mode).toEqual(CHECK_ONCE);\n            expect(checkedChild.mode).toEqual(CHECK_ONCE);\n          });\n        });\n\n        describe(\"pipes\", () => {\n          it(\"should support pipes\", () => {\n            var registry = new FakePipeRegistry('pipe', () => new CountingPipe());\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, registry);\n            var cd = c[\"changeDetector\"];\n            var dispatcher = c[\"dispatcher\"];\n\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual(['memo=Megatron state:0']);\n\n            dispatcher.clear();\n            cd.detectChanges();\n\n            expect(dispatcher.log).toEqual(['memo=Megatron state:1']);\n          });\n\n          it(\"should lookup pipes in the registry when the context is not supported\", () => {\n            var registry = new FakePipeRegistry('pipe', () => new OncePipe());\n            var ctx = new Person(\"Megatron\");\n\n            var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, registry);\n            var cd = c[\"changeDetector\"];\n\n            cd.detectChanges();\n\n            expect(registry.numberOfLookups).toEqual(1);\n\n            ctx.name = \"Optimus Prime\";\n            cd.detectChanges();\n\n            expect(registry.numberOfLookups).toEqual(2);\n          });\n        });\n\n        it(\"should do nothing when returns NO_CHANGE\", () => {\n          var registry = new FakePipeRegistry('pipe', () => new IdentityPipe())\n          var ctx = new Person(\"Megatron\");\n\n          var c  = createChangeDetector(\"memo\", \"name | pipe\", ctx, registry);\n          var cd = c[\"changeDetector\"];\n          var dispatcher = c[\"dispatcher\"];\n\n          cd.detectChanges();\n          cd.detectChanges();\n\n          expect(dispatcher.log).toEqual(['memo=Megatron']);\n\n          ctx.name = \"Optimus Prime\";\n          dispatcher.clear();\n          cd.detectChanges();\n\n          expect(dispatcher.log).toEqual(['memo=Optimus Prime']);\n        });\n      });\n  });\n}\n\nclass CountingPipe {\n  state:number;\n\n  constructor() {\n    this.state = 0;\n  }\n\n  supports(newValue) {\n    return true;\n  }\n\n  transform(value) {\n    return `${value} state:${this.state ++}`;\n  }\n}\n\nclass OncePipe {\n  called:boolean;\n  constructor() {\n    this.called = false;;\n  }\n\n  supports(newValue) {\n    return !this.called;\n  }\n\n  transform(value) {\n    this.called = true;\n    return value;\n  }\n}\n\nclass IdentityPipe {\n  state:any;\n\n  supports(newValue) {\n    return true;\n  }\n\n  transform(value) {\n    if (this.state === value) {\n      return NO_CHANGE;\n    } else {\n      this.state = value;\n      return value;\n    }\n  }\n}\n\nclass FakePipeRegistry extends PipeRegistry {\n  numberOfLookups:number;\n  pipeType:string;\n  factory:Function;\n\n  constructor(pipeType, factory) {\n    super({});\n    this.pipeType = pipeType;\n    this.factory = factory;\n    this.numberOfLookups = 0;\n  }\n\n  get(type:string, obj) {\n    if (type != this.pipeType) return null;\n    this.numberOfLookups ++;\n    return this.factory();\n  }\n}\n\nclass TestRecord {\n  a;\n  b;\n  c;\n}\n\nclass Person {\n  name:string;\n  age:number;\n  address:Address;\n  constructor(name:string, address:Address = null) {\n    this.name = name;\n    this.address = address;\n  }\n\n  sayHi(m) {\n    return `Hi, ${m}`;\n  }\n\n  toString():string {\n    var address = this.address == null ? '' : ' address=' + this.address.toString();\n\n    return 'name=' + this.name + address;\n  }\n}\n\nclass Address {\n  city:string;\n  constructor(city:string) {\n    this.city = city;\n  }\n\n  toString():string {\n    return this.city;\n  }\n}\n\nclass Uninitialized {\n  value:any;\n}\n\nclass TestData {\n  a;\n\n  constructor(a) {\n    this.a = a;\n  }\n}\n\nclass TestDispatcher extends ChangeDispatcher {\n  log:List;\n  loggedValues:List;\n  changeRecords:List;\n  onChange:Function;\n\n  constructor() {\n    super();\n    this.log = null;\n    this.loggedValues = null;\n    this.onChange = (_, __) => {};\n    this.clear();\n  }\n\n  clear() {\n    this.log = ListWrapper.create();\n    this.loggedValues = ListWrapper.create();\n    this.changeRecords = ListWrapper.create();\n  }\n\n  logValue(value) {\n    ListWrapper.push(this.loggedValues, value);\n  }\n\n  onRecordChange(group, changeRecords:List) {\n    var value = changeRecords[0].change.currentValue;\n    var memento = changeRecords[0].bindingMemento;\n    ListWrapper.push(this.log, memento + '=' + this._asString(value));\n\n    var values = ListWrapper.map(changeRecords, (r) => r.change.currentValue);\n    ListWrapper.push(this.loggedValues, values);\n\n    ListWrapper.push(this.changeRecords, changeRecords);\n\n    this.onChange(group, changeRecords);\n  }\n\n\n  _asString(value) {\n    return (isBlank(value) ? 'null' : value.toString());\n  }\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type.any","assert.type.any","assert.type.any","assert.type.any","return assert.returnType(($__placeholder__0), $__placeholder__1)"]}