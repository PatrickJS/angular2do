{"version":3,"sources":["context_with_variable_bindings_spec.js"],"names":[],"mappings":"AAAA,KAAO,EAAC,SAAQ;AAAG,SAAO;AAAG,GAAC;AAAG,IAAE;AAAG,IAAE;AAAG,OAAK;AAAG,WAAS,CAAC,KAAO,oBAAkB,CAAC;AAEvF,KAAO,EAAC,2BAA0B,CAAC,KAAO,sEAAoE,CAAC;AAE/G,KAAO,EAAC,aAAY;AAAG,QAAM;AAAG,UAAQ,CAAC,KAAO,2BAAyB,CAAC;AAC1E,KAAO,EAAC,UAAS;AAAG,YAAU,CAAC,KAAO,iCAA+B,CAAC;AAEtE,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,6BAA4B,CAAG,EAAC,AAAD,IAAM;AAC5C,AAAI,MAAA,CAAA,MAAK,CAAC;AACV,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,WAAK,EAAI,IAAI,4BAA0B,AAAC,CAAC,IAAG,CACxC,CAAA,UAAS,gBAAgB,AAAC,CAAC,CAAC,CAAC,KAAI,CAAG,QAAM,CAAC,CAAG,EAAC,SAAQ,CAAG,KAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,+BAA8B,CAAG,EAAC,AAAD,IAAM;AACxC,WAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,OAAM,CAAC,CAAC;AAEvC,AAAI,QAAA,CAAA,eAAc,EAAI,CAAA,MAAK,IAAI,AAAC,CAAC,YAAW,CAAC,CAAC;AAC9C,WAAK,AAAC,CAAC,SAAQ,AAAC,CAAC,eAAc,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2CAA0C,CAAG,EAAC,AAAD,IAAM;AACpD,WAAK,AAAC,CAAC,MAAK,WAAW,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AAC3C,WAAK,AAAC,CAAC,MAAK,WAAW,AAAC,CAAC,SAAQ,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;AAC/C,WAAK,AAAC,CAAC,MAAK,WAAW,AAAC,CAAC,YAAW,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;IACrD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,qCAAoC,CAAG,EAAC,AAAD,IAAM;AAC9C,WAAK,IAAI,AAAC,CAAC,KAAI,CAAG,MAAI,CAAC,CAAC;AACxB,WAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,KAAI,CAAC,CAAC;IACvC,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,8DAA6D,CAAG,EAAC,AAAD,IAAM;AACvE,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,MAAK,IAAI,AAAC,CAAC,YAAW,CAAG,MAAI,CAAC,CAAC,aAAa,AAAC,EAAC,CAAC;IAC9D,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,oBAAmB,CAAG,EAAC,AAAD,IAAM;AAC7B,WAAK,YAAY,AAAC,EAAC,CAAC;AACpB,WAAK,AAAC,CAAC,MAAK,IAAI,AAAC,CAAC,KAAI,CAAC,CAAC,KAAK,AAAC,CAAC,IAAG,CAAC,CAAC;IACtC,CAAC,CAAC;EACJ,CAAC,CAAA;AACH;AAAA","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/context_with_variable_bindings_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/","sourcesContent":["import {ddescribe, describe, it, xit, iit, expect, beforeEach} from 'angular2/test_lib';\n\nimport {ContextWithVariableBindings} from 'angular2/src/change_detection/parser/context_with_variable_bindings';\n\nimport {BaseException, isBlank, isPresent} from 'angular2/src/facade/lang';\nimport {MapWrapper, ListWrapper} from 'angular2/src/facade/collection';\n\nexport function main() {\n  describe('ContextWithVariableBindings', () => {\n    var locals;\n    beforeEach(() => {\n      locals = new ContextWithVariableBindings(null,\n          MapWrapper.createFromPairs([['key', 'value'], ['nullKey', null]]));\n    });\n\n    it('should support getting values', () => {\n      expect(locals.get('key')).toBe('value');\n\n      var notPresentValue = locals.get('notPresent');\n      expect(isPresent(notPresentValue)).toBe(false);\n    });\n\n    it('should support checking if key is persent', () => {\n      expect(locals.hasBinding('key')).toBe(true);\n      expect(locals.hasBinding('nullKey')).toBe(true);\n      expect(locals.hasBinding('notPresent')).toBe(false);\n    });\n\n    it('should support setting persent keys', () => {\n      locals.set('key', 'bar');\n      expect(locals.get('key')).toBe('bar');\n    });\n\n    it('should not support setting keys that are not present already', () => {\n      expect(() => locals.set('notPresent', 'bar')).toThrowError();\n    });\n\n    it('should clearValues', () => {\n      locals.clearValues();\n      expect(locals.get('key')).toBe(null);\n    });\n  })\n}\n\n"]}