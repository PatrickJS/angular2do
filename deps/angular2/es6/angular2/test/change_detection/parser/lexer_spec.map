{"version":3,"sources":["lexer_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/385","@traceur/generated/TemplateParser/25"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/lexer_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/change_detection/parser/","sourcesContent":["import {describe, it, expect} from 'angular2/test_lib';\n\nimport {Lexer, Token} from 'angular2/src/change_detection/parser/lexer';\n\nimport {List, ListWrapper} from \"angular2/src/facade/collection\";\nimport {StringWrapper, int} from \"angular2/src/facade/lang\";\n\nfunction lex(text:string):List {\n  return new Lexer().tokenize(text);\n}\n\nfunction expectToken(token, index) {\n  expect(token instanceof Token).toBe(true);\n  expect(token.index).toEqual(index);\n}\n\nfunction expectCharacterToken(token, index, character) {\n  expect(character.length).toBe(1);\n  expectToken(token, index);\n  expect(token.isCharacter(StringWrapper.charCodeAt(character, 0))).toBe(true);\n}\n\nfunction expectOperatorToken(token, index, operator) {\n  expectToken(token, index);\n  expect(token.isOperator(operator)).toBe(true);\n}\n\nfunction expectNumberToken(token, index, n) {\n  expectToken(token, index);\n  expect(token.isNumber()).toBe(true);\n  expect(token.toNumber()).toEqual(n);\n}\n\nfunction expectStringToken(token, index, str) {\n  expectToken(token, index);\n  expect(token.isString()).toBe(true);\n  expect(token.toString()).toEqual(str);\n}\n\nfunction expectIdentifierToken(token, index, identifier) {\n  expectToken(token, index);\n  expect(token.isIdentifier()).toBe(true);\n  expect(token.toString()).toEqual(identifier);\n}\n\nfunction expectKeywordToken(token, index, keyword) {\n  expectToken(token, index);\n  expect(token.isKeyword()).toBe(true);\n  expect(token.toString()).toEqual(keyword);\n}\n\n\nexport function main() {\n  describe('lexer', function() {\n    describe('token', function() {\n      it('should tokenize a simple identifier', function() {\n        var tokens:List<int> = lex(\"j\");\n        expect(tokens.length).toEqual(1);\n        expectIdentifierToken(tokens[0], 0, 'j');\n      });\n\n      it('should tokenize a dotted identifier', function() {\n        var tokens:List<int> = lex(\"j.k\");\n        expect(tokens.length).toEqual(3);\n        expectIdentifierToken(tokens[0], 0, 'j');\n        expectCharacterToken (tokens[1], 1, '.');\n        expectIdentifierToken(tokens[2], 2, 'k');\n      });\n\n      it('should tokenize an operator', function() {\n        var tokens:List<int> = lex(\"j-k\");\n        expect(tokens.length).toEqual(3);\n        expectOperatorToken(tokens[1], 1, '-');\n      });\n\n      it('should tokenize an indexed operator', function() {\n        var tokens:List<int> = lex(\"j[k]\");\n        expect(tokens.length).toEqual(4);\n        expectCharacterToken(tokens[1], 1, \"[\");\n        expectCharacterToken(tokens[3], 3, \"]\");\n      });\n\n      it('should tokenize numbers', function() {\n        var tokens:List<int> = lex(\"88\");\n        expect(tokens.length).toEqual(1);\n        expectNumberToken(tokens[0], 0, 88);\n      });\n\n      it('should tokenize numbers within index ops', function() {\n        expectNumberToken(lex(\"a[22]\")[2], 2, 22);\n      });\n\n      it('should tokenize simple quoted strings', function() {\n        expectStringToken(lex('\"a\"')[0], 0, \"a\");\n      });\n\n      it('should tokenize quoted strings with escaped quotes', function() {\n        expectStringToken(lex('\"a\\\\\"\"')[0], 0, 'a\"');\n      });\n\n      it('should tokenize a string', function() {\n        var tokens:List<Token> = lex(\"j-a.bc[22]+1.3|f:'a\\\\\\'c':\\\"d\\\\\\\"e\\\"\");\n        expectIdentifierToken(tokens[0], 0, 'j');\n        expectOperatorToken(tokens[1], 1, '-');\n        expectIdentifierToken(tokens[2], 2, 'a');\n        expectCharacterToken(tokens[3], 3, '.');\n        expectIdentifierToken(tokens[4], 4, 'bc');\n        expectCharacterToken(tokens[5], 6, '[');\n        expectNumberToken(tokens[6], 7, 22);\n        expectCharacterToken(tokens[7], 9, ']');\n        expectOperatorToken(tokens[8], 10, '+');\n        expectNumberToken(tokens[9], 11, 1.3);\n        expectOperatorToken(tokens[10], 14, '|');\n        expectIdentifierToken(tokens[11], 15, 'f');\n        expectCharacterToken(tokens[12], 16, ':');\n        expectStringToken(tokens[13], 17, \"a'c\");\n        expectCharacterToken(tokens[14], 23, ':');\n        expectStringToken(tokens[15], 24, 'd\"e');\n      });\n\n      it('should tokenize undefined', function() {\n        var tokens:List<Token> = lex(\"undefined\");\n        expectKeywordToken(tokens[0], 0, \"undefined\");\n        expect(tokens[0].isKeywordUndefined()).toBe(true);\n      });\n\n      it('should ignore whitespace', function() {\n        var tokens:List<Token> = lex(\"a \\t \\n \\r b\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectIdentifierToken(tokens[1], 8, 'b');\n      });\n\n      it('should tokenize quoted string', function() {\n        var str = \"['\\\\'', \\\"\\\\\\\"\\\"]\";\n        var tokens:List<Token> = lex(str);\n        expectStringToken(tokens[1], 1, \"'\");\n        expectStringToken(tokens[3], 7, '\"');\n      });\n\n      it('should tokenize escaped quoted string', function() {\n        var str = '\"\\\\\"\\\\n\\\\f\\\\r\\\\t\\\\v\\\\u00A0\"';\n        var tokens:List<Token> = lex(str);\n        expect(tokens.length).toEqual(1);\n        expect(tokens[0].toString()).toEqual('\"\\n\\f\\r\\t\\v\\u00A0');\n      });\n\n      it('should tokenize unicode', function() {\n        var tokens:List<Token> = lex('\"\\\\u00A0\"');\n        expect(tokens.length).toEqual(1);\n        expect(tokens[0].toString()).toEqual('\\u00a0');\n      });\n\n      it('should tokenize relation', function() {\n        var tokens:List<Token> = lex(\"! == != < > <= >=\");\n        expectOperatorToken(tokens[0], 0, '!');\n        expectOperatorToken(tokens[1], 2, '==');\n        expectOperatorToken(tokens[2], 5, '!=');\n        expectOperatorToken(tokens[3], 8, '<');\n        expectOperatorToken(tokens[4], 10, '>');\n        expectOperatorToken(tokens[5], 12, '<=');\n        expectOperatorToken(tokens[6], 15, '>=');\n      });\n\n      it('should tokenize statements', function() {\n        var tokens:List<Token> = lex(\"a;b;\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, ';');\n        expectIdentifierToken(tokens[2], 2, 'b');\n        expectCharacterToken(tokens[3], 3, ';');\n      });\n\n      it('should tokenize function invocation', function() {\n        var tokens:List<Token> = lex(\"a()\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, '(');\n        expectCharacterToken(tokens[2], 2, ')');\n      });\n\n      it('should tokenize simple method invocations', function() {\n        var tokens:List<Token> = lex(\"a.method()\");\n        expectIdentifierToken(tokens[2], 2, 'method');\n      });\n\n      it('should tokenize method invocation', function() {\n        var tokens:List<Token> = lex(\"a.b.c (d) - e.f()\");\n        expectIdentifierToken(tokens[0], 0, 'a');\n        expectCharacterToken(tokens[1], 1, '.');\n        expectIdentifierToken(tokens[2], 2, 'b');\n        expectCharacterToken(tokens[3], 3, '.');\n        expectIdentifierToken(tokens[4], 4, 'c');\n        expectCharacterToken(tokens[5], 6, '(');\n        expectIdentifierToken(tokens[6], 7, 'd');\n        expectCharacterToken(tokens[7], 8, ')');\n        expectOperatorToken(tokens[8], 10, '-');\n        expectIdentifierToken(tokens[9], 12, 'e');\n        expectCharacterToken(tokens[10], 13, '.');\n        expectIdentifierToken(tokens[11], 14, 'f');\n        expectCharacterToken(tokens[12], 15, '(');\n        expectCharacterToken(tokens[13], 16, ')');\n      });\n\n      it('should tokenize number', function() {\n        var tokens:List<Token> = lex(\"0.5\");\n        expectNumberToken(tokens[0], 0, 0.5);\n      });\n\n      // NOTE(deboer): NOT A LEXER TEST\n      //    it('should tokenize negative number', function() {\n      //      var tokens:List<Token> = lex(\"-0.5\");\n      //      expectNumberToken(tokens[0], 0, -0.5);\n      //    });\n\n      it('should tokenize number with exponent', function() {\n        var tokens:List<Token> = lex(\"0.5E-10\");\n        expect(tokens.length).toEqual(1);\n        expectNumberToken(tokens[0], 0, 0.5E-10);\n        tokens = lex(\"0.5E+10\");\n        expectNumberToken(tokens[0], 0, 0.5E+10);\n      });\n\n      it('should throws exception for invalid exponent', function() {\n        expect(function() {\n          lex(\"0.5E-\");\n        }).toThrowError('Lexer Error: Invalid exponent at column 4 in expression [0.5E-]');\n\n        expect(function() {\n          lex(\"0.5E-A\");\n        }).toThrowError('Lexer Error: Invalid exponent at column 4 in expression [0.5E-A]');\n      });\n\n      it('should tokenize number starting with a dot', function() {\n        var tokens:List<Token> = lex(\".5\");\n        expectNumberToken(tokens[0], 0, 0.5);\n      });\n\n      it('should throw error on invalid unicode', function() {\n        expect(function() {\n          lex(\"'\\\\u1''bla'\");\n        }).toThrowError(\"Lexer Error: Invalid unicode escape [\\\\u1''b] at column 2 in expression ['\\\\u1''bla']\");\n      });\n\n      it('should tokenize hash as operator', function() {\n        var tokens:List<Token> = lex(\"#\");\n        expectOperatorToken(tokens[0], 0, '#');\n      });\n\n    });\n  });\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","return assert.returnType(($__placeholder__0), $__placeholder__1)","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.type($__placeholder__0, $__placeholder__1)","assert.genericType($__placeholder__0)"]}