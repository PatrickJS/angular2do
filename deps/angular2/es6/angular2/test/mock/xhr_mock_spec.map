{"version":3,"sources":["xhr_mock_spec.js","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/1180","@traceur/generated/TemplateParser/10"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,QAAO;AAAG,WAAS;AAAG,GAAC;AAAG,OAAK;AAAG,UAAQ;AAAG,IAAE;AAAG,GAAC;AAAG,WAAS,CAAC,KAAO,oBAAkB,CAAC;AAClG,KAAO,EAAC,OAAM,CAAC,KAAO,6BAA2B,CAAC;AAClD,KAAO,EAAC,cAAa;AAAG,QAAM,CAAC,KAAO,4BAA0B,CAAC;AACjE,KAAO,EAAC,SAAQ,CAAC,KAAO,2BAAyB,CAAC;AAElD,KAAO,SAAS,KAAG,CAAE,AAAD;AAClB,SAAO,AAAC,CAAC,SAAQ,CAAG,EAAC,AAAD;AAClB,AAAI,MAAA,CAAA,GAAE,CAAC;AAEP,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,QAAE,EAAI,IAAI,QAAM,AAAC,EAAC,CAAC;IACrB,CAAC,CAAC;AAEF,WAAS,eAAa,CAAE,OAAM,AAAS,CAAG,CAAA,GAAE,AAAQ,CAAG,CAAA,QAAO,AAAQ,CAAG,CAAA,IAAG,EAAI,KAAG;ACbvF,WAAK,cAAc,SDakB,QAAM,MEb3C,CAAA,MAAK,KAAK,kBAAV,CAAA,MAAK,KAAK,cCAV,CAAA,MAAK,KAAK,IAAI,CFAwB,CAAA;ADchC,aAAS,WAAS,CAAE,IAAG,AAAQ,CAAG;ACdxC,aAAK,cAAc,MCAnB,CAAA,MAAK,KAAK,QDA4B,CAAA;ADe9B,WAAI,QAAO,IAAM,KAAG,CAAG;AACrB,cAAM,wBAAuB,GAAE,OAAQ,IAAG,EAAE,CAAC;QAC/C,KAAO;AACL,eAAK,AAAC,CAAC,IAAG,CAAC,QAAQ,AAAC,CAAC,QAAO,CAAC,CAAC;AAC9B,aAAI,SAAQ,AAAC,CAAC,IAAG,CAAC;AAAG,eAAG,AAAC,EAAC,CAAC;AAAA,QAC7B;AAAA,MACF;AAAA,AIrBN,WAAK,eAAe,AAAC,0BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,kBFD1B,MAAK,KAAK,UECuC;QAAC,CAAC,CAAC,CAAC;AJsB/C,aAAS,QAAM,CAAE,KAAI,AAAQ,CAAG;ACvBtC,aAAK,cAAc,OCAnB,CAAA,MAAK,KAAK,QDA4B,CAAA;ADwB9B,WAAI,QAAO,IAAM,KAAG,CAAG;AACrB,cAAM,qBAAoB,GAAE,EAAE,CAAC;QACjC,KAAO;AACL,eAAK,AAAC,CAAC,KAAI,CAAC,QAAQ,AAAC,CAAC,kBAAkB,GAAE,EAAE,CAAC,CAAC;AAC9C,aAAI,SAAQ,AAAC,CAAC,IAAG,CAAC;AAAG,eAAG,AAAC,EAAC,CAAC;AAAA,QAC7B;AAAA,MACF;AAAA,AI9BN,WAAK,eAAe,AAAC,uBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,kBFD1B,MAAK,KAAK,UECuC;QAAC,CAAC,CAAC,CAAC;AJ+B/C,mBAAa,KAAK,AAAC,CAAC,OAAM,CAAG,WAAS,CAAG,QAAM,CAAC,CAAC;IACnD;AIjCJ,SAAK,eAAe,AAAC,8BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,gBJYW,OAAM,IEb3C,MAAK,KAAK,WAAV,MAAK,KAAK,cECuC;MAAC,CAAC,CAAC,CAAC;AJkCjD,KAAC,AAAC,CAAC,+CAA8C,CAAG,EAAC,IAAG,IAAM;AAC5D,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,QAAE,KAAK,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACvB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,KAAG,CAAC,CAAC;AACjD,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,6CAA4C,CAAG,EAAC,IAAG,IAAM;AAC1D,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,KAAG,CAAC;AACnB,QAAE,KAAK,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACvB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,KAAG,CAAC,CAAC;AACjD,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,gDAA+C,CAAG,EAAC,IAAG,IAAM;AAC7D,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,KAAG,CAAC,CAAC;AACjD,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,8CAA6C,CAAG,EAAC,IAAG,IAAM;AAC3D,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,KAAG,CAAC;AACnB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAG,KAAG,CAAC,CAAC;AACjD,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,+BAA8B,CAAG,EAAC,AAAD,IAAM;AACxC,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,AAAI,QAAA,CAAA,QAAO,EAAI,MAAI,CAAC;AACpB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,QAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAC;AACZ,QAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAC;AACZ,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,yBAAwB,CAAC,CAAC;IAC5C,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,+CAA8C,CAAG,EAAC,IAAG,IAAM;AAC5D,AAAI,QAAA,CAAA,GAAE,EAAI,OAAK,CAAC;AAChB,QAAE,KAAK,AAAC,CAAC,GAAE,CAAG,OAAK,CAAC,CAAC;AACrB,QAAE,OAAO,AAAC,CAAC,GAAE,CAAG,SAAO,CAAC,CAAC;AACzB,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,SAAO,CAAC,CAAC;AAC3C,mBAAa,AAAC,CAAC,GAAE,IAAI,AAAC,CAAC,GAAE,CAAC,CAAG,IAAE,CAAG,OAAK,CAAG,KAAG,CAAC,CAAC;AAC/C,QAAE,MAAM,AAAC,EAAC,CAAC;IACb,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2DAA0D,CAAG,EAAC,AAAD,IAAM;AACpE,QAAE,IAAI,AAAC,CAAC,MAAK,CAAC,CAAC;AACf,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,yBAAwB,CAAC,CAAC;IAC5C,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,gEAA+D,CAAG,EAAC,AAAD,IAAM;AACzE,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,8BAA6B,CAAC,CAAC;IACjD,CAAC,CAAC;AAEF,KAAC,AAAC,CAAC,2CAA0C,CAAG,EAAC,AAAD,IAAM;AACpD,QAAE,OAAO,AAAC,CAAC,MAAK,CAAG,MAAI,CAAC,CAAC;AACzB,QAAE,KAAK,AAAC,CAAC,MAAK,CAAG,MAAI,CAAC,CAAC;AACvB,QAAE,IAAI,AAAC,CAAC,MAAK,CAAC,CAAC;AACf,WAAK,AAAC,CAAC,CAAC,AAAD,IAAM;AACX,UAAE,MAAM,AAAC,EAAC,CAAC;MACb,CAAC,aAAa,AAAC,CAAC,4BAA2B,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/mock/xhr_mock_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/mock/","sourcesContent":["import {describe, beforeEach, it, expect, ddescribe, iit, el, IS_DARTIUM} from 'angular2/test_lib';\nimport {XHRMock} from 'angular2/src/mock/xhr_mock';\nimport {PromiseWrapper, Promise} from 'angular2/src/facade/async';\nimport {isPresent} from 'angular2/src/facade/lang';\n\nexport function main() {\n  describe('XHRMock', () => {\n    var xhr;\n\n    beforeEach(() => {\n      xhr = new XHRMock();\n    });\n\n    function expectResponse(request: Promise, url: string, response: string, done = null) {\n      function onResponse(text: string) {\n        if (response === null) {\n          throw `Unexpected response ${url} -> ${text}`;\n        } else {\n          expect(text).toEqual(response);\n          if (isPresent(done)) done();\n        }\n      }\n\n      function onError(error: string) {\n        if (response !== null) {\n          throw `Unexpected error ${url}`;\n        } else {\n          expect(error).toEqual(`Failed to load ${url}`);\n          if (isPresent(done)) done();\n        }\n      }\n\n      PromiseWrapper.then(request, onResponse, onError);\n    }\n\n    it('should return a response from the definitions', (done) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should return an error from the definitions', (done) => {\n      var url = '/foo';\n      var response = null;\n      xhr.when(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should return a response from the expectations', (done) => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should return an error from the expectations', (done) => {\n      var url = '/foo';\n      var response = null;\n      xhr.expect(url, response);\n      expectResponse(xhr.get(url), url, response, done);\n      xhr.flush();\n    });\n\n    it('should not reuse expectations', () => {\n      var url = '/foo';\n      var response = 'bar';\n      xhr.expect(url, response);\n      xhr.get(url);\n      xhr.get(url);\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should return expectations before definitions', (done) => {\n      var url = '/foo';\n      xhr.when(url, 'when');\n      xhr.expect(url, 'expect');\n      expectResponse(xhr.get(url), url, 'expect');\n      expectResponse(xhr.get(url), url, 'when', done);\n      xhr.flush();\n    });\n\n    it('should throw when there is no definitions or expectations', () => {\n      xhr.get('/foo');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unexpected request /foo');\n    });\n\n    it('should throw when flush is called without any pending requests', () => {\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('No pending requests to flush');\n    });\n\n    it('should throw on unstatisfied expectations', () => {\n      xhr.expect('/foo', 'bar');\n      xhr.when('/bar', 'foo');\n      xhr.get('/bar');\n      expect(() => {\n        xhr.flush();\n      }).toThrowError('Unsatisfied requests: /foo');\n    });\n  });\n}\n","assert.argumentTypes($__placeholder__0)","assert.type.$__placeholder__0)","assert.type.any","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}