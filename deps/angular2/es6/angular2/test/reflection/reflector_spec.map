{"version":3,"sources":["reflector_spec.js","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/8"],"names":[],"mappings":"AAAA;AAAA,KAAO,EAAC,QAAO;AAAG,GAAC;AAAG,IAAE;AAAG,UAAQ;AAAG,OAAK;AAAG,WAAS,CAAC,KAAO,oBAAkB,CAAC;AAClF,KAAO,EAAC,SAAQ,CAAC,KAAO,qCAAmC,CAAC;AAC5D,KAAO,EAAC,sBAAqB,CAAC,KAAO,kDAAgD,CAAC;AACtF,KAAO,EAAC,KAAI,CAAC,KAAO,2BAAyB,CAAC;AAE9C,IAAM,WAAS;AAGb,AACA,YAAU,CAAE,KAAI,CAAG;AACjB,OAAG,MAAM,EAAI,MAAI,CAAC;EACpB;AAAA,AACF;ACZA,KAAK,eAAe,AAAC,2BACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDOvB,MAAI,AAAC,EAAC,ECPwC;EAAC,CAAC,CAAC,CAAC;ADarD,IAAM,MAAI;AAGR,YAAU,CAAE,KAAI,CAAE;AAChB,OAAG,MAAM,EAAI,MAAI,CAAC;EACpB;AAAA,AACF;AAGA,IAAM,qBAAmB;AAIvB,YAAU,CAAE,AAAiB,CAAA,AAAM,CAAoB,CAAA,CAAA,AAAM,CAAG;AE3BlE,SAAK,cAAc,GF2Bc,MAAI,IAAsB,MAAI,CE3BzB,CAAA;AF4BlC,OAAG,EAAE,EAAI,EAAA,CAAC;AACV,OAAG,EAAE,EAAI,EAAA,CAAC;EACZ;AAAA,AACF;AC/BA,KAAK,eAAe,AAAC,qCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDqBzB,WAAS,AAAC,CAAC,OAAM,CAAC,ECrB8B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,oCACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YD0BO,KAAI,KAAtB,WAAS,AAAC,CAAC,GAAE,CAAC,IAA8B,KAAI,KAAtB,WAAS,AAAC,CAAC,GAAE,CAAC,GC1BN;EAAC,CAAC,CAAC,CAAC;ADgCrD,IAAM,wBAAsB;AAC1B,YAAU,CAAE,CAAA,CAAE,CAAA,CAAA,CAAE,GAAC;AAAA,AACnB;AAEA,IAAM,kBAAgB;AACpB,YAAU,CAAE,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,EAAC,CAAE,CAAA,GAAE,CAAE,CAAA,GAAE,CAAG,GAChD;AAAA,AACF;AAGA,OAAS,SAAO,CAAE,AAAiB,CAAA,AAAM,CAAoB,CAAA,CAAA,AAAM,CAAG;AE3CtE,OAAK,cAAc,GF2CkB,MAAI,IAAsB,MAAI,CE3C7B,CAAA;AF4CtC;AAAA,AC5CA,KAAK,eAAe,AAAC,yBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,cDyCzB,WAAS,AAAC,CAAC,MAAK,CAAC,ECzC+B;EAAC,CAAC,CAAC,CAAC;AADrD,KAAK,eAAe,AAAC,wBACb,EAAC,GAAE,CAAG,UAAS,AAAD,CAAG;AAAC,YD0CW,KAAI,KAAtB,WAAS,AAAC,CAAC,GAAE,CAAC,IAA8B,KAAI,KAAtB,WAAS,AAAC,CAAC,GAAE,CAAC,GC1CV;EAAC,CAAC,CAAC,CAAC;AD6CrD,IAAM,QAAM;AAIV,YAAU,CAAE,CAAA,CAAG,CAAA,CAAA,CAAG;AAChB,OAAG,EAAE,EAAI,EAAA,CAAC;AACV,OAAG,EAAE,EAAI,EAAA,CAAC;EACZ;AAAA,AAEA,SAAO,CAAE,GAAE,CAAG;AACZ,SAAO,IAAE,CAAC;EACZ;AAAA,AACF;AAEA,KAAO,SAAS,KAAG,CAAE,AAAD,CAAG;AACrB,SAAO,AAAC,CAAC,WAAU,CAAG,EAAC,AAAD,IAAM;AAC1B,AAAI,MAAA,CAAA,SAAQ,CAAC;AAEb,aAAS,AAAC,CAAC,CAAC,AAAD,IAAM;AACf,cAAQ,EAAI,IAAI,UAAQ,AAAC,CAAC,GAAI,uBAAqB,AAAC,EAAC,CAAC,CAAC;IACzD,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,SAAQ,CAAG,EAAC,AAAD,IAAM;AACxB,OAAC,AAAC,CAAC,4CAA2C,CAAG,EAAC,AAAD,IAAM;AACrD,AAAI,UAAA,CAAA,GAAE,EAAI,CAAA,SAAQ,QAAQ,AAAC,CAAC,OAAM,CAAC,AAAC,CAAC,CAAA,CAAG,EAAA,CAAC,CAAC;AAE1C,aAAK,AAAC,CAAC,GAAE,EAAE,CAAC,QAAQ,AAAC,CAAC,CAAA,CAAC,CAAC;AACxB,aAAK,AAAC,CAAC,GAAE,EAAE,CAAC,QAAQ,AAAC,CAAC,CAAA,CAAC,CAAC;MAC1B,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,0CAAyC,CAAG,EAAC,AAAD,IAAM;AACnD,aAAK,AAAC,CAAC,CAAC,AAAD,IAAM,CAAA,SAAQ,QAAQ,AAAC,CAAC,iBAAgB,CAAC,AAAC,CAAC,CAAA,CAAE,EAAA,CAAE,EAAA,CAAE,EAAA,CAAE,EAAA,CAAE,EAAA,CAAE,EAAA,CAAE,EAAA,CAAE,EAAA,CAAE,GAAC,CAAE,GAAC,CAAC,CAAC,aAAa,AAAC,EAAC,CAAC;MAC5F,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,iDAAgD,CAAG,EAAC,AAAD,IAAM;AAC1D,gBAAQ,aAAa,AAAC,CAAC,OAAM,CAAG,EAAC,SAAQ,CAAI,EAAC,AAAD,IAAM,OAAK,CAAC,CAAC,CAAC;AAC3D,aAAK,AAAC,CAAC,SAAQ,QAAQ,AAAC,CAAC,OAAM,CAAC,AAAC,EAAC,CAAC,QAAQ,AAAC,CAAC,MAAK,CAAC,CAAC;MACtD,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,YAAW,CAAG,EAAC,AAAD,IAAM;AAC3B,OAAC,AAAC,CAAC,iDAAgD,CAAG,EAAC,AAAD,IAAM;AAC1D,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,SAAQ,WAAW,AAAC,CAAC,oBAAmB,CAAC,CAAC;AAClD,aAAK,AAAC,CAAC,CAAA,CAAC,QAAQ,AAAC,CAAC,CAAC,CAAC,KAAI,CAAG,IAAI,WAAS,AAAC,CAAC,GAAE,CAAC,CAAC,CAAG,EAAC,KAAI,CAAG,IAAI,WAAS,AAAC,CAAC,GAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACjF,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,qDAAoD,CAAG,EAAC,AAAD,IAAM;AAC9D,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,SAAQ,WAAW,AAAC,CAAC,QAAO,CAAC,CAAC;AACtC,aAAK,AAAC,CAAC,CAAA,CAAC,QAAQ,AAAC,CAAC,CAAC,CAAC,KAAI,CAAG,IAAI,WAAS,AAAC,CAAC,GAAE,CAAC,CAAC,CAAG,EAAC,KAAI,CAAG,IAAI,WAAS,AAAC,CAAC,GAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACjF,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,6CAA4C,CAAG,EAAC,AAAD,IAAM;AACtD,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,SAAQ,WAAW,AAAC,CAAC,uBAAsB,CAAC,CAAC;AACrD,aAAK,AAAC,CAAC,CAAA,OAAO,CAAC,QAAQ,AAAC,CAAC,CAAA,CAAC,CAAC;MAC7B,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,kDAAiD,CAAG,EAAC,AAAD,IAAM;AAC3D,gBAAQ,aAAa,AAAC,CAAC,OAAM,CAAG,EAAC,YAAW,CAAI,EAAC,CAAA,CAAE,EAAA,CAAC,CAAC,CAAC,CAAC;AACvD,aAAK,AAAC,CAAC,SAAQ,WAAW,AAAC,CAAC,OAAM,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAC,CAAA,CAAE,EAAA,CAAC,CAAC,CAAC;MACtD,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,aAAY,CAAG,EAAC,AAAD,IAAM;AAC5B,OAAC,AAAC,CAAC,kDAAiD,CAAG,EAAC,AAAD,IAAM;AAC3D,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,SAAQ,YAAY,AAAC,CAAC,oBAAmB,CAAC,CAAC;AACnD,aAAK,AAAC,CAAC,CAAA,CAAC,QAAQ,AAAC,CAAC,CAAC,GAAI,WAAS,AAAC,CAAC,OAAM,CAAC,CAAC,CAAC,CAAC;MAC9C,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,sDAAqD,CAAG,EAAC,AAAD,IAAM;AAC/D,AAAI,UAAA,CAAA,CAAA,EAAI,CAAA,SAAQ,YAAY,AAAC,CAAC,QAAO,CAAC,CAAC;AACvC,aAAK,AAAC,CAAC,CAAA,CAAC,QAAQ,AAAC,CAAC,CAAC,GAAI,WAAS,AAAC,CAAC,MAAK,CAAC,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,mDAAkD,CAAG,EAAC,AAAD,IAAM;AAC5D,gBAAQ,aAAa,AAAC,CAAC,OAAM,CAAG,EAAC,aAAY,CAAI,EAAC,CAAA,CAAE,EAAA,CAAC,CAAC,CAAC,CAAC;AACxD,aAAK,AAAC,CAAC,SAAQ,YAAY,AAAC,CAAC,OAAM,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAC,CAAA,CAAE,EAAA,CAAC,CAAC,CAAC;MACvD,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,QAAO,CAAG,EAAC,AAAD,IAAM;AACvB,OAAC,AAAC,CAAC,uCAAsC,CAAG,EAAC,AAAD,IAAM;AAChD,AAAI,UAAA,CAAA,IAAG,EAAI,CAAA,SAAQ,OAAO,AAAC,CAAC,GAAE,CAAC,CAAC;AAChC,aAAK,AAAC,CAAC,IAAG,AAAC,CAAC,GAAI,QAAM,AAAC,CAAC,CAAA,CAAG,EAAA,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAA,CAAC,CAAC;MAC5C,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,gDAA+C,CAAG,EAAC,AAAD,IAAM;AACzD,gBAAQ,gBAAgB,AAAC,CAAC,CAAC,KAAI,CAAI,EAAC,GAAE,IAAM,OAAK,CAAC,CAAC,CAAC;AACpD,aAAK,AAAC,CAAC,SAAQ,OAAO,AAAC,CAAC,KAAI,CAAC,AAAC,CAAC,UAAS,CAAC,CAAC,QAAQ,AAAC,CAAC,MAAK,CAAC,CAAC;MAC7D,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,QAAO,CAAG,EAAC,AAAD,IAAM;AACvB,OAAC,AAAC,CAAC,uCAAsC,CAAG,EAAC,AAAD,IAAM;AAChD,AAAI,UAAA,CAAA,IAAG,EAAI,CAAA,SAAQ,OAAO,AAAC,CAAC,GAAE,CAAC,CAAC;AAChC,AAAI,UAAA,CAAA,GAAE,EAAI,IAAI,QAAM,AAAC,CAAC,CAAA,CAAG,EAAA,CAAC,CAAC;AAC3B,WAAG,AAAC,CAAC,GAAE,CAAG,IAAE,CAAC,CAAC;AACd,aAAK,AAAC,CAAC,GAAE,EAAE,CAAC,QAAQ,AAAC,CAAC,GAAE,CAAC,CAAC;MAC5B,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,gDAA+C,CAAG,EAAC,AAAD,IAAM;AACzD,AAAI,UAAA,CAAA,QAAO,CAAC;AACZ,gBAAQ,gBAAgB,AAAC,CAAC,CAAC,KAAI,CAAI,EAAC,GAAE,CAAG,CAAA,KAAI,IAAM;AAAC,mBAAO,EAAI,MAAI,CAAC;UAAC,CAAC,CAAC,CAAC;AACxE,gBAAQ,OAAO,AAAC,CAAC,KAAI,CAAC,AAAC,CAAC,UAAS,CAAG,OAAK,CAAC,CAAC;AAE3C,aAAK,AAAC,CAAC,QAAO,CAAC,QAAQ,AAAC,CAAC,MAAK,CAAC,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,CAAC;AAEF,WAAO,AAAC,CAAC,QAAO,CAAG,EAAC,AAAD,IAAM;AACvB,OAAC,AAAC,CAAC,sCAAqC,CAAG,EAAC,AAAD,IAAM;AAC/C,AAAI,UAAA,CAAA,IAAG,EAAI,CAAA,SAAQ,OAAO,AAAC,CAAC,UAAS,CAAC,CAAC;AACvC,AAAI,UAAA,CAAA,GAAE,EAAI,IAAI,QAAM,AAAC,CAAC,CAAA,CAAG,EAAA,CAAC,CAAC;AAC3B,aAAK,AAAC,CAAC,IAAG,AAAC,CAAC,GAAE,CAAG,EAAC,OAAM,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,OAAM,CAAC,CAAC;MAC/C,CAAC,CAAC;AAEF,OAAC,AAAC,CAAC,gDAA+C,CAAG,EAAC,AAAD,IAAM;AACzD,gBAAQ,gBAAgB,AAAC,CAAC,CAAC,KAAI,CAAI,EAAC,GAAE,CAAG,CAAA,IAAG,IAAM,KAAG,CAAC,CAAC,CAAC;AACxD,aAAK,AAAC,CAAC,SAAQ,OAAO,AAAC,CAAC,KAAI,CAAC,AAAC,CAAC,UAAS,CAAG,EAAC,MAAK,CAAC,CAAC,CAAC,QAAQ,AAAC,CAAC,CAAC,MAAK,CAAC,CAAC,CAAC;MACzE,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAAA","file":"/Users/patrick/Documents/open source/angular/modules/angular2/test/reflection/reflector_spec.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/angular2/test/reflection/","sourcesContent":["import {describe, it, iit, ddescribe, expect, beforeEach} from 'angular2/test_lib';\nimport {Reflector} from 'angular2/src/reflection/reflection';\nimport {ReflectionCapabilities} from 'angular2/src/reflection/reflection_capabilities';\nimport {CONST} from 'angular2/src/facade/lang';\n\nclass Annotation {\n  value;\n\n  @CONST()\n  constructor(value) {\n    this.value = value;\n  }\n}\n\nclass AType {\n  value;\n\n  constructor(value){\n    this.value = value;\n  }\n}\n\n@Annotation('class')\nclass ClassWithAnnotations {\n  a;\n  b;\n\n  constructor(@Annotation(\"a\") a:AType, @Annotation(\"b\") b:AType) {\n    this.a = a;\n    this.b = b;\n  }\n}\n\nclass ClassWithoutAnnotations {\n  constructor(a,b){}\n}\n\nclass TestObjWith11Args {\n  constructor(a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {\n  }\n}\n\n@Annotation('func')\nfunction testFunc(@Annotation(\"a\") a:AType, @Annotation(\"b\") b:AType) {\n}\n\nclass TestObj {\n  a;\n  b;\n\n  constructor(a, b) {\n    this.a = a;\n    this.b = b;\n  }\n\n  identity(arg) {\n    return arg;\n  }\n}\n\nexport function main() {\n  describe('Reflector', () => {\n    var reflector;\n\n    beforeEach(() => {\n      reflector = new Reflector(new ReflectionCapabilities());\n    });\n\n    describe(\"factory\", () => {\n      it(\"should create a factory for the given type\", () => {\n        var obj = reflector.factory(TestObj)(1, 2);\n\n        expect(obj.a).toEqual(1);\n        expect(obj.b).toEqual(2);\n      });\n\n      it(\"should throw when more than 10 arguments\", () => {\n        expect(() => reflector.factory(TestObjWith11Args)(1,2,3,4,5,6,7,8,9,10,11)).toThrowError();\n      });\n\n      it(\"should return a registered factory if available\", () => {\n        reflector.registerType(TestObj, {\"factory\" : () => \"fake\"});\n        expect(reflector.factory(TestObj)()).toEqual(\"fake\");\n      });\n    });\n\n    describe(\"parameters\", () => {\n      it(\"should return an array of parameters for a type\", () => {\n        var p = reflector.parameters(ClassWithAnnotations);\n        expect(p).toEqual([[AType, new Annotation('a')], [AType, new Annotation('b')]]);\n      });\n\n      it(\"should return an array of parameters for a function\", () => {\n        var p = reflector.parameters(testFunc);\n        expect(p).toEqual([[AType, new Annotation('a')], [AType, new Annotation('b')]]);\n      });\n\n      it(\"should work for a class without annotations\", () => {\n        var p = reflector.parameters(ClassWithoutAnnotations);\n        expect(p.length).toEqual(2);\n      });\n\n      it(\"should return registered parameters if available\", () => {\n        reflector.registerType(TestObj, {\"parameters\" : [1,2]});\n        expect(reflector.parameters(TestObj)).toEqual([1,2]);\n      });\n    });\n\n    describe(\"annotations\", () => {\n      it(\"should return an array of annotations for a type\", () => {\n        var p = reflector.annotations(ClassWithAnnotations);\n        expect(p).toEqual([new Annotation('class')]);\n      });\n\n      it(\"should return an array of annotations for a function\", () => {\n        var p = reflector.annotations(testFunc);\n        expect(p).toEqual([new Annotation('func')]);\n      });\n\n      it(\"should return registered annotations if available\", () => {\n        reflector.registerType(TestObj, {\"annotations\" : [1,2]});\n        expect(reflector.annotations(TestObj)).toEqual([1,2]);\n      });\n    });\n\n    describe(\"getter\", () => {\n      it(\"returns a function reading a property\", () => {\n        var getA = reflector.getter('a');\n        expect(getA(new TestObj(1, 2))).toEqual(1);\n      });\n\n      it(\"should return a registered getter if available\", () => {\n        reflector.registerGetters({\"abc\" : (obj) => \"fake\"});\n        expect(reflector.getter(\"abc\")(\"anything\")).toEqual(\"fake\");\n      });\n    });\n\n    describe(\"setter\", () => {\n      it(\"returns a function setting a property\", () => {\n        var setA = reflector.setter('a');\n        var obj = new TestObj(1, 2);\n        setA(obj, 100);\n        expect(obj.a).toEqual(100);\n      });\n\n      it(\"should return a registered setter if available\", () => {\n        var updateMe;\n        reflector.registerSetters({\"abc\" : (obj, value) => {updateMe = value;}});\n        reflector.setter(\"abc\")(\"anything\", \"fake\");\n\n        expect(updateMe).toEqual(\"fake\");\n      });\n    });\n\n    describe(\"method\", () => {\n      it(\"returns a function invoking a method\", () => {\n        var func = reflector.method('identity');\n        var obj = new TestObj(1, 2);\n        expect(func(obj, ['value'])).toEqual('value');\n      });\n\n      it(\"should return a registered method if available\", () => {\n        reflector.registerMethods({\"abc\" : (obj, args) => args});\n        expect(reflector.method(\"abc\")(\"anything\", [\"fake\"])).toEqual(['fake']);\n      });\n    });\n  });\n}","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});","assert.argumentTypes($__placeholder__0)"]}