{"version":3,"sources":["app.js","@traceur/generated/TemplateParser/385","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"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","file":"/Users/patrick/Documents/open source/angular/modules/benchmarks/src/naive_infinite_scroll/app.js","sourceRoot":"/Users/patrick/Documents/open source/angular/modules/benchmarks/src/naive_infinite_scroll/","sourcesContent":["import {int, isPresent} from 'angular2/src/facade/lang';\nimport {reflector} from 'angular2/src/reflection/reflection';\nimport {getIntParameter, bindAction} from 'angular2/src/test_lib/benchmark_util';\nimport {bootstrap, Component, Viewport, Template, ViewContainer, Compiler}\n    from 'angular2/angular2';\nimport {PromiseWrapper} from 'angular2/src/facade/async';\nimport {ListWrapper} from 'angular2/src/facade/collection';\nimport {ScrollAreaComponent} from './scroll_area';\nimport {If, Foreach} from 'angular2/directives';\nimport {DOM, document, Element} from 'angular2/src/facade/dom';\n\nexport class App {\n  scrollAreas:List<int>;\n  iterationCount:int;\n  scrollIncrement:int;\n\n  constructor() {\n    var appSize = getIntParameter('appSize');\n    this.iterationCount = getIntParameter('iterationCount');\n    this.scrollIncrement = getIntParameter('scrollIncrement');\n    appSize = appSize > 1 ? appSize - 1 : 0;  // draw at least one table\n    this.scrollAreas = [];\n    for (var i = 0; i < appSize; i++) {\n      ListWrapper.push(this.scrollAreas, i);\n    }\n    // TODO(tbosch): change to bindAction when it works in pub serve\n    DOM.on(DOM.query('scroll-app /deep/ #run-btn'), 'click', (_) => {\n      this.runBenchmark();\n    });\n    DOM.on(DOM.query('scroll-app /deep/ #reset-btn'), 'click', (_) => {\n      this._getScrollDiv().scrollTop = 0;\n      var existingMarker = this._locateFinishedMarker();\n      if (isPresent(existingMarker)) {\n        DOM.removeChild(document.body, existingMarker);\n      }\n    });\n  }\n\n  runBenchmark() {\n    var scrollDiv = this._getScrollDiv();\n    var n:int = this.iterationCount;\n    var scheduleScroll;\n    scheduleScroll = () => {\n      PromiseWrapper.setTimeout(() => {\n        scrollDiv.scrollTop += this.scrollIncrement;\n        n--;\n        if (n > 0) {\n          scheduleScroll();\n        } else {\n          this._scheduleFinishedMarker();\n        }\n      }, 0);\n    }\n    scheduleScroll();\n  }\n\n  // Puts a marker indicating that the test is finished.\n  _scheduleFinishedMarker() {\n    var existingMarker = this._locateFinishedMarker();\n    if (isPresent(existingMarker)) {\n      // Nothing to do, the marker is already there\n      return;\n    }\n    PromiseWrapper.setTimeout(() => {\n      var finishedDiv = DOM.createElement('div');\n      finishedDiv.id = 'done';\n      DOM.setInnerHTML(finishedDiv, 'Finished');\n      DOM.appendChild(document.body, finishedDiv);\n    }, 0);\n  }\n\n  _locateFinishedMarker():Element {\n    return DOM.querySelector(document.body, '#done');\n  }\n\n  _getScrollDiv() {\n    return DOM.query('body /deep/ #testArea /deep/ #scrollDiv');\n  }\n}\n\nexport function setupReflectorForApp() {\n  reflector.registerType(App, {\n    'factory': () => { return new App(); },\n    'parameters': [],\n    'annotations': [\n      new Component({selector: 'scroll-app'}),\n      new Template({\n        directives: [ScrollAreaComponent, If, Foreach],\n        inline: `\n          <div>\n            <div style=\"display: flex\">\n              <scroll-area id=\"testArea\"></scroll-area>\n              <div style=\"padding-left: 20px\">\n                <button id=\"run-btn\">Run</button>\n                <button id=\"reset-btn\">Reset</button>\n              </div>\n            </div>\n            <div template=\"if scrollAreas.length > 0\">\n              <p>Following tables are only here to add weight to the UI:</p>\n              <scroll-area template=\"foreach #scrollArea in scrollAreas\"></scroll-area>\n            </div>\n          </div>`\n      })]\n  });\n}\n","assert.type($__placeholder__0, $__placeholder__1)","return assert.returnType(($__placeholder__0), $__placeholder__1)"]}